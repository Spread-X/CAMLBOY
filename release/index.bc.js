// Generated by js_of_ocaml 3.11.0+git-0bf8b0d
(function(joo_global_object)
   {"use strict";
    function caml_ml_bytes_length(s){return s.l}
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_bigstring_blit_string_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_string_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_string(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    function bigstringaf_blit_from_bytes(src,src_off,dst,dst_off,len)
     {return caml_bigstring_blit_string_to_ba(src,src_off,dst,dst_off,len)}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_kind_of_typed_array(ta)
     {var g=joo_global_object,kind;
      if(ta instanceof g.Float32Array)
       kind = 0;
      else
       if(ta instanceof g.Float64Array)
        kind = 1;
       else
        if(ta instanceof g.Int8Array)
         kind = 2;
        else
         if(ta instanceof g.Uint8Array)
          kind = 3;
         else
          if(ta instanceof g.Int16Array)
           kind = 4;
          else
           if(ta instanceof g.Uint16Array)
            kind = 5;
           else
            if(ta instanceof g.Int32Array)
             kind = 6;
            else
             if(ta instanceof g.Uint32Array)
              kind = 6;
             else
              caml_invalid_argument
               ("caml_ba_kind_of_typed_array: unsupported kind");
      return kind}
    function caml_ba_from_typed_array(ta)
     {var kind=caml_ba_kind_of_typed_array(ta);
      return caml_ba_create_unsafe(kind,0,[ta.length],ta)}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_ba_set_1(ba,i0,v){ba.set(ba.offset(i0),v);return 0}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    function make_path_is_absolute()
     {function posix(path)
       {if(path.charAt(0) === "/")return ["",path.substring(1)];return}
      function win32(path)
       {var
         splitDeviceRe=
          /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
         result=splitDeviceRe.exec(path),
         device=result[1] || "",
         isUnc=Boolean(device && device.charAt(1) !== ":");
        if(Boolean(result[2] || isUnc))
         {var root=result[1] || "",sep=result[2] || "";
          return [root,path.substring(root.length + sep.length)]}
        return}
      return joo_global_object.process && joo_global_object.process.platform
              ?joo_global_object.process.platform === "win32"?win32:posix
              :posix}
    var path_is_absolute=make_path_is_absolute();
    function caml_trailing_slash(name)
     {return name.slice(- 1) !== "/"?name + "/":name}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    caml_current_dir = caml_trailing_slash(caml_current_dir);
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(! path_is_absolute(name))name = caml_current_dir + name;
      var comp0=path_is_absolute(name),comp=comp0[1].split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         default:ncomp.push(comp[i]);break}
      ncomp.unshift(comp0[0]);
      ncomp.orig = name;
      return ncomp}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    var
     unix_error=
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    function make_unix_err_args(code,syscall,path,errno)
     {var variant=unix_error.indexOf(code);
      if(variant < 0){if(errno == null)errno = - 9999;variant = [0,errno]}
      var
       args=
        [variant,
         caml_string_of_jsstring(syscall || ""),
         caml_string_of_jsstring(path || "")];
      return args}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_raise_with_args(tag,args){throw [0,tag].concat(args)}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.create_dir_if_needed
    =
    function(name)
     {var comp=name.split("/"),res="";
      for(var i=0;i < comp.length - 1;i++)
       {res += comp[i] + "/";
        if(this.content[res])continue;
        this.content[res] = Symbol("directory")}};
    MlFakeDevice.prototype.slash
    =
    function(name){return /\/$/.test(name)?name:name + "/"};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         {this.create_dir_if_needed(name);
          this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=this.slash(name);
      if(this.content[name_slash])return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {var unix_error=raise_unix && caml_named_value("Unix.Unix_error");
      if(this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("EEXIST","mkdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": File exists");
      var parent=/^(.*)\/[^/]+/.exec(name);
      parent = parent && parent[1] || "";
      if(! this.exists(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": No such file or directory");
      if(! this.is_dir(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": Not a directory");
      this.create_dir_if_needed(this.slash(name))};
    MlFakeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       name_slash=name == ""?"":this.slash(name),
       r=new RegExp("^" + name_slash + "([^/]+)");
      if(! this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": Not a directory");
      for(var n in this.content)
       if(n.match(r))
        if(unix_error)
         caml_raise_with_args
          (unix_error,make_unix_err_args("ENOTEMPTY","rmdir",this.nm(name)));
        else
         caml_raise_sys_error(this.nm(name) + ": Directory not empty");
      delete this.content[name_slash]};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var name_slash=name == ""?"":this.slash(name);
      if(! this.exists(name))
       caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))caml_raise_sys_error(name + ": Not a directory");
      var r=new RegExp("^" + name_slash + "([^/]+)"),seen={},a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {if(name == "")return true;
      var name_slash=this.slash(name);
      return this.content[name_slash]?1:0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {var file;
      if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))file = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       file = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        file = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         file = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           file = new MlFakeFile(bytes)}
      if(file)
       {this.create_dir_if_needed(name);this.content[name] = file}
      else
       caml_raise_sys_error
        (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try {return this.fs.existsSync(this.nm(name))?1:0}catch(err){return 0}};
    MlNodeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {try
       {this.fs.mkdirSync(this.nm(name),{mode:mode});return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {try
       {this.fs.rmdirSync(this.nm(name));return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readdir
    =
    function(name,raise_unix)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name,raise_unix)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name));
        return b}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.open
    =
    function(name,f,raise_unix)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rename
    =
    function(o,n,raise_unix)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.stat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.statSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.lstat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.lstatSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.symlink
    =
    function(to_dir,target,path,raise_unix)
     {try
       {this.fs.symlinkSync(this.nm(target),this.nm(path),to_dir?"dir":"file");
        return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readlink
    =
    function(name,raise_unix)
     {try
       {var link=this.fs.readlinkSync(this.nm(name),"utf8");
        return caml_string_of_jsstring(link)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.raise_nodejs_error
    =
    function(err,raise_unix)
     {var unix_error=caml_named_value("Unix.Unix_error");
      if(raise_unix && unix_error)
       {var args=make_unix_err_args(err.code,err.syscall,err.path,err.errno);
        caml_raise_with_args(unix_error,args)}
      else
       caml_raise_sys_error(err.toString())};
    MlNodeDevice.prototype.stats_from_js
    =
    function(js_stats)
     {var file_kind;
      if(js_stats.isFile())
       file_kind = 0;
      else
       if(js_stats.isDirectory())
        file_kind = 1;
       else
        if(js_stats.isCharacterDevice())
         file_kind = 2;
        else
         if(js_stats.isBlockDevice())
          file_kind = 3;
         else
          if(js_stats.isSymbolicLink())
           file_kind = 4;
          else
           if(js_stats.isFIFO())
            file_kind = 5;
           else
            if(js_stats.isSocket())file_kind = 6;
      return [0,
              js_stats.dev,
              js_stats.ino,
              file_kind,
              js_stats.mode,
              js_stats.nlink,
              js_stats.uid,
              js_stats.gid,
              js_stats.rdev,
              js_stats.size,
              js_stats.atimeMs,
              js_stats.mtimeMs,
              js_stats.ctimeMs]};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    function caml_get_root(path)
     {var x=path_is_absolute(path);if(! x)return;return x[0] + "/"}
    var
     caml_root=
      caml_get_root(caml_current_dir)
      ||
      caml_failwith("unable to compute caml_root");
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=caml_trailing_slash(name),
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      if(! res)
       {var root=caml_get_root(name);
        if(root && root.match(/^[a-zA-Z]:\/$/))
         {var m={path:root,device:new MlNodeDevice(root)};
          jsoo_mount_point.push(m);
          res
          =
          {path:m.path,
           device:m.device,
           rest:name.substring(m.path.length,name.length)}}}
      if(res)return res;
      caml_raise_sys_error("no device found for " + name_slash)}
    function caml_create_file(name,content)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       content=
        typeof content == "string"?caml_string_of_jsbytes(content):content,
       root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_gc_major(){return 0}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_js_from_bool(x){return ! ! x}
    function caml_js_get(o,f){return o[f]}
    function caml_js_meth_call(o,f,args)
     {return o[caml_jsstring_of_string(f)].apply(o,caml_js_from_array(args))}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_ml_debug_info_status(){return 0}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var refill=null;
      if(fd == 0 && fs_node_supported())
       {var fs=require("fs");
        refill
        =
        function(){return caml_string_of_jsstring(fs.readFileSync(0,"utf8"))}}
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:refill};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_sys_const_naked_pointers_checked(_unit){return 0}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_is_special_exception(exn)
     {switch(exn[2]){case - 8:case - 11:case - 12:return 1;default:return 0}}
    function caml_format_exception(exn)
     {var r="";
      if(exn[0] == 0)
       {r += exn[1][1];
        if
         (exn.length
          ==
          3
          &&
          exn[2][0]
          ==
          0
          &&
          caml_is_special_exception(exn[1]))
         var bucket=exn[2],start=1;
        else
         var start=2,bucket=exn;
        r += "(";
        for(var i=start;i < bucket.length;i++)
         {if(i > start)r += ", ";
          var v=bucket[i];
          if(typeof v == "number")
           r += v.toString();
          else
           if(v instanceof MlBytes)
            r += '"' + v.toString() + '"';
           else
            if(typeof v == "string")
             r += '"' + v.toString() + '"';
            else
             r += "_"}
        r += ")"}
      else
       if(exn[0] == 248)r += exn[1];
      return r}
    function caml_fatal_uncaught_exception(err)
     {if(err instanceof Array && (err[0] == 0 || err[0] == 248))
       {var handler=caml_named_value("Printexc.handle_uncaught_exception");
        if(handler)
         handler(err,false);
        else
         {var
           msg=caml_format_exception(err),
           at_exit=caml_named_value("Pervasives.do_at_exit");
          if(at_exit)at_exit(0);
          joo_global_object.console.error
           ("Fatal error: exception " + msg + "\n")}}
      else
       throw err}
    function caml_setup_uncaught_exception_handler()
     {var g=joo_global_object;
      if(g.process && g.process.on)
       g.process.on
        ("uncaughtException",
         function(err,origin)
          {caml_fatal_uncaught_exception(err);g.process.exit(2)});
      else
       if(g.addEventListener)
        g.addEventListener
         ("error",
          function(event)
           {if(event.error)caml_fatal_uncaught_exception(event.error)})}
    caml_setup_uncaught_exception_handler();
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     opt=[0,103],
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     meth=caml_string_of_jsbytes("log"),
     opt$0=[0,1],
     op=caml_string_of_jsbytes("of_string"),
     fmt=[0,[0,0],caml_string_of_jsbytes("%c")],
     capture=[0,1],
     rom_options=
      [0,
       [0,
        caml_string_of_jsbytes("The Bouncing Ball"),
        caml_string_of_jsbytes("./the-bouncing-ball.gb")],
       [0,
        [0,
         caml_string_of_jsbytes("Tobu Tobu Girl"),
         caml_string_of_jsbytes("./tobu.gb")],
        [0,
         [0,
          caml_string_of_jsbytes("Cavern"),
          caml_string_of_jsbytes("./cavern.gb")],
         [0,
          [0,
           caml_string_of_jsbytes("Into The Blue"),
           caml_string_of_jsbytes("./into-the-blue.gb")],
          [0,
           [0,
            caml_string_of_jsbytes("Rocket Man Demo"),
            caml_string_of_jsbytes("./rocket-man-demo.gb")],
           [0,
            [0,
             caml_string_of_jsbytes("Retroid"),
             caml_string_of_jsbytes("./retroid.gb")],
            [0,
             [0,
              caml_string_of_jsbytes("Wishing Sarah"),
              caml_string_of_jsbytes("./dreaming-sarah.gb")],
             [0,
              [0,
               caml_string_of_jsbytes("SHEEP IT UP"),
               caml_string_of_jsbytes("./sheep-it-up.gb")],
              0]]]]]]]];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _d_=caml_string_of_jsbytes("%.12g"),
     _c_=caml_string_of_jsbytes("."),
     _a_=caml_string_of_jsbytes("true"),
     _b_=caml_string_of_jsbytes("false"),
     _e_=caml_string_of_jsbytes("option is None"),
     _f_=caml_string_of_jsbytes("\\\\"),
     _g_=caml_string_of_jsbytes("\\'"),
     _h_=caml_string_of_jsbytes("\\b"),
     _i_=caml_string_of_jsbytes("\\t"),
     _j_=caml_string_of_jsbytes("\\n"),
     _k_=caml_string_of_jsbytes("\\r"),
     _m_=caml_string_of_jsbytes("List.init"),
     _l_=caml_string_of_jsbytes("hd"),
     _p_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _o_=caml_string_of_jsbytes("Bytes.blit"),
     _n_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _s_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _r_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _q_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _B_=caml_string_of_jsbytes("%c"),
     _C_=caml_string_of_jsbytes("%s"),
     _D_=caml_string_of_jsbytes("%i"),
     _E_=caml_string_of_jsbytes("%li"),
     _F_=caml_string_of_jsbytes("%ni"),
     _G_=caml_string_of_jsbytes("%Li"),
     _H_=caml_string_of_jsbytes("%f"),
     _I_=caml_string_of_jsbytes("%B"),
     _J_=caml_string_of_jsbytes("%{"),
     _K_=caml_string_of_jsbytes("%}"),
     _L_=caml_string_of_jsbytes("%("),
     _M_=caml_string_of_jsbytes("%)"),
     _N_=caml_string_of_jsbytes("%a"),
     _O_=caml_string_of_jsbytes("%t"),
     _P_=caml_string_of_jsbytes("%?"),
     _Q_=caml_string_of_jsbytes("%r"),
     _R_=caml_string_of_jsbytes("%_r"),
     _S_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _V_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _W_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _X_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _Y_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _Z_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _T_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _U_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     ___=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bb_=caml_string_of_jsbytes("%u"),
     _a$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _ba_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bc_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bd_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _be_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bf_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bg_=caml_string_of_jsbytes("@{"),
     _bh_=caml_string_of_jsbytes("@["),
     _bi_=caml_string_of_jsbytes("@{"),
     _bj_=caml_string_of_jsbytes("@["),
     _a__=caml_string_of_jsbytes("nan"),
     _a8_=caml_string_of_jsbytes("neg_infinity"),
     _a9_=caml_string_of_jsbytes("infinity"),
     _a7_=caml_string_of_jsbytes("."),
     _aV_=caml_string_of_jsbytes("%+nd"),
     _aW_=caml_string_of_jsbytes("% nd"),
     _aY_=caml_string_of_jsbytes("%+ni"),
     _aZ_=caml_string_of_jsbytes("% ni"),
     _a0_=caml_string_of_jsbytes("%nx"),
     _a1_=caml_string_of_jsbytes("%#nx"),
     _a2_=caml_string_of_jsbytes("%nX"),
     _a3_=caml_string_of_jsbytes("%#nX"),
     _a4_=caml_string_of_jsbytes("%no"),
     _a5_=caml_string_of_jsbytes("%#no"),
     _aU_=caml_string_of_jsbytes("%nd"),
     _aX_=caml_string_of_jsbytes("%ni"),
     _a6_=caml_string_of_jsbytes("%nu"),
     _aI_=caml_string_of_jsbytes("%+ld"),
     _aJ_=caml_string_of_jsbytes("% ld"),
     _aL_=caml_string_of_jsbytes("%+li"),
     _aM_=caml_string_of_jsbytes("% li"),
     _aN_=caml_string_of_jsbytes("%lx"),
     _aO_=caml_string_of_jsbytes("%#lx"),
     _aP_=caml_string_of_jsbytes("%lX"),
     _aQ_=caml_string_of_jsbytes("%#lX"),
     _aR_=caml_string_of_jsbytes("%lo"),
     _aS_=caml_string_of_jsbytes("%#lo"),
     _aH_=caml_string_of_jsbytes("%ld"),
     _aK_=caml_string_of_jsbytes("%li"),
     _aT_=caml_string_of_jsbytes("%lu"),
     _av_=caml_string_of_jsbytes("%+Ld"),
     _aw_=caml_string_of_jsbytes("% Ld"),
     _ay_=caml_string_of_jsbytes("%+Li"),
     _az_=caml_string_of_jsbytes("% Li"),
     _aA_=caml_string_of_jsbytes("%Lx"),
     _aB_=caml_string_of_jsbytes("%#Lx"),
     _aC_=caml_string_of_jsbytes("%LX"),
     _aD_=caml_string_of_jsbytes("%#LX"),
     _aE_=caml_string_of_jsbytes("%Lo"),
     _aF_=caml_string_of_jsbytes("%#Lo"),
     _au_=caml_string_of_jsbytes("%Ld"),
     _ax_=caml_string_of_jsbytes("%Li"),
     _aG_=caml_string_of_jsbytes("%Lu"),
     _ai_=caml_string_of_jsbytes("%+d"),
     _aj_=caml_string_of_jsbytes("% d"),
     _al_=caml_string_of_jsbytes("%+i"),
     _am_=caml_string_of_jsbytes("% i"),
     _an_=caml_string_of_jsbytes("%x"),
     _ao_=caml_string_of_jsbytes("%#x"),
     _ap_=caml_string_of_jsbytes("%X"),
     _aq_=caml_string_of_jsbytes("%#X"),
     _ar_=caml_string_of_jsbytes("%o"),
     _as_=caml_string_of_jsbytes("%#o"),
     _ah_=caml_string_of_jsbytes("%d"),
     _ak_=caml_string_of_jsbytes("%i"),
     _at_=caml_string_of_jsbytes("%u"),
     _t_=caml_string_of_jsbytes("@]"),
     _u_=caml_string_of_jsbytes("@}"),
     _v_=caml_string_of_jsbytes("@?"),
     _w_=caml_string_of_jsbytes("@\n"),
     _x_=caml_string_of_jsbytes("@."),
     _y_=caml_string_of_jsbytes("@@"),
     _z_=caml_string_of_jsbytes("@%"),
     _A_=caml_string_of_jsbytes("@"),
     _ag_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _bn_=caml_string_of_jsbytes(""),
     _bo_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bL_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bM_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Fatal error in uncaught exception handler: exception "),
        [2,0,[12,10,0]]],
       caml_string_of_jsbytes
        ("Fatal error in uncaught exception handler: exception %s\n")],
     _bK_=
      caml_string_of_jsbytes
       ("Fatal error: out of memory in uncaught exception handler"),
     _bJ_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bG_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bH_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _by_=caml_string_of_jsbytes("Raised at"),
     _bz_=caml_string_of_jsbytes("Re-raised at"),
     _bA_=caml_string_of_jsbytes("Raised by primitive operation at"),
     _bB_=caml_string_of_jsbytes("Called from"),
     _bC_=caml_string_of_jsbytes(" (inlined)"),
     _bE_=caml_string_of_jsbytes(""),
     _bD_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _bF_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _bt_=caml_string_of_jsbytes("Out of memory"),
     _bu_=caml_string_of_jsbytes("Stack overflow"),
     _bv_=caml_string_of_jsbytes("Pattern matching failed"),
     _bw_=caml_string_of_jsbytes("Assertion failed"),
     _bx_=caml_string_of_jsbytes("Undefined recursive module"),
     _bp_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bq_=caml_string_of_jsbytes(""),
     _br_=caml_string_of_jsbytes(""),
     _bs_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bm_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bk_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bl_=caml_string_of_jsbytes("_"),
     _bI_=
      [0,
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file not found)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],
     _bO_=caml_string_of_jsbytes("Fun.Finally_raised: "),
     _bN_=caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     _bP_=caml_string_of_jsbytes("Jv.Error"),
     _bW_=caml_string_of_jsbytes("append"),
     _bQ_=caml_string_of_jsbytes("capture"),
     _bR_=caml_string_of_jsbytes("once"),
     _bS_=caml_string_of_jsbytes("passive"),
     _bX_=caml_string_of_jsbytes("READ_BUFFER"),
     _bY_=caml_string_of_jsbytes("UNPACK_ROW_LENGTH"),
     _bZ_=caml_string_of_jsbytes("UNPACK_SKIP_ROWS"),
     _b0_=caml_string_of_jsbytes("UNPACK_SKIP_PIXELS"),
     _b1_=caml_string_of_jsbytes("PACK_ROW_LENGTH"),
     _b2_=caml_string_of_jsbytes("PACK_SKIP_ROWS"),
     _b3_=caml_string_of_jsbytes("PACK_SKIP_PIXELS"),
     _b4_=caml_string_of_jsbytes("COLOR"),
     _b5_=caml_string_of_jsbytes("DEPTH"),
     _b6_=caml_string_of_jsbytes("STENCIL"),
     _b7_=caml_string_of_jsbytes("RED"),
     _b8_=caml_string_of_jsbytes("RGB8"),
     _b9_=caml_string_of_jsbytes("RGBA8"),
     _b__=caml_string_of_jsbytes("RGB10_A2"),
     _b$_=caml_string_of_jsbytes("TEXTURE_BINDING_3D"),
     _ca_=caml_string_of_jsbytes("UNPACK_SKIP_IMAGES"),
     _cb_=caml_string_of_jsbytes("UNPACK_IMAGE_HEIGHT"),
     _cc_=caml_string_of_jsbytes("TEXTURE_3D"),
     _cd_=caml_string_of_jsbytes("TEXTURE_WRAP_R"),
     _ce_=caml_string_of_jsbytes("MAX_3D_TEXTURE_SIZE"),
     _cf_=caml_string_of_jsbytes("UNSIGNED_INT_2_10_10_10_REV"),
     _cg_=caml_string_of_jsbytes("MAX_ELEMENTS_VERTICES"),
     _ch_=caml_string_of_jsbytes("MAX_ELEMENTS_INDICES"),
     _ci_=caml_string_of_jsbytes("TEXTURE_MIN_LOD"),
     _cj_=caml_string_of_jsbytes("TEXTURE_MAX_LOD"),
     _ck_=caml_string_of_jsbytes("TEXTURE_BASE_LEVEL"),
     _cl_=caml_string_of_jsbytes("TEXTURE_MAX_LEVEL"),
     _cm_=caml_string_of_jsbytes("MIN"),
     _cn_=caml_string_of_jsbytes("MAX"),
     _co_=caml_string_of_jsbytes("DEPTH_COMPONENT24"),
     _cp_=caml_string_of_jsbytes("MAX_TEXTURE_LOD_BIAS"),
     _cq_=caml_string_of_jsbytes("TEXTURE_COMPARE_MODE"),
     _cr_=caml_string_of_jsbytes("TEXTURE_COMPARE_FUNC"),
     _cs_=caml_string_of_jsbytes("CURRENT_QUERY"),
     _ct_=caml_string_of_jsbytes("QUERY_RESULT"),
     _cu_=caml_string_of_jsbytes("QUERY_RESULT_AVAILABLE"),
     _cv_=caml_string_of_jsbytes("STREAM_READ"),
     _cw_=caml_string_of_jsbytes("STREAM_COPY"),
     _cx_=caml_string_of_jsbytes("STATIC_READ"),
     _cy_=caml_string_of_jsbytes("STATIC_COPY"),
     _cz_=caml_string_of_jsbytes("DYNAMIC_READ"),
     _cA_=caml_string_of_jsbytes("DYNAMIC_COPY"),
     _cB_=caml_string_of_jsbytes("MAX_DRAW_BUFFERS"),
     _cC_=caml_string_of_jsbytes("DRAW_BUFFER0"),
     _cD_=caml_string_of_jsbytes("DRAW_BUFFER1"),
     _cE_=caml_string_of_jsbytes("DRAW_BUFFER2"),
     _cF_=caml_string_of_jsbytes("DRAW_BUFFER3"),
     _cG_=caml_string_of_jsbytes("DRAW_BUFFER4"),
     _cH_=caml_string_of_jsbytes("DRAW_BUFFER5"),
     _cI_=caml_string_of_jsbytes("DRAW_BUFFER6"),
     _cJ_=caml_string_of_jsbytes("DRAW_BUFFER7"),
     _cK_=caml_string_of_jsbytes("DRAW_BUFFER8"),
     _cL_=caml_string_of_jsbytes("DRAW_BUFFER9"),
     _cM_=caml_string_of_jsbytes("DRAW_BUFFER10"),
     _cN_=caml_string_of_jsbytes("DRAW_BUFFER11"),
     _cO_=caml_string_of_jsbytes("DRAW_BUFFER12"),
     _cP_=caml_string_of_jsbytes("DRAW_BUFFER13"),
     _cQ_=caml_string_of_jsbytes("DRAW_BUFFER14"),
     _cR_=caml_string_of_jsbytes("DRAW_BUFFER15"),
     _cS_=caml_string_of_jsbytes("MAX_FRAGMENT_UNIFORM_COMPONENTS"),
     _cT_=caml_string_of_jsbytes("MAX_VERTEX_UNIFORM_COMPONENTS"),
     _cU_=caml_string_of_jsbytes("SAMPLER_3D"),
     _cV_=caml_string_of_jsbytes("SAMPLER_2D_SHADOW"),
     _cW_=caml_string_of_jsbytes("FRAGMENT_SHADER_DERIVATIVE_HINT"),
     _cX_=caml_string_of_jsbytes("PIXEL_PACK_BUFFER"),
     _cY_=caml_string_of_jsbytes("PIXEL_UNPACK_BUFFER"),
     _cZ_=caml_string_of_jsbytes("PIXEL_PACK_BUFFER_BINDING"),
     _c0_=caml_string_of_jsbytes("PIXEL_UNPACK_BUFFER_BINDING"),
     _c1_=caml_string_of_jsbytes("FLOAT_MAT2x3"),
     _c2_=caml_string_of_jsbytes("FLOAT_MAT2x4"),
     _c3_=caml_string_of_jsbytes("FLOAT_MAT3x2"),
     _c4_=caml_string_of_jsbytes("FLOAT_MAT3x4"),
     _c5_=caml_string_of_jsbytes("FLOAT_MAT4x2"),
     _c6_=caml_string_of_jsbytes("FLOAT_MAT4x3"),
     _c7_=caml_string_of_jsbytes("SRGB"),
     _c8_=caml_string_of_jsbytes("SRGB8"),
     _c9_=caml_string_of_jsbytes("SRGB8_ALPHA8"),
     _c__=caml_string_of_jsbytes("COMPARE_REF_TO_TEXTURE"),
     _c$_=caml_string_of_jsbytes("RGBA32F"),
     _da_=caml_string_of_jsbytes("RGB32F"),
     _db_=caml_string_of_jsbytes("RGBA16F"),
     _dc_=caml_string_of_jsbytes("RGB16F"),
     _dd_=caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_INTEGER"),
     _de_=caml_string_of_jsbytes("MAX_ARRAY_TEXTURE_LAYERS"),
     _df_=caml_string_of_jsbytes("MIN_PROGRAM_TEXEL_OFFSET"),
     _dg_=caml_string_of_jsbytes("MAX_PROGRAM_TEXEL_OFFSET"),
     _dh_=caml_string_of_jsbytes("MAX_VARYING_COMPONENTS"),
     _di_=caml_string_of_jsbytes("TEXTURE_2D_ARRAY"),
     _dj_=caml_string_of_jsbytes("TEXTURE_BINDING_2D_ARRAY"),
     _dk_=caml_string_of_jsbytes("R11F_G11F_B10F"),
     _dl_=caml_string_of_jsbytes("UNSIGNED_INT_10F_11F_11F_REV"),
     _dm_=caml_string_of_jsbytes("RGB9_E5"),
     _dn_=caml_string_of_jsbytes("UNSIGNED_INT_5_9_9_9_REV"),
     _do_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER_MODE"),
     _dp_=caml_string_of_jsbytes("MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"),
     _dq_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_VARYINGS"),
     _dr_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER_START"),
     _ds_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER_SIZE"),
     _dt_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"),
     _du_=caml_string_of_jsbytes("RASTERIZER_DISCARD"),
     _dv_=
      caml_string_of_jsbytes("MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"),
     _dw_=caml_string_of_jsbytes("MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"),
     _dx_=caml_string_of_jsbytes("INTERLEAVED_ATTRIBS"),
     _dy_=caml_string_of_jsbytes("SEPARATE_ATTRIBS"),
     _dz_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER"),
     _dA_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BUFFER_BINDING"),
     _dB_=caml_string_of_jsbytes("RGBA32UI"),
     _dC_=caml_string_of_jsbytes("RGB32UI"),
     _dD_=caml_string_of_jsbytes("RGBA16UI"),
     _dE_=caml_string_of_jsbytes("RGB16UI"),
     _dF_=caml_string_of_jsbytes("RGBA8UI"),
     _dG_=caml_string_of_jsbytes("RGB8UI"),
     _dH_=caml_string_of_jsbytes("RGBA32I"),
     _dI_=caml_string_of_jsbytes("RGB32I"),
     _dJ_=caml_string_of_jsbytes("RGBA16I"),
     _dK_=caml_string_of_jsbytes("RGB16I"),
     _dL_=caml_string_of_jsbytes("RGBA8I"),
     _dM_=caml_string_of_jsbytes("RGB8I"),
     _dN_=caml_string_of_jsbytes("RED_INTEGER"),
     _dO_=caml_string_of_jsbytes("RGB_INTEGER"),
     _dP_=caml_string_of_jsbytes("RGBA_INTEGER"),
     _dQ_=caml_string_of_jsbytes("SAMPLER_2D_ARRAY"),
     _dR_=caml_string_of_jsbytes("SAMPLER_2D_ARRAY_SHADOW"),
     _dS_=caml_string_of_jsbytes("SAMPLER_CUBE_SHADOW"),
     _dT_=caml_string_of_jsbytes("UNSIGNED_INT_VEC2"),
     _dU_=caml_string_of_jsbytes("UNSIGNED_INT_VEC3"),
     _dV_=caml_string_of_jsbytes("UNSIGNED_INT_VEC4"),
     _dW_=caml_string_of_jsbytes("INT_SAMPLER_2D"),
     _dX_=caml_string_of_jsbytes("INT_SAMPLER_3D"),
     _dY_=caml_string_of_jsbytes("INT_SAMPLER_CUBE"),
     _dZ_=caml_string_of_jsbytes("INT_SAMPLER_2D_ARRAY"),
     _d0_=caml_string_of_jsbytes("UNSIGNED_INT_SAMPLER_2D"),
     _d1_=caml_string_of_jsbytes("UNSIGNED_INT_SAMPLER_3D"),
     _d2_=caml_string_of_jsbytes("UNSIGNED_INT_SAMPLER_CUBE"),
     _d3_=caml_string_of_jsbytes("UNSIGNED_INT_SAMPLER_2D_ARRAY"),
     _d4_=caml_string_of_jsbytes("DEPTH_COMPONENT32F"),
     _d5_=caml_string_of_jsbytes("DEPTH32F_STENCIL8"),
     _d6_=caml_string_of_jsbytes("FLOAT_32_UNSIGNED_INT_24_8_REV"),
     _d7_=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"),
     _d8_=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"),
     _d9_=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_RED_SIZE"),
     _d__=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"),
     _d$_=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"),
     _ea_=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"),
     _eb_=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"),
     _ec_=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"),
     _ed_=caml_string_of_jsbytes("FRAMEBUFFER_DEFAULT"),
     _ee_=caml_string_of_jsbytes("UNSIGNED_INT_24_8"),
     _ef_=caml_string_of_jsbytes("DEPTH24_STENCIL8"),
     _eg_=caml_string_of_jsbytes("UNSIGNED_NORMALIZED"),
     _eh_=caml_string_of_jsbytes("DRAW_FRAMEBUFFER_BINDING"),
     _ei_=caml_string_of_jsbytes("READ_FRAMEBUFFER"),
     _ej_=caml_string_of_jsbytes("DRAW_FRAMEBUFFER"),
     _ek_=caml_string_of_jsbytes("READ_FRAMEBUFFER_BINDING"),
     _el_=caml_string_of_jsbytes("RENDERBUFFER_SAMPLES"),
     _em_=caml_string_of_jsbytes("FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"),
     _en_=caml_string_of_jsbytes("MAX_COLOR_ATTACHMENTS"),
     _eo_=caml_string_of_jsbytes("COLOR_ATTACHMENT1"),
     _ep_=caml_string_of_jsbytes("COLOR_ATTACHMENT2"),
     _eq_=caml_string_of_jsbytes("COLOR_ATTACHMENT3"),
     _er_=caml_string_of_jsbytes("COLOR_ATTACHMENT4"),
     _es_=caml_string_of_jsbytes("COLOR_ATTACHMENT5"),
     _et_=caml_string_of_jsbytes("COLOR_ATTACHMENT6"),
     _eu_=caml_string_of_jsbytes("COLOR_ATTACHMENT7"),
     _ev_=caml_string_of_jsbytes("COLOR_ATTACHMENT8"),
     _ew_=caml_string_of_jsbytes("COLOR_ATTACHMENT9"),
     _ex_=caml_string_of_jsbytes("COLOR_ATTACHMENT10"),
     _ey_=caml_string_of_jsbytes("COLOR_ATTACHMENT11"),
     _ez_=caml_string_of_jsbytes("COLOR_ATTACHMENT12"),
     _eA_=caml_string_of_jsbytes("COLOR_ATTACHMENT13"),
     _eB_=caml_string_of_jsbytes("COLOR_ATTACHMENT14"),
     _eC_=caml_string_of_jsbytes("COLOR_ATTACHMENT15"),
     _eD_=caml_string_of_jsbytes("FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"),
     _eE_=caml_string_of_jsbytes("MAX_SAMPLES"),
     _eF_=caml_string_of_jsbytes("HALF_FLOAT"),
     _eG_=caml_string_of_jsbytes("RG"),
     _eH_=caml_string_of_jsbytes("RG_INTEGER"),
     _eI_=caml_string_of_jsbytes("R8"),
     _eJ_=caml_string_of_jsbytes("RG8"),
     _eK_=caml_string_of_jsbytes("R16F"),
     _eL_=caml_string_of_jsbytes("R32F"),
     _eM_=caml_string_of_jsbytes("RG16F"),
     _eN_=caml_string_of_jsbytes("RG32F"),
     _eO_=caml_string_of_jsbytes("R8I"),
     _eP_=caml_string_of_jsbytes("R8UI"),
     _eQ_=caml_string_of_jsbytes("R16I"),
     _eR_=caml_string_of_jsbytes("R16UI"),
     _eS_=caml_string_of_jsbytes("R32I"),
     _eT_=caml_string_of_jsbytes("R32UI"),
     _eU_=caml_string_of_jsbytes("RG8I"),
     _eV_=caml_string_of_jsbytes("RG8UI"),
     _eW_=caml_string_of_jsbytes("RG16I"),
     _eX_=caml_string_of_jsbytes("RG16UI"),
     _eY_=caml_string_of_jsbytes("RG32I"),
     _eZ_=caml_string_of_jsbytes("RG32UI"),
     _e0_=caml_string_of_jsbytes("VERTEX_ARRAY_BINDING"),
     _e1_=caml_string_of_jsbytes("R8_SNORM"),
     _e2_=caml_string_of_jsbytes("RG8_SNORM"),
     _e3_=caml_string_of_jsbytes("RGB8_SNORM"),
     _e4_=caml_string_of_jsbytes("RGBA8_SNORM"),
     _e5_=caml_string_of_jsbytes("SIGNED_NORMALIZED"),
     _e6_=caml_string_of_jsbytes("COPY_READ_BUFFER"),
     _e7_=caml_string_of_jsbytes("COPY_WRITE_BUFFER"),
     _e8_=caml_string_of_jsbytes("COPY_READ_BUFFER_BINDING"),
     _e9_=caml_string_of_jsbytes("COPY_WRITE_BUFFER_BINDING"),
     _e__=caml_string_of_jsbytes("UNIFORM_BUFFER"),
     _e$_=caml_string_of_jsbytes("UNIFORM_BUFFER_BINDING"),
     _fa_=caml_string_of_jsbytes("UNIFORM_BUFFER_START"),
     _fb_=caml_string_of_jsbytes("UNIFORM_BUFFER_SIZE"),
     _fc_=caml_string_of_jsbytes("MAX_VERTEX_UNIFORM_BLOCKS"),
     _fd_=caml_string_of_jsbytes("MAX_FRAGMENT_UNIFORM_BLOCKS"),
     _fe_=caml_string_of_jsbytes("MAX_COMBINED_UNIFORM_BLOCKS"),
     _ff_=caml_string_of_jsbytes("MAX_UNIFORM_BUFFER_BINDINGS"),
     _fg_=caml_string_of_jsbytes("MAX_UNIFORM_BLOCK_SIZE"),
     _fh_=caml_string_of_jsbytes("MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"),
     _fi_=caml_string_of_jsbytes("MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"),
     _fj_=caml_string_of_jsbytes("UNIFORM_BUFFER_OFFSET_ALIGNMENT"),
     _fk_=caml_string_of_jsbytes("ACTIVE_UNIFORM_BLOCKS"),
     _fl_=caml_string_of_jsbytes("UNIFORM_TYPE"),
     _fm_=caml_string_of_jsbytes("UNIFORM_SIZE"),
     _fn_=caml_string_of_jsbytes("UNIFORM_BLOCK_INDEX"),
     _fo_=caml_string_of_jsbytes("UNIFORM_OFFSET"),
     _fp_=caml_string_of_jsbytes("UNIFORM_ARRAY_STRIDE"),
     _fq_=caml_string_of_jsbytes("UNIFORM_MATRIX_STRIDE"),
     _fr_=caml_string_of_jsbytes("UNIFORM_IS_ROW_MAJOR"),
     _fs_=caml_string_of_jsbytes("UNIFORM_BLOCK_BINDING"),
     _ft_=caml_string_of_jsbytes("UNIFORM_BLOCK_DATA_SIZE"),
     _fu_=caml_string_of_jsbytes("UNIFORM_BLOCK_ACTIVE_UNIFORMS"),
     _fv_=caml_string_of_jsbytes("UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"),
     _fw_=caml_string_of_jsbytes("UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"),
     _fx_=
      caml_string_of_jsbytes("UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"),
     _fy_=caml_string_of_jsbytes("INVALID_INDEX"),
     _fz_=caml_string_of_jsbytes("MAX_VERTEX_OUTPUT_COMPONENTS"),
     _fA_=caml_string_of_jsbytes("MAX_FRAGMENT_INPUT_COMPONENTS"),
     _fB_=caml_string_of_jsbytes("MAX_SERVER_WAIT_TIMEOUT"),
     _fC_=caml_string_of_jsbytes("OBJECT_TYPE"),
     _fD_=caml_string_of_jsbytes("SYNC_CONDITION"),
     _fE_=caml_string_of_jsbytes("SYNC_STATUS"),
     _fF_=caml_string_of_jsbytes("SYNC_FLAGS"),
     _fG_=caml_string_of_jsbytes("SYNC_FENCE"),
     _fH_=caml_string_of_jsbytes("SYNC_GPU_COMMANDS_COMPLETE"),
     _fI_=caml_string_of_jsbytes("UNSIGNALED"),
     _fJ_=caml_string_of_jsbytes("SIGNALED"),
     _fK_=caml_string_of_jsbytes("ALREADY_SIGNALED"),
     _fL_=caml_string_of_jsbytes("TIMEOUT_EXPIRED"),
     _fM_=caml_string_of_jsbytes("CONDITION_SATISFIED"),
     _fN_=caml_string_of_jsbytes("WAIT_FAILED"),
     _fO_=caml_string_of_jsbytes("SYNC_FLUSH_COMMANDS_BIT"),
     _fP_=caml_string_of_jsbytes("VERTEX_ATTRIB_ARRAY_DIVISOR"),
     _fQ_=caml_string_of_jsbytes("ANY_SAMPLES_PASSED"),
     _fR_=caml_string_of_jsbytes("ANY_SAMPLES_PASSED_CONSERVATIVE"),
     _fS_=caml_string_of_jsbytes("SAMPLER_BINDING"),
     _fT_=caml_string_of_jsbytes("RGB10_A2UI"),
     _fU_=caml_string_of_jsbytes("INT_2_10_10_10_REV"),
     _fV_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK"),
     _fW_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_PAUSED"),
     _fX_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_ACTIVE"),
     _fY_=caml_string_of_jsbytes("TRANSFORM_FEEDBACK_BINDING"),
     _fZ_=caml_string_of_jsbytes("TEXTURE_IMMUTABLE_FORMAT"),
     _f0_=caml_string_of_jsbytes("MAX_ELEMENT_INDEX"),
     _f1_=caml_string_of_jsbytes("TEXTURE_IMMUTABLE_LEVELS"),
     _f2_=caml_string_of_jsbytes("TIMEOUT_IGNORED"),
     _f3_=caml_string_of_jsbytes("MAX_CLIENT_WAIT_TIMEOUT_WEBGL"),
     _f4_=
      [0,
       [11,
        caml_string_of_jsbytes("Bigstringaf."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" invalid range: { buffer_len: "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", off: "),
            [4,
             0,
             0,
             0,
             [11,
              caml_string_of_jsbytes(", len: "),
              [4,0,0,0,[11,caml_string_of_jsbytes(" }"),0]]]]]]]]],
       caml_string_of_jsbytes
        ("Bigstringaf.%s invalid range: { buffer_len: %d, off: %d, len: %d }")],
     _f5_=[0,[12,36,[4,8,[0,2,2],0,0]],caml_string_of_jsbytes("$%02X")],
     _f6_=[0,[12,36,[4,8,[0,2,4],0,0]],caml_string_of_jsbytes("$%04X")],
     _gb_=
      [0,
       caml_string_of_jsbytes
        ("lib/interrupt_controller/interrupt_controller.ml"),
       124,
       4],
     _ga_=
      [0,
       caml_string_of_jsbytes
        ("lib/interrupt_controller/interrupt_controller.ml"),
       94,
       4],
     _f7_=[0,0],
     _f8_=[0,1],
     _f9_=[0,2],
     _f__=[0,3],
     _f$_=[0,4],
     _gd_=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),92,11],
     _ge_=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),106,9],
     _gc_=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),82,9],
     _gg_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _gf_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _gh_=[0,0,1,2,3,4,5,6,7],
     _gj_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _gi_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _gn_=caml_string_of_jsbytes("cannot write"),
     _gm_=caml_string_of_jsbytes("invalid addr"),
     _gl_=caml_string_of_jsbytes("cannot read"),
     _gk_=caml_string_of_jsbytes("invalid addr"),
     _gp_=caml_string_of_jsbytes("invalid addr"),
     _go_=caml_string_of_jsbytes("invalid addr"),
     _gr_=[0,caml_string_of_jsbytes("lib/gpu/pallete.ml"),53,14],
     _gs_=caml_string_of_jsbytes("Address out of bounds"),
     _gq_=caml_string_of_jsbytes("Address out of bounds"),
     _gu_=[0,caml_string_of_jsbytes("lib/gpu/oam_table.ml"),89,9],
     _gt_=[0,caml_string_of_jsbytes("lib/gpu/oam_table.ml"),67,9],
     _gw_=caml_string_of_jsbytes("Address out of bounds"),
     _gv_=caml_string_of_jsbytes("Address out of bounds"),
     _gx_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _gz_=caml_string_of_jsbytes("Address out of bounds"),
     _gy_=caml_string_of_jsbytes("Address out of bounds"),
     _gB_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _gA_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _gC_=
      [0,
       [11,
        caml_string_of_jsbytes("Unrecognized opcode: 0x"),
        [4,6,[0,2,2],0,0]],
       caml_string_of_jsbytes("Unrecognized opcode: 0x%02x")],
     _gD_=[0,1,1],
     _gE_=[5,1],
     _gF_=[0,3,3],
     _gG_=[0,[6,1],[4,0]],
     _gH_=[0,2,2],
     _gI_=[13,[5,1]],
     _gJ_=[0,2,2],
     _gK_=[12,[4,1]],
     _gL_=[0,1,1],
     _gM_=[14,[4,1]],
     _gN_=[0,1,1],
     _gO_=[4,1],
     _gP_=[0,2,2],
     _gQ_=[0,1,1],
     _gR_=[0,5,5],
     _gS_=[3,[5,3],[5,1]],
     _gT_=[0,2,2],
     _gU_=[0,[4,0],[6,1]],
     _gV_=[0,2,2],
     _gW_=[15,[5,1]],
     _gX_=[0,2,2],
     _gY_=[12,[4,2]],
     _gZ_=[0,1,1],
     _g0_=[14,[4,2]],
     _g1_=[0,1,1],
     _g2_=[4,2],
     _g3_=[0,2,2],
     _g4_=[0,1,1],
     _g5_=[0,1,1],
     _g6_=[5,2],
     _g7_=[0,3,3],
     _g8_=[0,[6,2],[4,0]],
     _g9_=[0,2,2],
     _g__=[13,[5,2]],
     _g$_=[0,2,2],
     _ha_=[12,[4,3]],
     _hb_=[0,1,1],
     _hc_=[14,[4,3]],
     _hd_=[0,1,1],
     _he_=[4,3],
     _hf_=[0,2,2],
     _hg_=[0,1,1],
     _hh_=[0,3,3],
     _hi_=[3,[5,3],[5,2]],
     _hj_=[0,2,2],
     _hk_=[0,[4,0],[6,2]],
     _hl_=[0,2,2],
     _hm_=[15,[5,2]],
     _hn_=[0,2,2],
     _ho_=[12,[4,4]],
     _hp_=[0,1,1],
     _hq_=[14,[4,4]],
     _hr_=[0,1,1],
     _hs_=[4,4],
     _ht_=[0,2,2],
     _hu_=[0,1,1],
     _hv_=[0,2,3],
     _hw_=[5,3],
     _hx_=[0,3,3],
     _hy_=[0,1,[4,0]],
     _hz_=[0,2,2],
     _hA_=[13,[5,3]],
     _hB_=[0,2,2],
     _hC_=[12,[4,6]],
     _hD_=[0,1,1],
     _hE_=[14,[4,6]],
     _hF_=[0,1,1],
     _hG_=[4,6],
     _hH_=[0,2,2],
     _hI_=[0,1,1],
     _hJ_=[0,2,3],
     _hK_=[3,[5,3],[5,3]],
     _hL_=[0,2,2],
     _hM_=[0,[4,0],1],
     _hN_=[0,2,2],
     _hO_=[15,[5,3]],
     _hP_=[0,2,2],
     _hQ_=[12,[4,7]],
     _hR_=[0,1,1],
     _hS_=[14,[4,7]],
     _hT_=[0,1,1],
     _hU_=[4,7],
     _hV_=[0,2,2],
     _hW_=[0,1,1],
     _hX_=[0,2,3],
     _hY_=[0,3,3],
     _hZ_=[0,2,[4,0]],
     _h0_=[0,2,2],
     _h1_=[13,3],
     _h2_=[0,2,2],
     _h3_=[12,[6,3]],
     _h4_=[0,3,3],
     _h5_=[14,[6,3]],
     _h6_=[0,3,3],
     _h7_=[6,3],
     _h8_=[0,3,3],
     _h9_=[0,1,1],
     _h__=[0,2,3],
     _h$_=[3,[5,3],3],
     _ia_=[0,2,2],
     _ib_=[0,[4,0],2],
     _ic_=[0,2,2],
     _id_=[15,3],
     _ie_=[0,2,2],
     _if_=[12,[4,0]],
     _ig_=[0,1,1],
     _ih_=[14,[4,0]],
     _ii_=[0,1,1],
     _ij_=[4,0],
     _ik_=[0,2,2],
     _il_=[0,1,1],
     _im_=[0,[4,1],[4,1]],
     _in_=[0,1,1],
     _io_=[0,[4,1],[4,2]],
     _ip_=[0,1,1],
     _iq_=[0,[4,1],[4,3]],
     _ir_=[0,1,1],
     _is_=[0,[4,1],[4,4]],
     _it_=[0,1,1],
     _iu_=[0,[4,1],[4,6]],
     _iv_=[0,1,1],
     _iw_=[0,[4,1],[4,7]],
     _ix_=[0,1,1],
     _iy_=[0,[4,1],[6,3]],
     _iz_=[0,2,2],
     _iA_=[0,[4,1],[4,0]],
     _iB_=[0,1,1],
     _iC_=[0,[4,2],[4,1]],
     _iD_=[0,1,1],
     _iE_=[0,[4,2],[4,2]],
     _iF_=[0,1,1],
     _iG_=[0,[4,2],[4,3]],
     _iH_=[0,1,1],
     _iI_=[0,[4,2],[4,4]],
     _iJ_=[0,1,1],
     _iK_=[0,[4,2],[4,6]],
     _iL_=[0,1,1],
     _iM_=[0,[4,2],[4,7]],
     _iN_=[0,1,1],
     _iO_=[0,[4,2],[6,3]],
     _iP_=[0,2,2],
     _iQ_=[0,[4,2],[4,0]],
     _iR_=[0,1,1],
     _iS_=[0,[4,3],[4,1]],
     _iT_=[0,1,1],
     _iU_=[0,[4,3],[4,2]],
     _iV_=[0,1,1],
     _iW_=[0,[4,3],[4,3]],
     _iX_=[0,1,1],
     _iY_=[0,[4,3],[4,4]],
     _iZ_=[0,1,1],
     _i0_=[0,[4,3],[4,6]],
     _i1_=[0,1,1],
     _i2_=[0,[4,3],[4,7]],
     _i3_=[0,1,1],
     _i4_=[0,[4,3],[6,3]],
     _i5_=[0,2,2],
     _i6_=[0,[4,3],[4,0]],
     _i7_=[0,1,1],
     _i8_=[0,[4,4],[4,1]],
     _i9_=[0,1,1],
     _i__=[0,[4,4],[4,2]],
     _i$_=[0,1,1],
     _ja_=[0,[4,4],[4,3]],
     _jb_=[0,1,1],
     _jc_=[0,[4,4],[4,4]],
     _jd_=[0,1,1],
     _je_=[0,[4,4],[4,6]],
     _jf_=[0,1,1],
     _jg_=[0,[4,4],[4,7]],
     _jh_=[0,1,1],
     _ji_=[0,[4,4],[6,3]],
     _jj_=[0,2,2],
     _jk_=[0,[4,4],[4,0]],
     _jl_=[0,1,1],
     _jm_=[0,[4,6],[4,1]],
     _jn_=[0,1,1],
     _jo_=[0,[4,6],[4,2]],
     _jp_=[0,1,1],
     _jq_=[0,[4,6],[4,3]],
     _jr_=[0,1,1],
     _js_=[0,[4,6],[4,4]],
     _jt_=[0,1,1],
     _ju_=[0,[4,6],[4,6]],
     _jv_=[0,1,1],
     _jw_=[0,[4,6],[4,7]],
     _jx_=[0,1,1],
     _jy_=[0,[4,6],[6,3]],
     _jz_=[0,2,2],
     _jA_=[0,[4,6],[4,0]],
     _jB_=[0,1,1],
     _jC_=[0,[4,7],[4,1]],
     _jD_=[0,1,1],
     _jE_=[0,[4,7],[4,2]],
     _jF_=[0,1,1],
     _jG_=[0,[4,7],[4,3]],
     _jH_=[0,1,1],
     _jI_=[0,[4,7],[4,4]],
     _jJ_=[0,1,1],
     _jK_=[0,[4,7],[4,6]],
     _jL_=[0,1,1],
     _jM_=[0,[4,7],[4,7]],
     _jN_=[0,1,1],
     _jO_=[0,[4,7],[6,3]],
     _jP_=[0,2,2],
     _jQ_=[0,[4,7],[4,0]],
     _jR_=[0,1,1],
     _jS_=[0,[6,3],[4,1]],
     _jT_=[0,2,2],
     _jU_=[0,[6,3],[4,2]],
     _jV_=[0,2,2],
     _jW_=[0,[6,3],[4,3]],
     _jX_=[0,2,2],
     _jY_=[0,[6,3],[4,4]],
     _jZ_=[0,2,2],
     _j0_=[0,[6,3],[4,6]],
     _j1_=[0,2,2],
     _j2_=[0,[6,3],[4,7]],
     _j3_=[0,2,2],
     _j4_=[0,1,1],
     _j5_=[0,[6,3],[4,0]],
     _j6_=[0,2,2],
     _j7_=[0,[4,0],[4,1]],
     _j8_=[0,1,1],
     _j9_=[0,[4,0],[4,2]],
     _j__=[0,1,1],
     _j$_=[0,[4,0],[4,3]],
     _ka_=[0,1,1],
     _kb_=[0,[4,0],[4,4]],
     _kc_=[0,1,1],
     _kd_=[0,[4,0],[4,6]],
     _ke_=[0,1,1],
     _kf_=[0,[4,0],[4,7]],
     _kg_=[0,1,1],
     _kh_=[0,[4,0],[6,3]],
     _ki_=[0,2,2],
     _kj_=[0,[4,0],[4,0]],
     _kk_=[0,1,1],
     _kl_=[2,[4,0],[4,1]],
     _km_=[0,1,1],
     _kn_=[2,[4,0],[4,2]],
     _ko_=[0,1,1],
     _kp_=[2,[4,0],[4,3]],
     _kq_=[0,1,1],
     _kr_=[2,[4,0],[4,4]],
     _ks_=[0,1,1],
     _kt_=[2,[4,0],[4,6]],
     _ku_=[0,1,1],
     _kv_=[2,[4,0],[4,7]],
     _kw_=[0,1,1],
     _kx_=[2,[4,0],[6,3]],
     _ky_=[0,2,2],
     _kz_=[2,[4,0],[4,0]],
     _kA_=[0,1,1],
     _kB_=[5,[4,0],[4,1]],
     _kC_=[0,1,1],
     _kD_=[5,[4,0],[4,2]],
     _kE_=[0,1,1],
     _kF_=[5,[4,0],[4,3]],
     _kG_=[0,1,1],
     _kH_=[5,[4,0],[4,4]],
     _kI_=[0,1,1],
     _kJ_=[5,[4,0],[4,6]],
     _kK_=[0,1,1],
     _kL_=[5,[4,0],[4,7]],
     _kM_=[0,1,1],
     _kN_=[5,[4,0],[6,3]],
     _kO_=[0,2,2],
     _kP_=[5,[4,0],[4,0]],
     _kQ_=[0,1,1],
     _kR_=[6,[4,0],[4,1]],
     _kS_=[0,1,1],
     _kT_=[6,[4,0],[4,2]],
     _kU_=[0,1,1],
     _kV_=[6,[4,0],[4,3]],
     _kW_=[0,1,1],
     _kX_=[6,[4,0],[4,4]],
     _kY_=[0,1,1],
     _kZ_=[6,[4,0],[4,6]],
     _k0_=[0,1,1],
     _k1_=[6,[4,0],[4,7]],
     _k2_=[0,1,1],
     _k3_=[6,[4,0],[6,3]],
     _k4_=[0,2,2],
     _k5_=[6,[4,0],[4,0]],
     _k6_=[0,1,1],
     _k7_=[7,[4,0],[4,1]],
     _k8_=[0,1,1],
     _k9_=[7,[4,0],[4,2]],
     _k__=[0,1,1],
     _k$_=[7,[4,0],[4,3]],
     _la_=[0,1,1],
     _lb_=[7,[4,0],[4,4]],
     _lc_=[0,1,1],
     _ld_=[7,[4,0],[4,6]],
     _le_=[0,1,1],
     _lf_=[7,[4,0],[4,7]],
     _lg_=[0,1,1],
     _lh_=[7,[4,0],[6,3]],
     _li_=[0,2,2],
     _lj_=[7,[4,0],[4,0]],
     _lk_=[0,1,1],
     _ll_=[8,[4,0],[4,1]],
     _lm_=[0,1,1],
     _ln_=[8,[4,0],[4,2]],
     _lo_=[0,1,1],
     _lp_=[8,[4,0],[4,3]],
     _lq_=[0,1,1],
     _lr_=[8,[4,0],[4,4]],
     _ls_=[0,1,1],
     _lt_=[8,[4,0],[4,6]],
     _lu_=[0,1,1],
     _lv_=[8,[4,0],[4,7]],
     _lw_=[0,1,1],
     _lx_=[8,[4,0],[6,3]],
     _ly_=[0,2,2],
     _lz_=[8,[4,0],[4,0]],
     _lA_=[0,1,1],
     _lB_=[10,[4,0],[4,1]],
     _lC_=[0,1,1],
     _lD_=[10,[4,0],[4,2]],
     _lE_=[0,1,1],
     _lF_=[10,[4,0],[4,3]],
     _lG_=[0,1,1],
     _lH_=[10,[4,0],[4,4]],
     _lI_=[0,1,1],
     _lJ_=[10,[4,0],[4,6]],
     _lK_=[0,1,1],
     _lL_=[10,[4,0],[4,7]],
     _lM_=[0,1,1],
     _lN_=[10,[4,0],[6,3]],
     _lO_=[0,2,2],
     _lP_=[10,[4,0],[4,0]],
     _lQ_=[0,1,1],
     _lR_=[9,[4,0],[4,1]],
     _lS_=[0,1,1],
     _lT_=[9,[4,0],[4,2]],
     _lU_=[0,1,1],
     _lV_=[9,[4,0],[4,3]],
     _lW_=[0,1,1],
     _lX_=[9,[4,0],[4,4]],
     _lY_=[0,1,1],
     _lZ_=[9,[4,0],[4,6]],
     _l0_=[0,1,1],
     _l1_=[9,[4,0],[4,7]],
     _l2_=[0,1,1],
     _l3_=[9,[4,0],[6,3]],
     _l4_=[0,2,2],
     _l5_=[9,[4,0],[4,0]],
     _l6_=[0,1,1],
     _l7_=[11,[4,0],[4,1]],
     _l8_=[0,1,1],
     _l9_=[11,[4,0],[4,2]],
     _l__=[0,1,1],
     _l$_=[11,[4,0],[4,3]],
     _ma_=[0,1,1],
     _mb_=[11,[4,0],[4,4]],
     _mc_=[0,1,1],
     _md_=[11,[4,0],[4,6]],
     _me_=[0,1,1],
     _mf_=[11,[4,0],[4,7]],
     _mg_=[0,1,1],
     _mh_=[11,[4,0],[6,3]],
     _mi_=[0,2,2],
     _mj_=[11,[4,0],[4,0]],
     _mk_=[0,1,1],
     _ml_=[33,1],
     _mm_=[0,2,5],
     _mn_=[28,1],
     _mo_=[0,3,3],
     _mp_=[0,3,4],
     _mq_=[0,4,4],
     _mr_=[0,3,6],
     _ms_=[27,1],
     _mt_=[0,4,4],
     _mu_=[4,0],
     _mv_=[0,2,2],
     _mw_=[0,4,4],
     _mx_=[33,2],
     _my_=[0,2,5],
     _mz_=[33,0],
     _mA_=[0,4,4],
     _mB_=[0,3,4],
     _mC_=
      [0,
       [11,
        caml_string_of_jsbytes("Unrecognized opcode after 0xCB: 0x"),
        [4,6,[0,2,2],0,0]],
       caml_string_of_jsbytes("Unrecognized opcode after 0xCB: 0x%02x")],
     _mD_=[17,[4,1]],
     _mE_=[0,2,2],
     _mF_=[17,[4,2]],
     _mG_=[0,2,2],
     _mH_=[17,[4,3]],
     _mI_=[0,2,2],
     _mJ_=[17,[4,4]],
     _mK_=[0,2,2],
     _mL_=[17,[4,6]],
     _mM_=[0,2,2],
     _mN_=[17,[4,7]],
     _mO_=[0,2,2],
     _mP_=[17,[6,3]],
     _mQ_=[0,4,4],
     _mR_=[17,[4,0]],
     _mS_=[0,2,2],
     _mT_=[19,[4,1]],
     _mU_=[0,2,2],
     _mV_=[19,[4,2]],
     _mW_=[0,2,2],
     _mX_=[19,[4,3]],
     _mY_=[0,2,2],
     _mZ_=[19,[4,4]],
     _m0_=[0,2,2],
     _m1_=[19,[4,6]],
     _m2_=[0,2,2],
     _m3_=[19,[4,7]],
     _m4_=[0,2,2],
     _m5_=[19,[6,3]],
     _m6_=[0,4,4],
     _m7_=[19,[4,0]],
     _m8_=[0,2,2],
     _m9_=[18,[4,1]],
     _m__=[0,2,2],
     _m$_=[18,[4,2]],
     _na_=[0,2,2],
     _nb_=[18,[4,3]],
     _nc_=[0,2,2],
     _nd_=[18,[4,4]],
     _ne_=[0,2,2],
     _nf_=[18,[4,6]],
     _ng_=[0,2,2],
     _nh_=[18,[4,7]],
     _ni_=[0,2,2],
     _nj_=[18,[6,3]],
     _nk_=[0,4,4],
     _nl_=[18,[4,0]],
     _nm_=[0,2,2],
     _nn_=[20,[4,1]],
     _no_=[0,2,2],
     _np_=[20,[4,2]],
     _nq_=[0,2,2],
     _nr_=[20,[4,3]],
     _ns_=[0,2,2],
     _nt_=[20,[4,4]],
     _nu_=[0,2,2],
     _nv_=[20,[4,6]],
     _nw_=[0,2,2],
     _nx_=[20,[4,7]],
     _ny_=[0,2,2],
     _nz_=[20,[6,3]],
     _nA_=[0,4,4],
     _nB_=[20,[4,0]],
     _nC_=[0,2,2],
     _nD_=[21,[4,1]],
     _nE_=[0,2,2],
     _nF_=[21,[4,2]],
     _nG_=[0,2,2],
     _nH_=[21,[4,3]],
     _nI_=[0,2,2],
     _nJ_=[21,[4,4]],
     _nK_=[0,2,2],
     _nL_=[21,[4,6]],
     _nM_=[0,2,2],
     _nN_=[21,[4,7]],
     _nO_=[0,2,2],
     _nP_=[21,[6,3]],
     _nQ_=[0,4,4],
     _nR_=[21,[4,0]],
     _nS_=[0,2,2],
     _nT_=[22,[4,1]],
     _nU_=[0,2,2],
     _nV_=[22,[4,2]],
     _nW_=[0,2,2],
     _nX_=[22,[4,3]],
     _nY_=[0,2,2],
     _nZ_=[22,[4,4]],
     _n0_=[0,2,2],
     _n1_=[22,[4,6]],
     _n2_=[0,2,2],
     _n3_=[22,[4,7]],
     _n4_=[0,2,2],
     _n5_=[22,[6,3]],
     _n6_=[0,4,4],
     _n7_=[22,[4,0]],
     _n8_=[0,2,2],
     _n9_=[16,[4,1]],
     _n__=[0,2,2],
     _n$_=[16,[4,2]],
     _oa_=[0,2,2],
     _ob_=[16,[4,3]],
     _oc_=[0,2,2],
     _od_=[16,[4,4]],
     _oe_=[0,2,2],
     _of_=[16,[4,6]],
     _og_=[0,2,2],
     _oh_=[16,[4,7]],
     _oi_=[0,2,2],
     _oj_=[16,[6,3]],
     _ok_=[0,4,4],
     _ol_=[16,[4,0]],
     _om_=[0,2,2],
     _on_=[23,[4,1]],
     _oo_=[0,2,2],
     _op_=[23,[4,2]],
     _oq_=[0,2,2],
     _or_=[23,[4,3]],
     _os_=[0,2,2],
     _ot_=[23,[4,4]],
     _ou_=[0,2,2],
     _ov_=[23,[4,6]],
     _ow_=[0,2,2],
     _ox_=[23,[4,7]],
     _oy_=[0,2,2],
     _oz_=[23,[6,3]],
     _oA_=[0,4,4],
     _oB_=[23,[4,0]],
     _oC_=[0,2,2],
     _oD_=[24,0,[4,1]],
     _oE_=[0,2,2],
     _oF_=[24,0,[4,2]],
     _oG_=[0,2,2],
     _oH_=[24,0,[4,3]],
     _oI_=[0,2,2],
     _oJ_=[24,0,[4,4]],
     _oK_=[0,2,2],
     _oL_=[24,0,[4,6]],
     _oM_=[0,2,2],
     _oN_=[24,0,[4,7]],
     _oO_=[0,2,2],
     _oP_=[24,0,[6,3]],
     _oQ_=[0,3,3],
     _oR_=[24,0,[4,0]],
     _oS_=[0,2,2],
     _oT_=[24,1,[4,1]],
     _oU_=[0,2,2],
     _oV_=[24,1,[4,2]],
     _oW_=[0,2,2],
     _oX_=[24,1,[4,3]],
     _oY_=[0,2,2],
     _oZ_=[24,1,[4,4]],
     _o0_=[0,2,2],
     _o1_=[24,1,[4,6]],
     _o2_=[0,2,2],
     _o3_=[24,1,[4,7]],
     _o4_=[0,2,2],
     _o5_=[24,1,[6,3]],
     _o6_=[0,3,3],
     _o7_=[24,1,[4,0]],
     _o8_=[0,2,2],
     _o9_=[24,2,[4,1]],
     _o__=[0,2,2],
     _o$_=[24,2,[4,2]],
     _pa_=[0,2,2],
     _pb_=[24,2,[4,3]],
     _pc_=[0,2,2],
     _pd_=[24,2,[4,4]],
     _pe_=[0,2,2],
     _pf_=[24,2,[4,6]],
     _pg_=[0,2,2],
     _ph_=[24,2,[4,7]],
     _pi_=[0,2,2],
     _pj_=[24,2,[6,3]],
     _pk_=[0,3,3],
     _pl_=[24,2,[4,0]],
     _pm_=[0,2,2],
     _pn_=[24,3,[4,1]],
     _po_=[0,2,2],
     _pp_=[24,3,[4,2]],
     _pq_=[0,2,2],
     _pr_=[24,3,[4,3]],
     _ps_=[0,2,2],
     _pt_=[24,3,[4,4]],
     _pu_=[0,2,2],
     _pv_=[24,3,[4,6]],
     _pw_=[0,2,2],
     _px_=[24,3,[4,7]],
     _py_=[0,2,2],
     _pz_=[24,3,[6,3]],
     _pA_=[0,3,3],
     _pB_=[24,3,[4,0]],
     _pC_=[0,2,2],
     _pD_=[24,4,[4,1]],
     _pE_=[0,2,2],
     _pF_=[24,4,[4,2]],
     _pG_=[0,2,2],
     _pH_=[24,4,[4,3]],
     _pI_=[0,2,2],
     _pJ_=[24,4,[4,4]],
     _pK_=[0,2,2],
     _pL_=[24,4,[4,6]],
     _pM_=[0,2,2],
     _pN_=[24,4,[4,7]],
     _pO_=[0,2,2],
     _pP_=[24,4,[6,3]],
     _pQ_=[0,3,3],
     _pR_=[24,4,[4,0]],
     _pS_=[0,2,2],
     _pT_=[24,5,[4,1]],
     _pU_=[0,2,2],
     _pV_=[24,5,[4,2]],
     _pW_=[0,2,2],
     _pX_=[24,5,[4,3]],
     _pY_=[0,2,2],
     _pZ_=[24,5,[4,4]],
     _p0_=[0,2,2],
     _p1_=[24,5,[4,6]],
     _p2_=[0,2,2],
     _p3_=[24,5,[4,7]],
     _p4_=[0,2,2],
     _p5_=[24,5,[6,3]],
     _p6_=[0,3,3],
     _p7_=[24,5,[4,0]],
     _p8_=[0,2,2],
     _p9_=[24,6,[4,1]],
     _p__=[0,2,2],
     _p$_=[24,6,[4,2]],
     _qa_=[0,2,2],
     _qb_=[24,6,[4,3]],
     _qc_=[0,2,2],
     _qd_=[24,6,[4,4]],
     _qe_=[0,2,2],
     _qf_=[24,6,[4,6]],
     _qg_=[0,2,2],
     _qh_=[24,6,[4,7]],
     _qi_=[0,2,2],
     _qj_=[24,6,[6,3]],
     _qk_=[0,3,3],
     _ql_=[24,6,[4,0]],
     _qm_=[0,2,2],
     _qn_=[24,7,[4,1]],
     _qo_=[0,2,2],
     _qp_=[24,7,[4,2]],
     _qq_=[0,2,2],
     _qr_=[24,7,[4,3]],
     _qs_=[0,2,2],
     _qt_=[24,7,[4,4]],
     _qu_=[0,2,2],
     _qv_=[24,7,[4,6]],
     _qw_=[0,2,2],
     _qx_=[24,7,[4,7]],
     _qy_=[0,2,2],
     _qz_=[24,7,[6,3]],
     _qA_=[0,3,3],
     _qB_=[24,7,[4,0]],
     _qC_=[0,2,2],
     _qD_=[26,0,[4,1]],
     _qE_=[0,2,2],
     _qF_=[26,0,[4,2]],
     _qG_=[0,2,2],
     _qH_=[26,0,[4,3]],
     _qI_=[0,2,2],
     _qJ_=[26,0,[4,4]],
     _qK_=[0,2,2],
     _qL_=[26,0,[4,6]],
     _qM_=[0,2,2],
     _qN_=[26,0,[4,7]],
     _qO_=[0,2,2],
     _qP_=[26,0,[6,3]],
     _qQ_=[0,4,4],
     _qR_=[26,0,[4,0]],
     _qS_=[0,2,2],
     _qT_=[26,1,[4,1]],
     _qU_=[0,2,2],
     _qV_=[26,1,[4,2]],
     _qW_=[0,2,2],
     _qX_=[26,1,[4,3]],
     _qY_=[0,2,2],
     _qZ_=[26,1,[4,4]],
     _q0_=[0,2,2],
     _q1_=[26,1,[4,6]],
     _q2_=[0,2,2],
     _q3_=[26,1,[4,7]],
     _q4_=[0,2,2],
     _q5_=[26,1,[6,3]],
     _q6_=[0,4,4],
     _q7_=[26,1,[4,0]],
     _q8_=[0,2,2],
     _q9_=[26,2,[4,1]],
     _q__=[0,2,2],
     _q$_=[26,2,[4,2]],
     _ra_=[0,2,2],
     _rb_=[26,2,[4,3]],
     _rc_=[0,2,2],
     _rd_=[26,2,[4,4]],
     _re_=[0,2,2],
     _rf_=[26,2,[4,6]],
     _rg_=[0,2,2],
     _rh_=[26,2,[4,7]],
     _ri_=[0,2,2],
     _rj_=[26,2,[6,3]],
     _rk_=[0,4,4],
     _rl_=[26,2,[4,0]],
     _rm_=[0,2,2],
     _rn_=[26,3,[4,1]],
     _ro_=[0,2,2],
     _rp_=[26,3,[4,2]],
     _rq_=[0,2,2],
     _rr_=[26,3,[4,3]],
     _rs_=[0,2,2],
     _rt_=[26,3,[4,4]],
     _ru_=[0,2,2],
     _rv_=[26,3,[4,6]],
     _rw_=[0,2,2],
     _rx_=[26,3,[4,7]],
     _ry_=[0,2,2],
     _rz_=[26,3,[6,3]],
     _rA_=[0,4,4],
     _rB_=[26,3,[4,0]],
     _rC_=[0,2,2],
     _rD_=[26,4,[4,1]],
     _rE_=[0,2,2],
     _rF_=[26,4,[4,2]],
     _rG_=[0,2,2],
     _rH_=[26,4,[4,3]],
     _rI_=[0,2,2],
     _rJ_=[26,4,[4,4]],
     _rK_=[0,2,2],
     _rL_=[26,4,[4,6]],
     _rM_=[0,2,2],
     _rN_=[26,4,[4,7]],
     _rO_=[0,2,2],
     _rP_=[26,4,[6,3]],
     _rQ_=[0,4,4],
     _rR_=[26,4,[4,0]],
     _rS_=[0,2,2],
     _rT_=[26,5,[4,1]],
     _rU_=[0,2,2],
     _rV_=[26,5,[4,2]],
     _rW_=[0,2,2],
     _rX_=[26,5,[4,3]],
     _rY_=[0,2,2],
     _rZ_=[26,5,[4,4]],
     _r0_=[0,2,2],
     _r1_=[26,5,[4,6]],
     _r2_=[0,2,2],
     _r3_=[26,5,[4,7]],
     _r4_=[0,2,2],
     _r5_=[26,5,[6,3]],
     _r6_=[0,4,4],
     _r7_=[26,5,[4,0]],
     _r8_=[0,2,2],
     _r9_=[26,6,[4,1]],
     _r__=[0,2,2],
     _r$_=[26,6,[4,2]],
     _sa_=[0,2,2],
     _sb_=[26,6,[4,3]],
     _sc_=[0,2,2],
     _sd_=[26,6,[4,4]],
     _se_=[0,2,2],
     _sf_=[26,6,[4,6]],
     _sg_=[0,2,2],
     _sh_=[26,6,[4,7]],
     _si_=[0,2,2],
     _sj_=[26,6,[6,3]],
     _sk_=[0,4,4],
     _sl_=[26,6,[4,0]],
     _sm_=[0,2,2],
     _sn_=[26,7,[4,1]],
     _so_=[0,2,2],
     _sp_=[26,7,[4,2]],
     _sq_=[0,2,2],
     _sr_=[26,7,[4,3]],
     _ss_=[0,2,2],
     _st_=[26,7,[4,4]],
     _su_=[0,2,2],
     _sv_=[26,7,[4,6]],
     _sw_=[0,2,2],
     _sx_=[26,7,[4,7]],
     _sy_=[0,2,2],
     _sz_=[26,7,[6,3]],
     _sA_=[0,4,4],
     _sB_=[26,7,[4,0]],
     _sC_=[0,2,2],
     _sD_=[25,0,[4,1]],
     _sE_=[0,2,2],
     _sF_=[25,0,[4,2]],
     _sG_=[0,2,2],
     _sH_=[25,0,[4,3]],
     _sI_=[0,2,2],
     _sJ_=[25,0,[4,4]],
     _sK_=[0,2,2],
     _sL_=[25,0,[4,6]],
     _sM_=[0,2,2],
     _sN_=[25,0,[4,7]],
     _sO_=[0,2,2],
     _sP_=[25,0,[6,3]],
     _sQ_=[0,4,4],
     _sR_=[25,0,[4,0]],
     _sS_=[0,2,2],
     _sT_=[25,1,[4,1]],
     _sU_=[0,2,2],
     _sV_=[25,1,[4,2]],
     _sW_=[0,2,2],
     _sX_=[25,1,[4,3]],
     _sY_=[0,2,2],
     _sZ_=[25,1,[4,4]],
     _s0_=[0,2,2],
     _s1_=[25,1,[4,6]],
     _s2_=[0,2,2],
     _s3_=[25,1,[4,7]],
     _s4_=[0,2,2],
     _s5_=[25,1,[6,3]],
     _s6_=[0,4,4],
     _s7_=[25,1,[4,0]],
     _s8_=[0,2,2],
     _s9_=[25,2,[4,1]],
     _s__=[0,2,2],
     _s$_=[25,2,[4,2]],
     _ta_=[0,2,2],
     _tb_=[25,2,[4,3]],
     _tc_=[0,2,2],
     _td_=[25,2,[4,4]],
     _te_=[0,2,2],
     _tf_=[25,2,[4,6]],
     _tg_=[0,2,2],
     _th_=[25,2,[4,7]],
     _ti_=[0,2,2],
     _tj_=[25,2,[6,3]],
     _tk_=[0,4,4],
     _tl_=[25,2,[4,0]],
     _tm_=[0,2,2],
     _tn_=[25,3,[4,1]],
     _to_=[0,2,2],
     _tp_=[25,3,[4,2]],
     _tq_=[0,2,2],
     _tr_=[25,3,[4,3]],
     _ts_=[0,2,2],
     _tt_=[25,3,[4,4]],
     _tu_=[0,2,2],
     _tv_=[25,3,[4,6]],
     _tw_=[0,2,2],
     _tx_=[25,3,[4,7]],
     _ty_=[0,2,2],
     _tz_=[25,3,[6,3]],
     _tA_=[0,4,4],
     _tB_=[25,3,[4,0]],
     _tC_=[0,2,2],
     _tD_=[25,4,[4,1]],
     _tE_=[0,2,2],
     _tF_=[25,4,[4,2]],
     _tG_=[0,2,2],
     _tH_=[25,4,[4,3]],
     _tI_=[0,2,2],
     _tJ_=[25,4,[4,4]],
     _tK_=[0,2,2],
     _tL_=[25,4,[4,6]],
     _tM_=[0,2,2],
     _tN_=[25,4,[4,7]],
     _tO_=[0,2,2],
     _tP_=[25,4,[6,3]],
     _tQ_=[0,4,4],
     _tR_=[25,4,[4,0]],
     _tS_=[0,2,2],
     _tT_=[25,5,[4,1]],
     _tU_=[0,2,2],
     _tV_=[25,5,[4,2]],
     _tW_=[0,2,2],
     _tX_=[25,5,[4,3]],
     _tY_=[0,2,2],
     _tZ_=[25,5,[4,4]],
     _t0_=[0,2,2],
     _t1_=[25,5,[4,6]],
     _t2_=[0,2,2],
     _t3_=[25,5,[4,7]],
     _t4_=[0,2,2],
     _t5_=[25,5,[6,3]],
     _t6_=[0,4,4],
     _t7_=[25,5,[4,0]],
     _t8_=[0,2,2],
     _t9_=[25,6,[4,1]],
     _t__=[0,2,2],
     _t$_=[25,6,[4,2]],
     _ua_=[0,2,2],
     _ub_=[25,6,[4,3]],
     _uc_=[0,2,2],
     _ud_=[25,6,[4,4]],
     _ue_=[0,2,2],
     _uf_=[25,6,[4,6]],
     _ug_=[0,2,2],
     _uh_=[25,6,[4,7]],
     _ui_=[0,2,2],
     _uj_=[25,6,[6,3]],
     _uk_=[0,4,4],
     _ul_=[25,6,[4,0]],
     _um_=[0,2,2],
     _un_=[25,7,[4,1]],
     _uo_=[0,2,2],
     _up_=[25,7,[4,2]],
     _uq_=[0,2,2],
     _ur_=[25,7,[4,3]],
     _us_=[0,2,2],
     _ut_=[25,7,[4,4]],
     _uu_=[0,2,2],
     _uv_=[25,7,[4,6]],
     _uw_=[0,2,2],
     _ux_=[25,7,[4,7]],
     _uy_=[0,2,2],
     _uz_=[25,7,[6,3]],
     _uA_=[0,4,4],
     _uB_=[25,7,[4,0]],
     _uC_=[0,2,2],
     _uD_=[0,3,6],
     _uE_=[0,6,6],
     _uF_=[4,0],
     _uG_=[0,2,2],
     _uH_=[0,4,4],
     _uI_=[33,3],
     _uJ_=[0,2,5],
     _uK_=[28,2],
     _uL_=[0,3,3],
     _uM_=[0,3,4],
     _uN_=[0,1,1],
     _uO_=[0,3,6],
     _uP_=[27,2],
     _uQ_=[0,4,4],
     _uR_=[4,0],
     _uS_=[0,2,2],
     _uT_=[0,4,4],
     _uU_=[33,4],
     _uV_=[0,2,5],
     _uW_=[0,4,4],
     _uX_=[0,3,4],
     _uY_=[0,1,1],
     _uZ_=[0,3,6],
     _u0_=[0,1,1],
     _u1_=[4,0],
     _u2_=[0,2,2],
     _u3_=[0,4,4],
     _u4_=[4,0],
     _u5_=[0,3,3],
     _u6_=[28,3],
     _u7_=[0,3,3],
     _u8_=[0,0,[4,0]],
     _u9_=[0,2,2],
     _u__=[0,1,1],
     _u$_=[0,1,1],
     _va_=[27,3],
     _vb_=[0,4,4],
     _vc_=[4,0],
     _vd_=[0,2,2],
     _ve_=[0,4,4],
     _vf_=[0,4,4],
     _vg_=[29,0,[5,3]],
     _vh_=[0,1,1],
     _vi_=[4,0],
     _vj_=[0,4,4],
     _vk_=[0,1,1],
     _vl_=[0,1,1],
     _vm_=[0,1,1],
     _vn_=[4,0],
     _vo_=[0,2,2],
     _vp_=[0,4,4],
     _vq_=[4,0],
     _vr_=[0,3,3],
     _vs_=[28,0],
     _vt_=[0,3,3],
     _vu_=[0,[4,0],0],
     _vv_=[0,2,2],
     _vw_=[0,1,1],
     _vx_=[0,1,1],
     _vy_=[27,0],
     _vz_=[0,4,4],
     _vA_=[4,0],
     _vB_=[0,2,2],
     _vC_=[0,4,4],
     _vD_=[5,3],
     _vE_=[0,3,3],
     _vF_=[1,3,[5,3]],
     _vG_=[0,2,2],
     _vH_=[4,0],
     _vI_=[0,4,4],
     _vJ_=[0,1,1],
     _vK_=[0,1,1],
     _vL_=[0,1,1],
     _vM_=[4,0],
     _vN_=[0,2,2],
     _vO_=[0,4,4],
     _vP_=
      [0,
       [11,caml_string_of_jsbytes("Unknown rom type : 0x"),[4,6,0,0,0]],
       caml_string_of_jsbytes("Unknown rom type : 0x%x")],
     _vQ_=
      [0,caml_string_of_jsbytes("lib/cartridge/cartridge_header.ml"),33,11],
     _vR_=
      [0,caml_string_of_jsbytes("lib/cartridge/cartridge_header.ml"),43,11],
     _vX_=[0,caml_string_of_jsbytes("lib/cartridge/cartridge_mbc1.ml"),114,9],
     _vW_=
      [0,
       [11,caml_string_of_jsbytes("Unexpected rom size: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Unexpected rom size: %d")],
     _vV_=[0,caml_string_of_jsbytes("lib/cartridge/cartridge_mbc1.ml"),84,9],
     _vU_=
      [0,
       [11,caml_string_of_jsbytes("Unexpected ram size: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Unexpected ram size: %d")],
     _vT_=[0,caml_string_of_jsbytes("lib/cartridge/cartridge_mbc1.ml"),51,9],
     _vS_=[0,caml_string_of_jsbytes("lib/cartridge/cartridge_mbc1.ml"),39,13],
     _vZ_=caml_string_of_jsbytes("Address out of bounds"),
     _v1_=
      [0,caml_string_of_jsbytes("lib/cartridge/detect_cartridge.ml"),11,31],
     _v4_=
      [0,
       [11,caml_string_of_jsbytes("Invalid arugment"),0],
       caml_string_of_jsbytes("Invalid arugment")],
     _v2_=[0,0],
     _v3_=[0,0],
     _v6_=[0,1],
     _v5_=[0,0],
     _v7_=[0,1],
     _v8_=[0,1],
     _v9_=[0,0],
     _v__=[0,0],
     _v$_=[0,0],
     _wa_=[0,0],
     _wb_=[0,1],
     _wc_=[0,caml_string_of_jsbytes("lib/cpu/cpu.ml"),283,16],
     _wd_=[0,0],
     _we_=[0,0],
     _wf_=[0,0],
     _wg_=[0,0],
     _wh_=[0,0],
     _wi_=[0,0],
     _wj_=[0,0],
     _wk_=[0,0],
     _wl_=[0,0],
     _wm_=[0,0],
     _wn_=[0,0],
     _wo_=[0,0],
     _wp_=[0,0],
     _wq_=[0,0],
     _wr_=[0,0],
     _ws_=[0,0],
     _wt_=[0,0],
     _wu_=[0,1],
     _wv_=[0,1],
     _ww_=[0,0],
     _wx_=[0,1],
     _wy_=[0,0],
     _wz_=[0,0],
     _wA_=[0,0],
     _wB_=[0,0],
     _wC_=[0,0],
     _wD_=[0,0],
     _wE_=[0,0],
     _wF_=[0,1],
     _wG_=[0,0],
     _wH_=[0,1],
     _wI_=[0,0],
     _wJ_=[0,0],
     _wK_=[0,0],
     _wL_=[0,0],
     _wM_=[0,0],
     _wN_=[0,0],
     _wO_=[0,0],
     _wP_=[0,0],
     _wQ_=[0,0],
     _wR_=[0,0],
     _wS_=[0,0],
     _wT_=[0,0],
     _wU_=[0,0],
     _wV_=[0,0],
     _wW_=[0,0],
     _wX_=[0,0],
     _wY_=[0,0],
     _wZ_=[0,0],
     _w0_=[0,1],
     _w1_=[0,1],
     _w2_=[0,0],
     _w3_=[0,1],
     _w4_=[0,1],
     _w5_=[0,[0,0,432],[0,[0,1,19],[0,[0,2,216],[0,[0,3,333],0]]]],
     _w6_=
      caml_list_of_js_array
       ([[0,65280,207],
         [0,65281,0],
         [0,65282,126],
         [0,65284,171],
         [0,65285,0],
         [0,65286,0],
         [0,65287,248],
         [0,65295,225],
         [0,65344,145],
         [0,65346,0],
         [0,65347,0],
         [0,65348,0],
         [0,65349,0],
         [0,65350,255],
         [0,65351,252],
         [0,65354,0],
         [0,65355,0],
         [0,65535,0]]),
     _xw_=caml_string_of_jsbytes("false"),
     _xt_=[0,[8,[0,0,0],0,[0,1],0],caml_string_of_jsbytes("%.1f")],
     _xu_=caml_string_of_jsbytes("fps"),
     _xl_=caml_string_of_jsbytes("right"),
     _xm_=caml_string_of_jsbytes("left"),
     _xn_=caml_string_of_jsbytes("down"),
     _xo_=caml_string_of_jsbytes("up"),
     _xp_=caml_string_of_jsbytes("b"),
     _xq_=caml_string_of_jsbytes("a"),
     _xr_=caml_string_of_jsbytes("select"),
     _xs_=caml_string_of_jsbytes("start"),
     _xd_=caml_string_of_jsbytes("Enter"),
     _xe_=caml_string_of_jsbytes("Shift"),
     _xf_=caml_string_of_jsbytes("a"),
     _xg_=caml_string_of_jsbytes("d"),
     _xh_=caml_string_of_jsbytes("j"),
     _xi_=caml_string_of_jsbytes("k"),
     _xj_=caml_string_of_jsbytes("s"),
     _xk_=caml_string_of_jsbytes("w"),
     _w7_=caml_string_of_jsbytes("Enter"),
     _w8_=caml_string_of_jsbytes("Shift"),
     _w9_=caml_string_of_jsbytes("a"),
     _w__=caml_string_of_jsbytes("d"),
     _w$_=caml_string_of_jsbytes("j"),
     _xa_=caml_string_of_jsbytes("k"),
     _xb_=caml_string_of_jsbytes("s"),
     _xc_=caml_string_of_jsbytes("w"),
     _xx_=caml_string_of_jsbytes("canvas"),
     _xy_=caml_string_of_jsbytes("throttle"),
     _xz_=caml_string_of_jsbytes("load-rom"),
     _xA_=caml_string_of_jsbytes("rom-selector");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function compare_and_set(r,seen,v)
     {var cur=r[1];return cur === seen?(r[1] = v,1):0}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function abs(x){return 0 <= x?x:- x | 0}
    function cat(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_EA_)
             {_EA_ = caml_wrap_exception(_EA_);
              if(_EA_[1] !== Sys_error)throw _EA_;
              var _Ez_=_EA_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    var exit_function=[0,flush_all];
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    caml_register_named_value
     (caml_string_of_jsbytes("Pervasives.do_at_exit"),do_at_exit);
    if(caml_sys_const_naked_pointers_checked(0))
     for(;;)
      {var
        f_yet_to_run=[0,1],
        old_exit=exit_function[1],
        new_exit$0=
         function(f_yet_to_run,old_exit)
          {function new_exit(param)
            {if(compare_and_set(f_yet_to_run,1,0))caml_gc_major(0);
             return caml_call1(old_exit,0)}
           return new_exit},
        new_exit=new_exit$0(f_yet_to_run,old_exit),
        success=compare_and_set(exit_function,old_exit,new_exit);
       if(1 - success)continue;
       break}
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function hd(param){if(param){var a=param[1];return a}return failwith(_l_)}
    function init_aux(i,n,f)
     {if(n <= i)return 0;
      var r=caml_call1(f,i);
      return [0,r,init_aux(i + 1 | 0,n,f)]}
    var rev_init_threshold=typeof match === "number"?10000:50;
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function abs$0(x){return 0 <= x?x:- x | 0}
    var compare=caml_int_compare;
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub_string(b,ofs,len)
     {var switch$0=0;
      if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(b) - len | 0) < ofs))
       {var r=caml_create_bytes(len);
        caml_blit_bytes(b,ofs,r,0,len);
        var _Ey_=r;
        switch$0 = 1}
      if(! switch$0)var _Ey_=invalid_arg(_n_);
      return caml_string_of_bytes(_Ey_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_o_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_p_)}
    function create_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_Ew_=sx - 1 | 0,_Ev_=0;
      if(! (_Ew_ < 0))
       {var x=_Ev_;
        for(;;)
         {res[1 + x] = caml_make_vect(sy,init);
          var _Ex_=x + 1 | 0;
          if(_Ew_ !== x){var x=_Ex_;continue}
          break}}
      return res}
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_s_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_q_]}
        throw [0,Assert_failure,_r_]}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       y=buf[1] + overhead | 0,
       _Et_=len < y?1:0;
      if(_Et_)
       {var
         x=len * 2 | 0,
         new_len=y <= x?x:y,
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _Eu_=0}
      else
       var _Eu_=_Et_;
      return _Eu_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _t_;
         case 1:return _u_;
         case 2:return _v_;
         case 3:return _w_;
         case 4:return _x_;
         case 5:return _y_;
         default:return _z_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:
          var c=formatting_lit[1];
          return cat(_A_,caml_string_of_bytes(make(1,c)))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_B_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_C_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_D_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_H_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_I_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_J_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_K_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_L_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_M_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_N_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _D7_=function(param){return 0},
         _D8_=function(param){return 0},
         _D9_=function(param){return 0};
        return [0,function(param){return 0},_D9_,_D8_,_D7_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _D__=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_D__,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _D$_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _D$_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _Ea_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _Ea_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _Eb_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _Eb_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _Ec_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _Ec_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _Ed_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _Ed_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _Ee_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _Ee_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _Ef_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _Ef_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _Eg_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _Eg_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _Eh_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _Ei_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _Ej_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _Ej_,
                  _Ei_,
                  _Eh_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _Ek_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _Ek_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _El_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _El_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _Em_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _Em_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _En_=function(param){caml_call1(de$12,0);return 0},
           _Eo_=function(param){caml_call1(ed$12,0);return 0},
           _Ep_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _Ep_,
                  _Eo_,
                  _En_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _Eq_=function(param){caml_call1(de$13,0);return 0},
           _Er_=function(param){caml_call1(ed$13,0);return 0},
           _Es_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _Es_,
                  _Er_,
                  _Eq_]}}
    function trans(ty1,ty2)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof ty2 === "number")
        return 0;
       else
        switch(ty2[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_S_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_DO_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 0:var rest2=ty2[1];return [0,trans(_DO_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_DP_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 1:var rest2$0=ty2[1];return [1,trans(_DP_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_DQ_=ty1[1];
          if(typeof ty2 === "number")
           switch$3 = 1;
          else
           switch(ty2[0])
            {case 2:var rest2$1=ty2[1];return [2,trans(_DQ_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_DR_=ty1[1];
          if(typeof ty2 === "number")
           switch$4 = 1;
          else
           switch(ty2[0])
            {case 3:var rest2$2=ty2[1];return [3,trans(_DR_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_DS_=ty1[1];
          if(typeof ty2 === "number")
           switch$5 = 1;
          else
           switch(ty2[0])
            {case 4:var rest2$3=ty2[1];return [4,trans(_DS_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_DT_=ty1[1];
          if(typeof ty2 === "number")
           switch$6 = 1;
          else
           switch(ty2[0])
            {case 5:var rest2$4=ty2[1];return [5,trans(_DT_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_DU_=ty1[1];
          if(typeof ty2 === "number")
           switch$7 = 1;
          else
           switch(ty2[0])
            {case 6:var rest2$5=ty2[1];return [6,trans(_DU_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_DV_=ty1[1];
          if(typeof ty2 === "number")
           switch$8 = 1;
          else
           switch(ty2[0])
            {case 7:var rest2$6=ty2[1];return [7,trans(_DV_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_DW_=ty1[2],_DX_=ty1[1];
          if(typeof ty2 === "number")
           switch$9 = 1;
          else
           switch(ty2[0])
            {case 8:
              var rest2$7=ty2[2],ty2$0=ty2[1],_DY_=trans(_DW_,rest2$7);
              return [8,trans(_DX_,ty2$0),_DY_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_$_];
          break;
         case 9:
          var switch$10=0,_DZ_=ty1[3],_D0_=ty1[2],_D1_=ty1[1];
          if(typeof ty2 === "number")
           switch$10 = 1;
          else
           switch(ty2[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=ty2[3],
               ty22=ty2[2],
               ty21=ty2[1],
               ty=trans(symm(_D0_),ty21),
               match=fmtty_rel_det(ty),
               f4=match[4],
               f2=match[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_D1_,ty22,trans(_DZ_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_aa_];
          break;
         case 10:
          var _D2_=ty1[1];
          if(typeof ty2 !== "number" && 10 === ty2[0])
           {var rest2$9=ty2[1];return [10,trans(_D2_,rest2$9)]}
          throw [0,Assert_failure,_ab_];
         case 11:
          var switch$11=0,_D3_=ty1[1];
          if(typeof ty2 === "number")
           switch$11 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:var rest2$10=ty2[1];return [11,trans(_D3_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_ac_];
          break;
         case 12:
          var switch$12=0,_D4_=ty1[1];
          if(typeof ty2 === "number")
           switch$12 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=ty2[1];return [12,trans(_D4_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_ad_];
          break;
         case 13:
          var switch$13=0,_D5_=ty1[1];
          if(typeof ty2 === "number")
           switch$13 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=ty2[1];return [13,trans(_D5_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_ae_];
          break;
         default:
          var switch$14=0,_D6_=ty1[1];
          if(typeof ty2 === "number")
           switch$14 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=ty2[1];return [14,trans(_D6_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_af_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_V_];
        case 1:throw [0,Assert_failure,_W_];
        case 2:throw [0,Assert_failure,_X_];
        case 3:throw [0,Assert_failure,_Y_];
        case 4:throw [0,Assert_failure,_Z_];
        case 5:throw [0,Assert_failure,_T_];
        case 6:throw [0,Assert_failure,_U_];
        default:throw [0,Assert_failure,___]}}
    var Type_mismatch=[248,_ag_,caml_fresh_oo_id(0)];
    function type_padding(pad,fmtty)
     {if(typeof pad === "number")
       return [0,0,fmtty];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],fmtty]}
        if(typeof fmtty !== "number" && 2 === fmtty[0])
         {var rest=fmtty[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _DN_=match[2];
          if(typeof _DN_ !== "number" && 2 === _DN_[0])
           {var rest=_DN_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,fmtty)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,fmtty)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             sub_fmtty_rest=sub_fmtty[1],
             match=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match[2],
             sub_fmtty_rest$0=match[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$0[2],
             sub_fmtty_rest$2=match$0[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$1=fmtty[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$1[2],
             sub_fmtty_rest$4=match$1[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof fmtty !== "number" && 3 === fmtty[0])
           {var
             fmtty_rest$2=fmtty[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$2[2],
             sub_fmtty_rest$6=match$2[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof fmtty !== "number" && 4 === fmtty[0])
           {var
             fmtty_rest$3=fmtty[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$3[2],
             sub_fmtty_rest$8=match$3[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof fmtty !== "number" && 5 === fmtty[0])
           {var
             fmtty_rest$4=fmtty[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$4[2],
             sub_fmtty_rest$10=match$4[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof fmtty !== "number" && 6 === fmtty[0])
           {var
             fmtty_rest$5=fmtty[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$5[2],
             sub_fmtty_rest$12=match$5[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$6=fmtty[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$6[2],
             sub_fmtty_rest$14=match$6[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$7=fmtty[2],
             sub2_fmtty=fmtty[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$7[2],
             sub_fmtty_rest$16=match$7[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[3],
             sub2_fmtty$1=fmtty[2],
             sub1_fmtty=fmtty[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _DL_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_DL_))
             throw Type_mismatch;
            var _DM_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_DM_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$8=fmtty_rel_det(sub_fmtty$0),
             f4=match$8[4],
             f2=match$8[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$9=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$9[2],
             sub_fmtty_rest$18=match$9[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$10=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$10[2],
             sub_fmtty_rest$20=match$10[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$11[2],
             sub_fmtty_rest$22=match$11[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$12[2],
             sub_fmtty_rest$24=match$12[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 14 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$13[2],
             sub_fmtty_rest$26=match$13[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _Du_=match$1[2],
           _Dt_=match$1[1];
          if(typeof _Du_ !== "number" && 1 === _Du_[0])
           {var
             fmtty_rest$1=_Du_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_Dt_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _Dw_=match$3[2],
           _Dv_=match$3[1];
          if(typeof _Dw_ !== "number" && 1 === _Dw_[0])
           {var
             fmtty_rest$2=_Dw_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_Dv_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _Dy_=match$5[3],
           _Dx_=match$5[1];
          if(typeof _Dy_ !== "number" && 2 === _Dy_[0])
           {var
             fmtty_rest$3=_Dy_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_Dx_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _DA_=match$7[3],
           _Dz_=match$7[1];
          if(typeof _DA_ !== "number" && 3 === _DA_[0])
           {var
             fmtty_rest$4=_DA_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_Dz_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _DC_=match$9[3],
           _DB_=match$9[1];
          if(typeof _DC_ !== "number" && 4 === _DC_[0])
           {var
             fmtty_rest$5=_DC_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_DB_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _DE_=match$11[3],
           _DD_=match$11[1];
          if(typeof _DE_ !== "number" && 5 === _DE_[0])
           {var
             fmtty_rest$6=_DE_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_DD_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _DG_=match$13[3],
           _DF_=match$13[1];
          if(typeof _DG_ !== "number" && 6 === _DG_[0])
           {var
             fmtty_rest$7=_DG_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_DF_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _DI_=match$15[2],
           _DH_=match$15[1];
          if(typeof _DI_ !== "number" && 7 === _DI_[0])
           {var
             fmtty_rest$8=_DI_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_DH_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _DJ_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_DJ_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _DK_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_DK_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_DK_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _Ds_=2 === padty$0?48:32,res=make(width$0,_Ds_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _Dq_=match$0 - 32 | 0,
           switch$0=0;
          if(59 < _Dq_ >>> 0)
           {if(33 < (_Dq_ - 61 | 0) >>> 0)switch$0 = 1}
          else
           if(2 === _Dq_)switch$0 = 1;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _Dj_=caml_ml_bytes_length(s$0) - 1 | 0,
           _Di_=0;
          if(! (_Dj_ < 0))
           {var i$0=_Di_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0),switch$1=0;
              if(32 <= match)
               {var _Dn_=match - 34 | 0,switch$2=0;
                if(58 < _Dn_ >>> 0)
                 {if(93 <= _Dn_)switch$2 = 1}
                else
                 if(56 < (_Dn_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _Do_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _Do_=4;break;case 1:var _Do_=2;break}
              n[1] = n[1] + _Do_ | 0;
              var _Dp_=i$0 + 1 | 0;
              if(_Dj_ !== i$0){var i$0=_Dp_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           {var len=caml_ml_bytes_length(s$0),r=caml_create_bytes(len);
            caml_blit_bytes(s$0,0,r,0,len);
            var _Dr_=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _Dl_=caml_ml_bytes_length(s$0) - 1 | 0,_Dk_=0;
            if(! (_Dl_ < 0))
             {var i=_Dk_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _Dm_=i + 1 | 0;
                if(_Dl_ !== i){var i=_Dm_;continue}
                break}}
            var _Dr_=s}
          var str$0=caml_string_of_bytes(_Dr_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function format_of_fconv(fconv,prec)
     {var prec$0=abs(prec);
      if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=cF;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      if(8 <= fconv[2])buffer_add_char(buf,35);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_Dd_=caml_ml_string_length(s) - 1 | 0,_Dc_=0;
        if(! (_Dd_ < 0))
         {var i$0=_Dc_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _Dh_=i$0 + 1 | 0;
            if(_Dd_ !== i$0){var i$0=_Dh_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _Df_=caml_ml_string_length(s) - 1 | 0,
         _De_=0;
        if(! (_Df_ < 0))
         {var i=_De_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _Dg_=i + 1 | 0;
            if(_Df_ !== i){var i=_Dg_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _Db_=_ai_;break;
        case 2:var _Db_=_aj_;break;
        case 4:var _Db_=_al_;break;
        case 5:var _Db_=_am_;break;
        case 6:var _Db_=_an_;break;
        case 7:var _Db_=_ao_;break;
        case 8:var _Db_=_ap_;break;
        case 9:var _Db_=_aq_;break;
        case 10:var _Db_=_ar_;break;
        case 11:var _Db_=_as_;break;
        case 0:
        case 13:var _Db_=_ah_;break;
        case 3:
        case 14:var _Db_=_ak_;break;
        default:var _Db_=_at_}
      return transform_int_alt(iconv,caml_format_int(_Db_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _Da_=_aI_;break;
        case 2:var _Da_=_aJ_;break;
        case 4:var _Da_=_aL_;break;
        case 5:var _Da_=_aM_;break;
        case 6:var _Da_=_aN_;break;
        case 7:var _Da_=_aO_;break;
        case 8:var _Da_=_aP_;break;
        case 9:var _Da_=_aQ_;break;
        case 10:var _Da_=_aR_;break;
        case 11:var _Da_=_aS_;break;
        case 0:
        case 13:var _Da_=_aH_;break;
        case 3:
        case 14:var _Da_=_aK_;break;
        default:var _Da_=_aT_}
      return transform_int_alt(iconv,caml_format_int(_Da_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _C$_=_aV_;break;
        case 2:var _C$_=_aW_;break;
        case 4:var _C$_=_aY_;break;
        case 5:var _C$_=_aZ_;break;
        case 6:var _C$_=_a0_;break;
        case 7:var _C$_=_a1_;break;
        case 8:var _C$_=_a2_;break;
        case 9:var _C$_=_a3_;break;
        case 10:var _C$_=_a4_;break;
        case 11:var _C$_=_a5_;break;
        case 0:
        case 13:var _C$_=_aU_;break;
        case 3:
        case 14:var _C$_=_aX_;break;
        default:var _C$_=_a6_}
      return transform_int_alt(iconv,caml_format_int(_C$_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _C__=_av_;break;
        case 2:var _C__=_aw_;break;
        case 4:var _C__=_ay_;break;
        case 5:var _C__=_az_;break;
        case 6:var _C__=_aA_;break;
        case 7:var _C__=_aB_;break;
        case 8:var _C__=_aC_;break;
        case 9:var _C__=_aD_;break;
        case 10:var _C__=_aE_;break;
        case 11:var _C__=_aF_;break;
        case 0:
        case 13:var _C__=_au_;break;
        case 3:
        case 14:var _C__=_ax_;break;
        default:var _C__=_aG_}
      return transform_int_alt(iconv,caml_int64_format(_C__,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_a8_:_a9_:4 <= match?_a__:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i$0=0;
         for(;;)
          {if(i$0 === len)
            var _C8_=0;
           else
            {var
              match=caml_string_get(str,i$0),
              _C7_=match - 46 | 0,
              switch$0=0;
             if(23 < _C7_ >>> 0)
              {if(55 === _C7_)switch$0 = 1}
             else
              if(21 < (_C7_ - 1 | 0) >>> 0)switch$0 = 1;
             if(! switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
             var _C8_=1}
           var _C9_=_C8_?str:cat(str,_a7_);
           return caml_special_val(_C9_)}
        case 6:return hex(0);
        case 7:
         var s$0=hex(0),s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
         if(0 === l)
          var _C6_=s;
         else
          {var r=caml_create_bytes(l),_C3_=l - 1 | 0,_C2_=0;
           if(! (_C3_ < 0))
            {var i=_C2_;
             for(;;)
              {var
                c=caml_bytes_unsafe_get(s,i),
                switcher=c - 97 | 0,
                _C4_=25 < switcher >>> 0?c:c - 32 | 0;
               caml_bytes_unsafe_set(r,i,_C4_);
               var _C5_=i + 1 | 0;
               if(_C3_ !== i){var i=_C5_;continue}
               break}}
           var _C6_=r}
         return caml_string_of_bytes(_C6_);
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_f_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_g_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_h_;break;
                  case 9:var str=_i_;break;
                  case 10:var str=_j_;break;
                  case 13:var str=_k_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _CY_=pad$5[2],_CZ_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_CZ_,_CY_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_CZ_,_CY_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_CZ_,_CY_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _C0_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_C0_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_C0_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_C0_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _C1_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _C1_[2] === "number")
              {var fmt=_C1_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _CW_=fmt$0[1];
           if(0 === _CW_[0])
            {var
              rest$13=fmt$0[2],
              match=_CW_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_CW_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_a$_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_ba_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bb_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bc_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _CX_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_CX_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_CX_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_CV_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bd_];
         default:throw [0,Assert_failure,_be_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _CU_=[8,acc,_bf_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_CU_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_CU_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _CT_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_CT_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_CT_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,prec,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _CQ_=pad[2],_CR_=pad[1];
          if(typeof prec === "number")
           return prec
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_CR_,_CQ_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_CR_,_CQ_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=prec[1];
          return function(x)
           {var
             str=
              fix_padding
               (_CR_,_CQ_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _CS_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_CS_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_CS_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=prec[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_CS_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _CO_=acc$0[2],_CP_=acc$0[1];
           if(0 === _CO_[0])
            {var acc$1=_CO_[1];
             output_acc(o,_CP_);
             output_string(o,_bg_);
             var acc$0=acc$1;
             continue}
           var acc$2=_CO_[1];
           output_acc(o,_CP_);
           output_string(o,_bh_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _CM_=acc$0[2],_CN_=acc$0[1];
           if(0 === _CM_[0])
            {var acc$1=_CM_[1];
             strput_acc(b,_CN_);
             add_string(b,_bi_);
             var acc$0=acc$1;
             continue}
           var acc$2=_CM_[1];
           strput_acc(b,_CN_);
           add_string(b,_bj_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_bytes_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_CL_=0;
      return make_printf(function(acc){output_acc(oc,acc);return 0},_CL_,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return sub_string(buf[1],0,buf[2])}
      return make_printf(k,0,fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var a=x[1 + i$1];
      if(1 - (typeof a === "number"?1:0))
       {if(caml_obj_tag(a) === 252)return caml_call1(sprintf(_bk_),a);
        if(caml_obj_tag(a) === 253)
         {var s=caml_format_float(_d_,a),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return cat(s,_c_);
            var match=caml_string_get(s,i),switch$0=0;
            if(48 <= match)
             {if(! (58 <= match))switch$0 = 1}
            else
             if(45 === match)switch$0 = 1;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bl_}
      return caml_call1(sprintf(_bm_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bn_;
      var _CJ_=other_fields(x,i + 1 | 0),_CK_=field(x,i);
      return caml_call2(sprintf(_bo_),_CK_,_CJ_)}
    function to_string(e)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,e);switch$0 = 1}
            catch(_CI_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      var match$0=conv(printers[1]);
      if(match$0){var s=match$0[1];return s}
      if(e === Out_of_memory)return _bt_;
      if(e === Stack_overflow)return _bu_;
      if(e[1] === Match_failure)
       {var match$1=e[2],char$0=match$1[3],line=match$1[2],file=match$1[1];
        return caml_call5
                (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bv_)}
      if(e[1] === Assert_failure)
       {var
         match$2=e[2],
         char$1=match$2[3],
         line$0=match$2[2],
         file$0=match$2[1];
        return caml_call5
                (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bw_)}
      if(e[1] === Undefined_recursive_module)
       {var
         match$3=e[2],
         char$2=match$3[3],
         line$1=match$3[2],
         file$1=match$3[1];
        return caml_call5
                (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bx_)}
      if(0 === caml_obj_tag(e))
       {var constructor=e[1][1],match=e.length - 1;
        if(2 < match >>> 0)
         var
          _CE_=other_fields(e,2),
          _CF_=field(e,1),
          _CH_=caml_call2(sprintf(_bp_),_CF_,_CE_);
        else
         switch(match)
          {case 0:var _CH_=_bq_;break;
           case 1:var _CH_=_br_;break;
           default:var _CG_=field(e,1),_CH_=caml_call1(sprintf(_bs_),_CG_)}
        return cat(constructor,_CH_)}
      return e[1]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var a=caml_convert_raw_backtrace(raw_backtrace),backtrace=[0,a];
      if(backtrace)
       {var _CC_=a.length - 1 - 1 | 0,_CB_=0;
        if(! (_CC_ < 0))
         {var i=_CB_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[1 + i],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_by_:_bz_:0 === i?_bA_:_bB_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              _Ct_=slot[5],
              _Cu_=slot[4],
              _Cv_=slot[3],
              _Cw_=slot[6]?_bC_:_bE_,
              _Cx_=slot[2],
              _Cy_=slot[7],
              _Cz_=info(slot[1]),
              match=
               [0,
                caml_call7(sprintf(_bD_),_Cz_,_Cy_,_Cx_,_Cw_,_Cv_,_Cu_,_Ct_)];
            else
             if(slot[1])
              var match=0;
             else
              var _CA_=info(0),match=[0,caml_call1(sprintf(_bF_),_CA_)];
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bG_),str)}
            var _CD_=i + 1 | 0;
            if(_CC_ !== i){var i=_CD_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bH_)}
    var errors=_bI_.slice();
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _Cr_=to_string(exn);
      caml_call1(eprintf(_bJ_),_Cr_);
      print_raw_backtrace(stderr,raw_backtrace);
      var status=caml_ml_debug_info_status(0);
      if(status < 0)
       {var _Cs_=abs(status);
        prerr_endline(caml_check_bound(errors,_Cs_)[1 + _Cs_])}
      return caml_ml_flush(stderr)}
    var empty_backtrace=[0];
    function handle_uncaught_exception(exn,debugger_in_use)
     {try
       {try
         {var
           raw_backtrace=
            debugger_in_use
             ?empty_backtrace
             :caml_get_exception_raw_backtrace(0);
          try {do_at_exit(0)}catch(_Cq_){}
          try
           {var
             _Cm_=default_uncaught_exception_han(exn,raw_backtrace),
             _Cl_=_Cm_}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            var
             raw_backtrace$0=caml_get_exception_raw_backtrace(0),
             _Cj_=to_string(exn);
            caml_call1(eprintf(_bL_),_Cj_);
            print_raw_backtrace(stderr,raw_backtrace);
            var _Ck_=to_string(exn$0);
            caml_call1(eprintf(_bM_),_Ck_);
            print_raw_backtrace(stderr,raw_backtrace$0);
            var _Cl_=caml_ml_flush(stderr)}
          var _Cn_=_Cl_}
        catch(_Cp_)
         {_Cp_ = caml_wrap_exception(_Cp_);
          if(_Cp_ !== Out_of_memory)throw _Cp_;
          var _Cn_=prerr_endline(_bK_)}
        return _Cn_}
      catch(_Co_){return 0}}
    caml_register_named_value
     (caml_string_of_jsbytes("Printexc.handle_uncaught_exception"),
      handle_uncaught_exception);
    var Finally_raised=[248,_bN_,caml_fresh_oo_id(0)];
    function fn(param)
     {if(param[1] === Finally_raised)
       {var exn=param[2];return [0,cat(_bO_,to_string(exn))]}
      return 0}
    for(;;)
     {var
       old_printers=printers[1],
       new_printers=[0,fn,old_printers],
       success$0=compare_and_set(printers,old_printers,new_printers);
      if(1 - success$0)continue;
      var
       empty="",
       is_empty=function(s){return 0 === s.length?1:0},
       null$0=null,
       attrs=undefined,
       is_null=function(v){return v === null$0?1:0},
       is_undefined=function(v){return v === attrs?1:0},
       is_none=
        function(v){var _Ci_=is_null(v);return _Ci_?_Ci_:is_undefined(v)},
       to_option=function(conv,v){return is_none(v)?0:[0,caml_call1(conv,v)]},
       target=globalThis,
       set_if_some=
        function(o,p,param)
         {if(param){var b=param[1];return o[p] = ! ! b}return 0},
       get=caml_js_get,
       Error=[248,_bP_,caml_fresh_oo_id(0)],
       exn=[0,Error,{}],
       slot=caml_obj_tag(exn) === 248?exn:exn[1];
      caml_register_named_value(caml_string_of_jsbytes("jsError"),slot);
      var
       promise=target.Promise,
       resolve=function(v){return promise.resolve(v)},
       await$0=function(f,k){var p=f.fut;p.then(k);return 0},
       return$0=function(v){return {"fut":resolve(v)}},
       bind=
        function(f,fn)
         {function _Ch_(v){return caml_call1(fn,v).fut}
          return {"fut":f.fut.then(_Ch_)}},
       of_promise=
        function(ok$0,v)
         {function ok(v){return resolve([0,caml_call1(ok$0,v)])}
          function error(e){return resolve([1,e])}
          return {"fut":v.then(ok,error)}},
       prevent_default=function(e){e.preventDefault();return 0},
       listen=
        function(opt,type,f,t)
         {if(opt)var sth=opt[1],opts=sth;else var opts={};
          t.addEventListener(type,f,opts);
          return 0},
       unlisten=
        function(opt,type,f,t)
         {if(opt)var sth=opt[1],opts=sth;else var opts={};
          t.removeEventListener(type,f,opts);
          return 0},
       change="change",
       keydown="keydown",
       keyup="keyup",
       decode=target.decodeURI,
       url=target.URL,
       usp=target.URLSearchParams,
       class$0="class",
       value="value",
       d=target.document,
       _bU_=function(e,n){e.appendChild(n);return 0},
       tag_name=function(e){return e.nodeName.toLowerCase()},
       jv_to_bool=function(b){return is_undefined(b)?0:b | 0},
       jv_to_jstr=function(s){return is_undefined(s)?empty:s},
       n="checked",
       p$0=[0,n,jv_to_bool,caml_js_from_bool],
       n$0="value",
       value$0=[0,n$0,jv_to_jstr,function(_Cg_){return _Cg_}],
       prop=function(p,e){return caml_call1(p[2],e[p[1]])},
       n$1="canvas",
       c=target.console,
       log=
        function(msg)
         {var a=new (target.Array)(0),i=0,param=msg;
          for(;;)
           {if(param)
             {var param$0=param[2],v=param[1];
              a[i] = v;
              var i$0=i + 1 | 0,i=i$0,param=param$0;
              continue}
            var args=caml_js_to_array(a);
            caml_js_meth_call(c,meth,args);
            return 0}},
       navigator=target.navigator,
       performance=target.performance,
       w=target.window,
       fetch=target.fetch,
       gl2ctx=target.WebGL2RenderingContext,
       get_int=is_none(gl2ctx)?function(param,_Cf_){return 0}:get;
      get_int(gl2ctx,_bX_);
      get_int(gl2ctx,_bY_);
      get_int(gl2ctx,_bZ_);
      get_int(gl2ctx,_b0_);
      get_int(gl2ctx,_b1_);
      get_int(gl2ctx,_b2_);
      get_int(gl2ctx,_b3_);
      get_int(gl2ctx,_b4_);
      get_int(gl2ctx,_b5_);
      get_int(gl2ctx,_b6_);
      get_int(gl2ctx,_b7_);
      get_int(gl2ctx,_b8_);
      get_int(gl2ctx,_b9_);
      get_int(gl2ctx,_b__);
      get_int(gl2ctx,_b$_);
      get_int(gl2ctx,_ca_);
      get_int(gl2ctx,_cb_);
      get_int(gl2ctx,_cc_);
      get_int(gl2ctx,_cd_);
      get_int(gl2ctx,_ce_);
      get_int(gl2ctx,_cf_);
      get_int(gl2ctx,_cg_);
      get_int(gl2ctx,_ch_);
      get_int(gl2ctx,_ci_);
      get_int(gl2ctx,_cj_);
      get_int(gl2ctx,_ck_);
      get_int(gl2ctx,_cl_);
      get_int(gl2ctx,_cm_);
      get_int(gl2ctx,_cn_);
      get_int(gl2ctx,_co_);
      get_int(gl2ctx,_cp_);
      get_int(gl2ctx,_cq_);
      get_int(gl2ctx,_cr_);
      get_int(gl2ctx,_cs_);
      get_int(gl2ctx,_ct_);
      get_int(gl2ctx,_cu_);
      get_int(gl2ctx,_cv_);
      get_int(gl2ctx,_cw_);
      get_int(gl2ctx,_cx_);
      get_int(gl2ctx,_cy_);
      get_int(gl2ctx,_cz_);
      get_int(gl2ctx,_cA_);
      get_int(gl2ctx,_cB_);
      get_int(gl2ctx,_cC_);
      get_int(gl2ctx,_cD_);
      get_int(gl2ctx,_cE_);
      get_int(gl2ctx,_cF_);
      get_int(gl2ctx,_cG_);
      get_int(gl2ctx,_cH_);
      get_int(gl2ctx,_cI_);
      get_int(gl2ctx,_cJ_);
      get_int(gl2ctx,_cK_);
      get_int(gl2ctx,_cL_);
      get_int(gl2ctx,_cM_);
      get_int(gl2ctx,_cN_);
      get_int(gl2ctx,_cO_);
      get_int(gl2ctx,_cP_);
      get_int(gl2ctx,_cQ_);
      get_int(gl2ctx,_cR_);
      get_int(gl2ctx,_cS_);
      get_int(gl2ctx,_cT_);
      get_int(gl2ctx,_cU_);
      get_int(gl2ctx,_cV_);
      get_int(gl2ctx,_cW_);
      get_int(gl2ctx,_cX_);
      get_int(gl2ctx,_cY_);
      get_int(gl2ctx,_cZ_);
      get_int(gl2ctx,_c0_);
      get_int(gl2ctx,_c1_);
      get_int(gl2ctx,_c2_);
      get_int(gl2ctx,_c3_);
      get_int(gl2ctx,_c4_);
      get_int(gl2ctx,_c5_);
      get_int(gl2ctx,_c6_);
      get_int(gl2ctx,_c7_);
      get_int(gl2ctx,_c8_);
      get_int(gl2ctx,_c9_);
      get_int(gl2ctx,_c__);
      get_int(gl2ctx,_c$_);
      get_int(gl2ctx,_da_);
      get_int(gl2ctx,_db_);
      get_int(gl2ctx,_dc_);
      get_int(gl2ctx,_dd_);
      get_int(gl2ctx,_de_);
      get_int(gl2ctx,_df_);
      get_int(gl2ctx,_dg_);
      get_int(gl2ctx,_dh_);
      get_int(gl2ctx,_di_);
      get_int(gl2ctx,_dj_);
      get_int(gl2ctx,_dk_);
      get_int(gl2ctx,_dl_);
      get_int(gl2ctx,_dm_);
      get_int(gl2ctx,_dn_);
      get_int(gl2ctx,_do_);
      get_int(gl2ctx,_dp_);
      get_int(gl2ctx,_dq_);
      get_int(gl2ctx,_dr_);
      get_int(gl2ctx,_ds_);
      get_int(gl2ctx,_dt_);
      get_int(gl2ctx,_du_);
      get_int(gl2ctx,_dv_);
      get_int(gl2ctx,_dw_);
      get_int(gl2ctx,_dx_);
      get_int(gl2ctx,_dy_);
      get_int(gl2ctx,_dz_);
      get_int(gl2ctx,_dA_);
      get_int(gl2ctx,_dB_);
      get_int(gl2ctx,_dC_);
      get_int(gl2ctx,_dD_);
      get_int(gl2ctx,_dE_);
      get_int(gl2ctx,_dF_);
      get_int(gl2ctx,_dG_);
      get_int(gl2ctx,_dH_);
      get_int(gl2ctx,_dI_);
      get_int(gl2ctx,_dJ_);
      get_int(gl2ctx,_dK_);
      get_int(gl2ctx,_dL_);
      get_int(gl2ctx,_dM_);
      get_int(gl2ctx,_dN_);
      get_int(gl2ctx,_dO_);
      get_int(gl2ctx,_dP_);
      get_int(gl2ctx,_dQ_);
      get_int(gl2ctx,_dR_);
      get_int(gl2ctx,_dS_);
      get_int(gl2ctx,_dT_);
      get_int(gl2ctx,_dU_);
      get_int(gl2ctx,_dV_);
      get_int(gl2ctx,_dW_);
      get_int(gl2ctx,_dX_);
      get_int(gl2ctx,_dY_);
      get_int(gl2ctx,_dZ_);
      get_int(gl2ctx,_d0_);
      get_int(gl2ctx,_d1_);
      get_int(gl2ctx,_d2_);
      get_int(gl2ctx,_d3_);
      get_int(gl2ctx,_d4_);
      get_int(gl2ctx,_d5_);
      get_int(gl2ctx,_d6_);
      get_int(gl2ctx,_d7_);
      get_int(gl2ctx,_d8_);
      get_int(gl2ctx,_d9_);
      get_int(gl2ctx,_d__);
      get_int(gl2ctx,_d$_);
      get_int(gl2ctx,_ea_);
      get_int(gl2ctx,_eb_);
      get_int(gl2ctx,_ec_);
      get_int(gl2ctx,_ed_);
      get_int(gl2ctx,_ee_);
      get_int(gl2ctx,_ef_);
      get_int(gl2ctx,_eg_);
      get_int(gl2ctx,_eh_);
      get_int(gl2ctx,_ei_);
      get_int(gl2ctx,_ej_);
      get_int(gl2ctx,_ek_);
      get_int(gl2ctx,_el_);
      get_int(gl2ctx,_em_);
      get_int(gl2ctx,_en_);
      get_int(gl2ctx,_eo_);
      get_int(gl2ctx,_ep_);
      get_int(gl2ctx,_eq_);
      get_int(gl2ctx,_er_);
      get_int(gl2ctx,_es_);
      get_int(gl2ctx,_et_);
      get_int(gl2ctx,_eu_);
      get_int(gl2ctx,_ev_);
      get_int(gl2ctx,_ew_);
      get_int(gl2ctx,_ex_);
      get_int(gl2ctx,_ey_);
      get_int(gl2ctx,_ez_);
      get_int(gl2ctx,_eA_);
      get_int(gl2ctx,_eB_);
      get_int(gl2ctx,_eC_);
      get_int(gl2ctx,_eD_);
      get_int(gl2ctx,_eE_);
      get_int(gl2ctx,_eF_);
      get_int(gl2ctx,_eG_);
      get_int(gl2ctx,_eH_);
      get_int(gl2ctx,_eI_);
      get_int(gl2ctx,_eJ_);
      get_int(gl2ctx,_eK_);
      get_int(gl2ctx,_eL_);
      get_int(gl2ctx,_eM_);
      get_int(gl2ctx,_eN_);
      get_int(gl2ctx,_eO_);
      get_int(gl2ctx,_eP_);
      get_int(gl2ctx,_eQ_);
      get_int(gl2ctx,_eR_);
      get_int(gl2ctx,_eS_);
      get_int(gl2ctx,_eT_);
      get_int(gl2ctx,_eU_);
      get_int(gl2ctx,_eV_);
      get_int(gl2ctx,_eW_);
      get_int(gl2ctx,_eX_);
      get_int(gl2ctx,_eY_);
      get_int(gl2ctx,_eZ_);
      get_int(gl2ctx,_e0_);
      get_int(gl2ctx,_e1_);
      get_int(gl2ctx,_e2_);
      get_int(gl2ctx,_e3_);
      get_int(gl2ctx,_e4_);
      get_int(gl2ctx,_e5_);
      get_int(gl2ctx,_e6_);
      get_int(gl2ctx,_e7_);
      get_int(gl2ctx,_e8_);
      get_int(gl2ctx,_e9_);
      get_int(gl2ctx,_e__);
      get_int(gl2ctx,_e$_);
      get_int(gl2ctx,_fa_);
      get_int(gl2ctx,_fb_);
      get_int(gl2ctx,_fc_);
      get_int(gl2ctx,_fd_);
      get_int(gl2ctx,_fe_);
      get_int(gl2ctx,_ff_);
      get_int(gl2ctx,_fg_);
      get_int(gl2ctx,_fh_);
      get_int(gl2ctx,_fi_);
      get_int(gl2ctx,_fj_);
      get_int(gl2ctx,_fk_);
      get_int(gl2ctx,_fl_);
      get_int(gl2ctx,_fm_);
      get_int(gl2ctx,_fn_);
      get_int(gl2ctx,_fo_);
      get_int(gl2ctx,_fp_);
      get_int(gl2ctx,_fq_);
      get_int(gl2ctx,_fr_);
      get_int(gl2ctx,_fs_);
      get_int(gl2ctx,_ft_);
      get_int(gl2ctx,_fu_);
      get_int(gl2ctx,_fv_);
      get_int(gl2ctx,_fw_);
      get_int(gl2ctx,_fx_);
      get_int(gl2ctx,_fy_);
      get_int(gl2ctx,_fz_);
      get_int(gl2ctx,_fA_);
      get_int(gl2ctx,_fB_);
      get_int(gl2ctx,_fC_);
      get_int(gl2ctx,_fD_);
      get_int(gl2ctx,_fE_);
      get_int(gl2ctx,_fF_);
      get_int(gl2ctx,_fG_);
      get_int(gl2ctx,_fH_);
      get_int(gl2ctx,_fI_);
      get_int(gl2ctx,_fJ_);
      get_int(gl2ctx,_fK_);
      get_int(gl2ctx,_fL_);
      get_int(gl2ctx,_fM_);
      get_int(gl2ctx,_fN_);
      get_int(gl2ctx,_fO_);
      get_int(gl2ctx,_fP_);
      get_int(gl2ctx,_fQ_);
      get_int(gl2ctx,_fR_);
      get_int(gl2ctx,_fS_);
      get_int(gl2ctx,_fT_);
      get_int(gl2ctx,_fU_);
      get_int(gl2ctx,_fV_);
      get_int(gl2ctx,_fW_);
      get_int(gl2ctx,_fX_);
      get_int(gl2ctx,_fY_);
      get_int(gl2ctx,_fZ_);
      get_int(gl2ctx,_f0_);
      get_int(gl2ctx,_f1_);
      get_int(gl2ctx,_f2_);
      get_int(gl2ctx,_f3_);
      var create=function(size){return caml_ba_create(12,0,[0,size])};
      create(0);
      var
       MakeInfix=
        function(B)
         {var
           symbol=B[8],
           symbol$0=B[9],
           symbol$1=B[10],
           symbol$2=B[11],
           symbol$3=B[6];
          function symbol$4(a,b){return 1 - caml_call2(B[6],a,b)}
          var
           symbol$5=B[7],
           mod=B[12],
           land=B[15],
           lor=B[16],
           lxor=B[17],
           lsl=B[18],
           lsr=B[19];
          return [0,
                  symbol,
                  symbol$0,
                  symbol$1,
                  symbol$2,
                  symbol$3,
                  symbol$4,
                  symbol$5,
                  mod,
                  land,
                  lor,
                  lxor,
                  lsl,
                  lsr]},
       max_int=255,
       zero=0,
       one=1,
       equal=function(x,y){return 0 === caml_int_compare(x,y)?1:0},
       le=caml_lessequal,
       add=function(x,y){return (x + y | 0) & 255},
       sub=function(x,y){return (x - y | 0) & 255},
       mul=function(x,y){return caml_mul(x,y) & 255},
       div=function(x,y){return caml_div(x,y) & 255},
       rem=function(x,y){return caml_mod(x,y) & 255},
       succ=function(x){return add(x,one)},
       pred=function(x){return sub(x,one)},
       logand=function(x,y){return x & y},
       logor=function(x,y){return x | y},
       logxor=function(_Ce_,_Cd_){return _Ce_ ^ _Cd_},
       shift_left=function(x,y){return x << y & 255},
       shift_right=function(_Cc_,_Cb_){return _Cc_ >>> _Cb_ | 0},
       of_int=function(x){return x & 255},
       show=sprintf(_f5_),
       Infix=
        MakeInfix
         ([0,
           show,
           max_int,
           zero,
           one,
           compare,
           equal,
           le,
           add,
           sub,
           mul,
           div,
           rem,
           succ,
           pred,
           logand,
           logor,
           logxor,
           shift_left,
           shift_right,
           of_int,
           function(_Ca_){return _Ca_}]),
       symbol=Infix[1],
       symbol$0=Infix[2],
       symbol$1=Infix[5],
       symbol$2=Infix[6],
       land=Infix[9],
       lor=Infix[10],
       lxor=Infix[11],
       lsl=Infix[12],
       lsr=Infix[13],
       max_int$0=65535,
       zero$0=0,
       one$0=1,
       equal$0=function(x,y){return 0 === caml_int_compare(x,y)?1:0},
       le$0=caml_lessequal,
       add$0=function(x,y){return (x + y | 0) & 65535},
       sub$0=function(x,y){return (x - y | 0) & 65535},
       mul$0=function(x,y){return caml_mul(x,y) & 65535},
       div$0=function(x,y){return caml_div(x,y) & 65535},
       rem$0=function(x,y){return caml_mod(x,y) & 65535},
       succ$0=function(x){return add$0(x,one$0)},
       pred$0=function(x){return sub$0(x,one$0)},
       logand$0=function(x,y){return x & y},
       logor$0=function(x,y){return x | y},
       logxor$0=function(_B$_,_B__){return _B$_ ^ _B__},
       shift_left$0=function(x,y){return x << y & 65535},
       shift_right$0=function(_B9_,_B8_){return _B9_ >>> _B8_ | 0},
       of_int$0=function(x){return x & 65535},
       show$0=sprintf(_f6_),
       Infix$0=
        MakeInfix
         ([0,
           show$0,
           max_int$0,
           zero$0,
           one$0,
           compare,
           equal$0,
           le$0,
           add$0,
           sub$0,
           mul$0,
           div$0,
           rem$0,
           succ$0,
           pred$0,
           logand$0,
           logor$0,
           logxor$0,
           shift_left$0,
           shift_right$0,
           of_int$0,
           function(_B7_){return _B7_}]),
       symbol$3=Infix$0[1],
       symbol$4=Infix$0[2],
       symbol$5=Infix$0[5],
       symbol$6=Infix$0[7],
       land$0=Infix$0[9],
       lor$0=Infix$0[10],
       lsl$0=Infix$0[12],
       is_neg=function(t){return 0 !== (t & 128)?1:0},
       to_int=
        function(t)
         {if(is_neg(t))
           {var _B6_=is_neg(t)?(t - 1 | 0) ^ 255:t;return - _B6_ | 0}
          return t},
       update=
        function(state,type,b)
         {switch(type)
           {case 0:return [0,state[1],b,state[3],state[4],state[5],state[6]];
            case 1:return [0,state[1],state[2],b,state[4],state[5],state[6]];
            case 2:return [0,state[1],state[2],state[3],b,state[5],state[6]];
            case 3:return [0,state[1],state[2],state[3],state[4],b,state[6]];
            default:return [0,state[1],state[2],state[3],state[4],state[5],b]}},
       request=function(t,type){t[2] = update(t[2],type,1);return 0},
       accepts=
        function(t,addr)
         {var _B5_=caml_call2(symbol$5,t[1][1],addr);
          return _B5_?_B5_:caml_call2(symbol$5,t[2][1],addr)},
       byte_of_state=
        function(s)
         {var
           _B0_=s[6]?16:0,
           _B1_=s[5]?8:0,
           _B2_=s[4]?4:0,
           _B3_=s[3]?2:0,
           _B4_=s[2]?1:0;
          return (_B4_ | _B3_ | _B2_ | _B1_ | _B0_) & 255},
       state_of_byte=
        function(n,addr)
         {var
           b0=caml_call2(symbol$2,caml_call2(land,n,1),0),
           b1=caml_call2(symbol$2,caml_call2(land,n,2),0),
           b2=caml_call2(symbol$2,caml_call2(land,n,4),0),
           b3=caml_call2(symbol$2,caml_call2(land,n,8),0),
           b4=caml_call2(symbol$2,caml_call2(land,n,16),0);
          return [0,addr,b0,b1,b2,b3,b4]},
       accepts$0=
        function(t,addr)
         {var _BW_=caml_equal(addr,t[1]);
          if(_BW_)
           var _BX_=_BW_;
          else
           {var _BY_=caml_equal(addr,t[2]);
            if(_BY_)
             var _BX_=_BY_;
            else
             var _BZ_=caml_equal(addr,t[3]),_BX_=_BZ_ || caml_equal(addr,t[4])}
          return _BX_},
       get_tile_index=
        function(t,area,y,x)
         {if(area)
           {var _BS_=x / 8 | 0,_BT_=y / 8 | 0;
            return caml_check_bound
                     (caml_check_bound(t[2],_BT_)[1 + _BT_],_BS_)
                    [1 + _BS_]}
          var _BU_=x / 8 | 0,_BV_=y / 8 | 0;
          return caml_check_bound(caml_check_bound(t[1],_BV_)[1 + _BV_],_BU_)
                  [1 + _BU_]},
       accepts$1=
        function(t,addr)
         {var
           _BO_=caml_call2(symbol$6,t[3],addr),
           _BP_=_BO_?caml_call2(symbol$6,addr,t[4]):_BO_;
          if(_BP_)
           var _BQ_=_BP_;
          else
           {var _BR_=caml_call2(symbol$6,t[5],addr);
            if(_BR_)return caml_call2(symbol$6,addr,t[6]);
            var _BQ_=_BR_}
          return _BQ_},
       bitflags_of_byte=
        function(x)
         {var
           _BH_=caml_call2(symbol$2,caml_call2(land,x,1),zero),
           _BI_=caml_call2(symbol$2,caml_call2(land,x,2),zero),
           _BJ_=caml_call2(symbol$2,caml_call2(land,x,4),zero),
           _BK_=caml_call2(symbol$2,caml_call2(land,x,8),zero),
           _BL_=caml_call2(symbol$2,caml_call2(land,x,16),zero),
           _BM_=caml_call2(symbol$2,caml_call2(land,x,32),zero),
           _BN_=caml_call2(symbol$2,caml_call2(land,x,64),zero);
          return [0,
                  caml_call2(symbol$2,caml_call2(land,x,128),zero),
                  _BN_,
                  _BM_,
                  _BL_,
                  _BK_,
                  _BJ_,
                  _BI_,
                  _BH_]},
       byte_of_bitflags=
        function(b7,b6,b5,b4,b3,b2,b1,b0)
         {return (b0
                  |
                  b1
                  <<
                  1
                  |
                  b2
                  <<
                  2
                  |
                  b3
                  <<
                  3
                  |
                  b4
                  <<
                  4
                  |
                  b5
                  <<
                  5
                  |
                  b6
                  <<
                  6
                  |
                  b7
                  <<
                  7)
                 &
                 255},
       get_row_pixels=
        function(t,area,index,row)
         {if(area)
           var signed_index=to_int(index),index$0=signed_index + 256 | 0;
          else
           var index$0=index;
          if(8 <= row)
           {var _BF_=row - 8 | 0,_BG_=index$0 + 1 | 0;
            return caml_check_bound
                     (caml_check_bound(t[1],_BG_)[1 + _BG_],_BF_)
                    [1 + _BF_]}
          return caml_check_bound
                   (caml_check_bound(t[1],index$0)[1 + index$0],row)
                  [1 + row]},
       accepts$2=
        function(t,addr)
         {var _BE_=caml_call2(symbol$6,t[2],addr);
          return _BE_?caml_call2(symbol$6,addr,t[3]):_BE_},
       create$0=
        function(start_addr,end_addr)
         {var
           n=
            caml_call2
             (symbol$3,caml_call2(symbol$4,end_addr,start_addr),one$0),
           s=caml_create_bytes(n),
           _BA_=n - 1 | 0,
           _Bz_=0;
          if(! (_BA_ < 0))
           {var i=_Bz_;
            for(;;)
             {caml_bytes_unsafe_set(s,i,0);
              var _BB_=i + 1 | 0;
              if(_BA_ !== i){var i=_BB_;continue}
              break}}
          var
           string=caml_string_of_bytes(s),
           len=caml_ml_string_length(string),
           buffer_len=caml_ml_string_length(string),
           _BC_=len < 0?1:0,
           off=0,
           _BD_=_BC_ || ((buffer_len - 0 | 0) < len?1:0);
          if(_BD_)
           {var message=caml_call4(sprintf(_f4_),op,buffer_len,off,len);
            throw [0,Invalid_argument,message]}
          var bytes=create(len);
          bigstringaf_blit_from_bytes(string,0,bytes,0,len);
          return [0,bytes,start_addr,end_addr]},
       accepts$3=
        function(t,addr)
         {var _By_=caml_call2(symbol$6,t[2],addr);
          return _By_?caml_call2(symbol$6,addr,t[3]):_By_},
       read_byte=
        function(t,addr)
         {var offset=caml_call2(symbol$4,addr,t[2]);
          return caml_ba_get_1(t[1],offset)},
       write_byte=
        function(t,addr,data)
         {var offset=caml_call2(symbol$4,addr,t[2]);
          return caml_ba_set_1(t[1],offset,data)},
       accepts$4=
        function(t,addr)
         {var _Bx_=caml_call2(symbol$6,t[3],addr);
          return _Bx_?caml_call2(symbol$6,addr,t[4]):_Bx_},
       create$1=
        function(addr,type,opt,param)
         {if(opt)var sth=opt[1],default$0=sth;else var default$0=zero;
          return 87 === type
                  ?[0,addr,default$0,0,1]
                  :18373 <= type?[0,addr,default$0,1,1]:[0,addr,default$0,1,0]},
       accepts$5=function(t,addr){return caml_call2(symbol$5,addr,t[1])},
       read_byte$0=
        function(t,addr)
         {return t[3]?accepts$5(t,addr)?t[2]:failwith(_gk_):failwith(_gl_)},
       write_byte$0=
        function(t,addr,data)
         {return t[3]
                  ?accepts$5(t,addr)?(t[2] = data,0):failwith(_gm_)
                  :failwith(_gn_)},
       accepts$6=
        function(t,addr)
         {var _Bw_=accepts$5(t[1],addr);return _Bw_?_Bw_:accepts$5(t[2],addr)},
       read_r=
        function(t,param)
         {switch(param)
           {case 0:return t[1];
            case 1:return t[2];
            case 2:return t[3];
            case 3:return t[4];
            case 4:return t[5];
            case 5:return t[6];
            case 6:return t[7];
            default:return t[8]}},
       read_rr=
        function(t,rr)
         {switch(rr)
           {case 0:
             var _Bs_=t[6] & 65535;
             return caml_call2(lor$0,caml_call2(lsl$0,t[1] & 65535,8),_Bs_);
            case 1:
             var _Bt_=t[3] & 65535;
             return caml_call2(lor$0,caml_call2(lsl$0,t[2] & 65535,8),_Bt_);
            case 2:
             var _Bu_=t[5] & 65535;
             return caml_call2(lor$0,caml_call2(lsl$0,t[4] & 65535,8),_Bu_);
            default:
             var _Bv_=t[8] & 65535;
             return caml_call2(lor$0,caml_call2(lsl$0,t[7] & 65535,8),_Bv_)}},
       write_r=
        function(t,r,x)
         {switch(r)
           {case 0:t[1] = x;return 0;
            case 1:t[2] = x;return 0;
            case 2:t[3] = x;return 0;
            case 3:t[4] = x;return 0;
            case 4:t[5] = x;return 0;
            case 5:t[6] = caml_call2(land,x,240);return 0;
            case 6:t[7] = x;return 0;
            default:t[8] = x;return 0}},
       write_rr=
        function(t,rr,x)
         {var high=((x & 65280) >>> 8 | 0) & 255,low=x & 255 & 255;
          switch(rr)
           {case 0:t[1] = high;t[6] = caml_call2(land,low,240);return 0;
            case 1:t[2] = high;t[3] = low;return 0;
            case 2:t[4] = high;t[5] = low;return 0;
            default:t[7] = high;t[8] = low;return 0}},
       read_flag=
        function(t,flag)
         {var _Br_=t[6];
          switch(flag)
           {case 0:return 0 !== (_Br_ & 16)?1:0;
            case 1:return 0 !== (_Br_ & 32)?1:0;
            case 2:return 0 !== (_Br_ & 64)?1:0;
            default:return 0 !== (_Br_ & 128)?1:0}},
       mask_0b00010000=16,
       mask_0b11100000=224,
       mask_0b00100000=32,
       mask_0b11010000=208,
       mask_0b01000000=64,
       mask_0b10110000=176,
       mask_0b10000000=128,
       mask_0b01110000=112,
       set_flags=
        function(t,opt,_Bq_,_Bp_,_Bo_,param)
         {if(opt)var sth=opt[1],c=sth;else var c=read_flag(t,0);
          if(_Bq_)var sth$0=_Bq_[1],h=sth$0;else var h=read_flag(t,1);
          if(_Bp_)var sth$1=_Bp_[1],n=sth$1;else var n=read_flag(t,2);
          if(_Bo_)var sth$2=_Bo_[1],z=sth$2;else var z=read_flag(t,3);
          t[6]
          =
          c
           ?caml_call2(lor,t[6],mask_0b00010000)
           :caml_call2(land,t[6],mask_0b11100000);
          t[6]
          =
          h
           ?caml_call2(lor,t[6],mask_0b00100000)
           :caml_call2(land,t[6],mask_0b11010000);
          t[6]
          =
          n
           ?caml_call2(lor,t[6],mask_0b01000000)
           :caml_call2(land,t[6],mask_0b10110000);
          return z
                  ?(t[6] = caml_call2(lor,t[6],mask_0b10000000),0)
                  :(t[6] = caml_call2(land,t[6],mask_0b01110000),0)},
       create$2=
        function(addr)
         {return [0,addr,-588596599,-603547828,-126317716,-937474657]},
       lookup=
        function(t,color_id)
         {switch(color_id)
           {case 0:return t[2];
            case 1:return t[3];
            case 2:return t[4];
            default:return t[5]}},
       accepts$7=function(t,addr){return caml_call2(symbol$5,addr,t[1])},
       read_byte$1=
        function(t,addr)
         {function bits_of_color(param)
           {return -588596599 <= param
                    ?-126317716 <= param?2:0
                    :-603547828 <= param?1:3}
          if(accepts$7(t,addr))
           {var
             _Bl_=bits_of_color(t[5]) << 6,
             _Bm_=bits_of_color(t[4]) << 4,
             _Bn_=bits_of_color(t[3]) << 2;
            return (bits_of_color(t[2]) | _Bn_ | _Bm_ | _Bl_) & 255}
          throw [0,Invalid_argument,_gq_]},
       write_byte$1=
        function(t,addr,data)
         {function color_of_bits(param)
           {if(3 < param >>> 0)throw [0,Assert_failure,_gr_];
            switch(param)
             {case 0:return -588596599;
              case 1:return -603547828;
              case 2:return -126317716;
              default:return -937474657}}
          if(accepts$7(t,addr))
           {t[2] = color_of_bits(data & 3);
            t[3] = color_of_bits((data & 12) >>> 2 | 0);
            t[4] = color_of_bits((data & 48) >>> 4 | 0);
            t[5] = color_of_bits((data & 192) >>> 6 | 0);
            return 0}
          throw [0,Invalid_argument,_gs_]},
       write_byte$2=
        function(t,addr,data)
         {var
           offset=addr - t[2] | 0,
           sprite_index=offset / 4 | 0,
           match=offset % 4 | 0;
          if(3 < match >>> 0)throw [0,Assert_failure,_gu_];
          switch(match)
           {case 0:
             var
              _Bd_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
              _Be_=
               [0,
                data - 16 | 0,
                _Bd_[2],
                _Bd_[3],
                _Bd_[4],
                _Bd_[5],
                _Bd_[6],
                _Bd_[7],
                _Bd_[8],
                _Bd_[9]];
             caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _Be_;
             return 0;
            case 1:
             var
              _Bf_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
              _Bg_=
               [0,
                _Bf_[1],
                data - 8 | 0,
                _Bf_[3],
                _Bf_[4],
                _Bf_[5],
                _Bf_[6],
                _Bf_[7],
                _Bf_[8],
                _Bf_[9]];
             caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _Bg_;
             return 0;
            case 2:
             var
              _Bh_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
              _Bi_=
               [0,
                _Bh_[1],
                _Bh_[2],
                data,
                _Bh_[4],
                _Bh_[5],
                _Bh_[6],
                _Bh_[7],
                _Bh_[8],
                _Bh_[9]];
             caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _Bi_;
             return 0;
            default:
             var
              match$0=bitflags_of_byte(data),
              b0=match$0[8],
              b1=match$0[7],
              b2=match$0[6],
              b3=match$0[5],
              b4=match$0[4],
              x_flip=match$0[3],
              y_flip=match$0[2],
              b7=match$0[1],
              priority=b7?486156037:-259427781,
              pallete=b4?879375796:879375795,
              tile_vram_bank=b3?-1058811691:-1058811692,
              pallete_num=b2 << 2 | b1 << 1 | b0,
              _Bj_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
              _Bk_=
               [0,
                _Bj_[1],
                _Bj_[2],
                _Bj_[3],
                priority,
                y_flip,
                x_flip,
                pallete,
                tile_vram_bank,
                pallete_num];
             caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _Bk_;
             return 0}},
       accepts$8=
        function(t,addr)
         {var _Bc_=caml_call2(symbol$6,t[2],addr);
          return _Bc_?caml_call2(symbol$6,addr,t[3]):_Bc_},
       accepts$9=function(t,addr){return caml_call2(symbol$5,addr,t[1])},
       get_ly=function(t){return t[3][2]},
       reset_ly=function(t){t[3][2] = 0;return 0},
       accepts$10=
        function(t,addr)
         {var
           param$0=
            [0,
             t[1][1],
             [0,t[2][1],[0,t[3][1],[0,t[4][1],[0,t[5][1],[0,t[6][1],0]]]]]],
           param=param$0;
          for(;;)
           {if(param)
             {var l=param[2],a=param[1],_Bb_=caml_call2(symbol$5,addr,a);
              if(_Bb_)return _Bb_;
              var param=l;
              continue}
            return 0}},
       register_of_addr=
        function(t,addr)
         {if(caml_call2(symbol$5,addr,t[1][1]))return t[1];
          if(caml_call2(symbol$5,addr,t[2][1]))return t[2];
          if(caml_call2(symbol$5,addr,t[3][1]))return t[3];
          if(caml_call2(symbol$5,addr,t[4][1]))return t[4];
          if(caml_call2(symbol$5,addr,t[6][1]))return t[6];
          if(caml_call2(symbol$5,addr,t[5][1]))return t[5];
          var _Ba_=caml_call1(show$0,addr);
          throw [0,Invalid_argument,caml_call1(sprintf(_gx_),_Ba_)]},
       is_enabled=
        function(t,param)
         {switch(param)
           {case 0:return t[2];
            case 1:return t[3];
            case 2:return t[4];
            default:return t[5]}},
       set_gpu_mode=function(t,mode){t[7] = mode;return 0},
       accepts$11=function(t,addr){return caml_call2(symbol$5,addr,t[1])},
       handle_ly_eq_lyc=
        function(t)
         {var ly=get_ly(t[9]),b=ly === t[9][4][2]?1:0;
          t[7][6] = b;
          var _A$_=b?is_enabled(t[7],0):b;
          return _A$_?request(t[10],1):_A$_},
       screen_w=160,
       screen_h=144,
       accepts$12=
        function(t,addr)
         {var _A2_=accepts$1(t[2],addr);
          if(_A2_)
           var _A3_=_A2_;
          else
           {var _A4_=accepts$2(t[1],addr);
            if(_A4_)
             var _A3_=_A4_;
            else
             {var _A5_=accepts$8(t[3],addr);
              if(_A5_)
               var _A3_=_A5_;
              else
               {var _A6_=accepts$7(t[4],addr);
                if(_A6_)
                 var _A3_=_A6_;
                else
                 {var _A7_=accepts$7(t[5],addr);
                  if(_A7_)
                   var _A3_=_A7_;
                  else
                   {var _A8_=accepts$7(t[6],addr);
                    if(_A8_)
                     var _A3_=_A8_;
                    else
                     {var _A9_=accepts$11(t[7],addr);
                      if(_A9_)
                       var _A3_=_A9_;
                      else
                       {var _A__=accepts$9(t[8],addr);
                        if(! _A__)return accepts$10(t[9],addr);
                        var _A3_=_A__}}}}}}}
          return _A3_},
       accepts$13=function(t,addr){return caml_equal(addr,t[1])},
       create$3=
        function(rom_bytes)
         {var x=caml_ba_get_1(rom_bytes,327);
          if(! (17 < x >>> 0))
           {var switch$0=0;
            switch(x)
             {case 0:var cartridge_type=0;break;
              case 1:var cartridge_type=1;break;
              case 2:var cartridge_type=2;break;
              case 3:var cartridge_type=3;break;
              case 5:var cartridge_type=4;break;
              case 6:var cartridge_type=5;break;
              case 15:var cartridge_type=6;break;
              case 16:var cartridge_type=7;break;
              case 17:var cartridge_type=8;break;
              default:switch$0 = 1}
            if(! switch$0)
             {var match=caml_ba_get_1(rom_bytes,328);
              if(8 < match >>> 0)throw [0,Assert_failure,_vQ_];
              switch(match)
               {case 0:var rom_bank_count=2;break;
                case 1:var rom_bank_count=4;break;
                case 2:var rom_bank_count=8;break;
                case 3:var rom_bank_count=16;break;
                case 4:var rom_bank_count=32;break;
                case 5:var rom_bank_count=64;break;
                case 6:var rom_bank_count=128;break;
                case 7:var rom_bank_count=256;break;
                default:var rom_bank_count=512}
              var match$0=caml_ba_get_1(rom_bytes,329);
              if(5 < match$0 >>> 0)throw [0,Assert_failure,_vR_];
              switch(match$0)
               {case 0:var ram_bank_count=0;break;
                case 1:var ram_bank_count=1;break;
                case 2:var ram_bank_count=1;break;
                case 3:var ram_bank_count=4;break;
                case 4:var ram_bank_count=16;break;
                default:var ram_bank_count=8}
              return [0,cartridge_type,rom_bank_count,ram_bank_count]}}
          throw [0,Invalid_argument,caml_call1(sprintf(_vP_),x)]},
       create$4=
        function(rom_bytes)
         {var
           h=create$3(rom_bytes),
           rom_bank_size=h[2],
           ram_bank_size=h[3],
           ram_bytes=create(ram_bank_size * 8192 | 0);
          return [0,rom_bytes,ram_bytes,rom_bank_size,ram_bank_size,0,1,0,0]},
       ram_addr_of_addr=
        function(t,addr)
         {var _A1_=t[4];
          if(t[8] && 1 !== _A1_)
           {if(4 === _A1_)return (8192 * t[7] | 0) + (addr - 40960 | 0) | 0;
            throw [0,Invalid_argument,caml_call1(sprintf(_vU_),_A1_)]}
          return (addr - 40960 | 0) % 8192 | 0},
       read_byte$2=
        function(t,addr)
         {if(0 <= addr && ! (16383 < addr))
           {var _AZ_=t[3];
            if(t[8] && 32 < _AZ_)
             if(64 === _AZ_)
              var zero_bank_num=(t[7] & 1) << 5;
             else
              {if(128 !== _AZ_)throw [0,Assert_failure,_vS_];
               var zero_bank_num=(t[7] & 3) << 5}
            else
             var zero_bank_num=0;
            return caml_ba_get_1(t[1],(16384 * zero_bank_num | 0) + addr | 0)}
          if(16384 <= addr && ! (32767 < addr))
           {var n=t[3];
            if(32 < n)
             if(64 === n)
              var bit5=(t[7] & 1) << 5,high_bank_num=bit5 | t[6];
             else
              {if(128 !== n)throw [0,Assert_failure,_vT_];
               var bit56=(t[7] & 3) << 5,high_bank_num=bit56 | t[6]}
            else
             var high_bank_num=t[6];
            return caml_ba_get_1
                    (t[1],(16384 * high_bank_num | 0) + (addr - 16384 | 0) | 0)}
          if(40960 <= addr && ! (49151 < addr))
           {if(t[5] && 0 < t[4])
             {var _A0_=ram_addr_of_addr(t,addr);
              return caml_ba_get_1(t[2],_A0_)}
            return 255}
          throw [0,Assert_failure,_vV_]},
       write_byte$3=
        function(t,addr,data)
         {if(0 <= addr && ! (8191 < addr)){t[5] = 10 === data?1:0;return 0}
          if(8192 <= addr && ! (16383 < addr))
           {var _AW_=t[3],switch$0=0;
            if(33 <= _AW_)
             if(64 === _AW_ || 128 === _AW_)var _AX_=31;else switch$0 = 1;
            else
             if(17 <= _AW_)
              if(32 <= _AW_)var _AX_=31;else switch$0 = 1;
             else
              if(2 <= _AW_)
               {var switcher=_AW_ - 2 | 0;
                switch(switcher)
                 {case 0:var _AX_=1;break;
                  case 2:var _AX_=3;break;
                  case 6:var _AX_=7;break;
                  case 14:var _AX_=15;break;
                  default:switch$0 = 1}}
              else
               switch$0 = 1;
            if(switch$0)
             throw [0,Invalid_argument,caml_call1(sprintf(_vW_),_AW_)];
            var
             rom_bank_num=data & _AX_,
             _AY_=0 === rom_bank_num?1:rom_bank_num;
            t[6] = _AY_;
            return 0}
          if(16384 <= addr && ! (24575 < addr)){t[7] = data & 3;return 0}
          if(24576 <= addr && ! (32767 < addr))
           {var _AV_=0 === (data & 1)?0:1;t[8] = _AV_;return 0}
          if(40960 <= addr && ! (49151 < addr))
           {var _AS_=t[5],_AT_=_AS_?0 < t[4]?1:0:_AS_;
            if(_AT_)
             var
              ram_addr=ram_addr_of_addr(t,addr),
              _AU_=caml_ba_set_1(t[2],ram_addr,data);
            else
             var _AU_=_AT_;
            return _AU_}
          throw [0,Assert_failure,_vX_]},
       accepts$14=
        function(param,addr)
         {var _AO_=0 <= addr?1:0,_AP_=_AO_?addr <= 32767?1:0:_AO_;
          if(_AP_)
           var _AQ_=_AP_;
          else
           var _AR_=40960 <= addr?1:0,_AQ_=_AR_?addr <= 49151?1:0:_AR_;
          return _AQ_},
       _vY_=[0,create$4,read_byte$2,write_byte$3,accepts$14],
       create$5=function(rom_bytes){return [0,rom_bytes]},
       read_byte$3=
        function(t,addr)
         {if(0 <= addr && ! (32767 < addr))return caml_ba_get_1(t[1],addr);
          throw [0,Invalid_argument,_vZ_]},
       write_byte$4=function(param,_AN_,_AM_){return 0},
       accepts$15=
        function(param,addr)
         {var _AK_=0 <= addr?1:0,_AL_=_AK_?addr <= 32767?1:0:_AK_;return _AL_},
       touchstart="touchstart",
       touchend="touchend",
       _v0_=[0,create$5,read_byte$3,write_byte$4,accepts$15],
       gb_w=160,
       gb_h=144,
       find_el_by_id=
        function(id)
         {var
           id$0=caml_jsstring_of_string(id),
           _AI_=d.getElementById(id$0),
           param=to_option(function(_AJ_){return _AJ_},_AI_);
          if(param){var v=param[1];return v}
          return invalid_arg(_e_)},
       draw_framebuffer=
        function(ctx,image_data,fb)
         {var d=image_data.data,y=0;
          a:
          for(;;)
           {var x=0;
            for(;;)
             {var
               off=4 * ((y * 160 | 0) + x | 0) | 0,
               match=caml_check_bound(caml_check_bound(fb,y)[1 + y],x)[1 + x];
              if(-588596599 <= match)
               if(-126317716 <= match)
                {d[off] = 97;
                 d[off + 1 | 0] = 104;
                 d[off + 2 | 0] = 125;
                 d[off + 3 | 0] = 255}
               else
                {d[off] = 229;
                 d[off + 1 | 0] = 251;
                 d[off + 2 | 0] = 244;
                 d[off + 3 | 0] = 255}
              else
               if(-603547828 <= match)
                {d[off] = 151;
                 d[off + 1 | 0] = 174;
                 d[off + 2 | 0] = 184;
                 d[off + 3 | 0] = 255}
               else
                {d[off] = 34;
                 d[off + 1 | 0] = 30;
                 d[off + 2 | 0] = 49;
                 d[off + 3 | 0] = 255}
              var _AH_=x + 1 | 0;
              if(159 !== x){var x=_AH_;continue}
              var _AG_=y + 1 | 0;
              if(143 !== y){var y=_AG_;continue a}
              ctx.putImageData(image_data,0,0);
              return 0}}},
       run_id=[0,0],
       key_down_listener=[0,0],
       key_up_listener=[0,0],
       throttled=[0,1],
       run_rom_blob=
        function(ctx,image_data,rom_blob)
         {function _xO_(result)
           {if(0 === result[0])
             {var
               buf=result[1],
               rom_bytes=
                caml_ba_from_typed_array(new (target.Uint8Array)(buf,0)),
               _xV_=run_id[1];
              if(_xV_)
               {var timer_id=_xV_[1];
                target.clearTimeout(timer_id);
                target.cancelAnimationFrame(timer_id)}
              var _xW_=key_down_listener[1];
              if(_xW_){var lister=_xW_[1];unlisten(0,keydown,lister,target)}
              var _xX_=key_up_listener[1];
              if(_xX_){var lister$0=_xX_[1];unlisten(0,keyup,lister$0,target)}
              var type=create$3(rom_bytes)[1];
              if(type)
               {if(4 <= type)throw [0,Assert_failure,_v1_];
                var cartridge$0=_vY_}
              else
               var cartridge$0=_v0_;
              var
               _xS_=cartridge$0[4],
               _xT_=cartridge$0[3],
               _xU_=cartridge$0[2],
               read_byte$2=
                function(t,addr)
                 {if(_xS_(t[1],addr))return _xU_(t[1],addr);
                  if(accepts$3(t[2],addr))return read_byte(t[2],addr);
                  if(accepts$3(t[5],addr))return read_byte(t[5],addr);
                  if(accepts$12(t[4],addr))
                   {var _AA_=t[4];
                    if(accepts$2(_AA_[1],addr))
                     {var match$0=_AA_[7][7];
                      if(1 === match$0)return 255;
                      var
                       _Au_=_AA_[1],
                       offset$1=caml_call2(symbol$4,addr,_Au_[2]),
                       index=offset$1 / 16 | 0,
                       row=(offset$1 % 16 | 0) / 2 | 0,
                       hi_or_lo=0 === (offset$1 % 2 | 0)?17059:16161,
                       a$0=
                        caml_check_bound
                          (caml_check_bound(_Au_[1],index)[1 + index],row)
                         [1 + row],
                       f=
                        function(id)
                         {if(17059 <= hi_or_lo)
                           {if(1 !== id && ! (3 <= id))return 0;return 1}
                          return 2 <= id?1:0},
                       l=a$0.length - 1;
                      if(0 === l)
                       var _Am_=[0];
                      else
                       {var r=caml_make_vect(l,f(a$0[1])),_z$_=l - 1 | 0,_z__=1;
                        if(! (_z$_ < 1))
                         {var i=_z__;
                          for(;;)
                           {r[1 + i] = f(a$0[1 + i]);
                            var _Aa_=i + 1 | 0;
                            if(_z$_ !== i){var i=_Aa_;continue}
                            break}}
                        var _Am_=r}
                      var
                       a=_gh_.slice(),
                       r$0=[0,0],
                       _Ac_=a.length - 1 - 1 | 0,
                       _Ab_=0;
                      if(! (_Ac_ < 0))
                       {var i$0=_Ab_;
                        for(;;)
                         {var i$1=a[1 + i$0],_Ad_=r$0[1];
                          r$0[1]
                          =
                          _Ad_
                          |
                          caml_check_bound(_Am_,i$1)[1 + i$1]
                          <<
                          (7 - i$1 | 0);
                          var _Ae_=i$0 + 1 | 0;
                          if(_Ac_ !== i$0){var i$0=_Ae_;continue}
                          break}}
                      return r$0[1] & 255}
                    if(accepts$1(_AA_[2],addr))
                     {var match$1=_AA_[7][7];
                      if(1 === match$1)return 255;
                      var _Av_=_AA_[2];
                      if
                       (caml_call2(symbol$6,_Av_[3],addr)
                        &&
                        caml_call2(symbol$6,addr,_Av_[4]))
                       {var
                         offset=caml_call2(symbol$4,addr,_Av_[3]),
                         _Ah_=offset % 32 | 0,
                         _Ai_=offset / 32 | 0;
                        return caml_check_bound
                                 (caml_check_bound(_Av_[1],_Ai_)[1 + _Ai_],_Ah_)
                                [1 + _Ah_]}
                      if
                       (caml_call2(symbol$6,_Av_[5],addr)
                        &&
                        caml_call2(symbol$6,addr,_Av_[6]))
                       {var
                         offset$0=caml_call2(symbol$4,addr,_Av_[5]),
                         _Aj_=offset$0 % 32 | 0,
                         _Ak_=offset$0 / 32 | 0;
                        return caml_check_bound
                                 (caml_check_bound(_Av_[2],_Ak_)[1 + _Ak_],_Aj_)
                                [1 + _Aj_]}
                      var _Al_=caml_call1(show$0,addr);
                      throw [0,Invalid_argument,caml_call1(sprintf(_gf_),_Al_)]}
                    if(accepts$8(_AA_[3],addr))
                     {var match$2=_AA_[7][7];
                      if(2 <= match$2)
                       {var
                         _Aw_=_AA_[3],
                         offset$3=addr - _Aw_[2] | 0,
                         _Ap_=offset$3 / 4 | 0,
                         sprite=caml_check_bound(_Aw_[1],_Ap_)[1 + _Ap_],
                         match=offset$3 % 4 | 0;
                        if(3 < match >>> 0)throw [0,Assert_failure,_gt_];
                        switch(match)
                         {case 0:return (sprite[1] + 16 | 0) & 255;
                          case 1:return (sprite[2] + 8 | 0) & 255;
                          case 2:return sprite[3];
                          default:
                           return byte_of_bitflags
                                   (486156037 === sprite[4]?1:0,
                                    sprite[5],
                                    sprite[6],
                                    879375796 === sprite[7]?1:0,
                                    -1058811691 === sprite[8]?1:0,
                                    0 !== (sprite[9] & 4)?1:0,
                                    0 !== (sprite[9] & 2)?1:0,
                                    0 !== (sprite[9] & 1)?1:0)}}
                      return 255}
                    if(accepts$7(_AA_[4],addr))return read_byte$1(_AA_[4],addr);
                    if(accepts$7(_AA_[5],addr))return read_byte$1(_AA_[5],addr);
                    if(accepts$7(_AA_[6],addr))return read_byte$1(_AA_[6],addr);
                    if(accepts$11(_AA_[7],addr))
                     {var _Ax_=_AA_[7];
                      if(accepts$11(_Ax_,addr))
                       {switch(_Ax_[7])
                         {case 0:var b0=0,b1=1;break;
                          case 1:var b0=1,b1=1;break;
                          case 2:var b0=0,b1=0;break;
                          default:var b0=1,b1=0}
                        var
                         _Aq_=_Ax_[6],
                         _Ar_=is_enabled(_Ax_,3),
                         _As_=is_enabled(_Ax_,2),
                         _At_=is_enabled(_Ax_,1);
                        return byte_of_bitflags
                                (1,is_enabled(_Ax_,0),_At_,_As_,_Ar_,_Aq_,b1,b0)}
                      throw [0,Invalid_argument,_gy_]}
                    if(accepts$9(_AA_[8],addr))
                     {var _Ay_=_AA_[8];
                      if(accepts$9(_Ay_,addr))
                       return byte_of_bitflags
                               (_Ay_[2],
                                1 === _Ay_[3]?1:0,
                                _Ay_[4],
                                0 === _Ay_[5]?1:0,
                                1 === _Ay_[6]?1:0,
                                -663730172 === _Ay_[7]?1:0,
                                _Ay_[8],
                                _Ay_[9]);
                      throw [0,Invalid_argument,_gv_]}
                    if(accepts$10(_AA_[9],addr))
                     {var r$1=register_of_addr(_AA_[9],addr);return r$1[2] & 255}
                    var _Az_=caml_call1(show$0,addr);
                    throw [0,Invalid_argument,caml_call1(sprintf(_gA_),_Az_)]}
                  if(accepts$13(t[6],addr))
                   {var _AB_=t[6];
                    switch(_AB_[3])
                     {case 0:return 15;
                      case 1:
                       return byte_of_bitflags
                               (1,
                                1,
                                0,
                                1,
                                1 === _AB_[4]?1:0,
                                1 === _AB_[5]?1:0,
                                1 === _AB_[6]?1:0,
                                1 === _AB_[7]?1:0);
                      default:
                       return byte_of_bitflags
                               (1,
                                1,
                                1,
                                0,
                                1 === _AB_[8]?1:0,
                                1 === _AB_[9]?1:0,
                                1 === _AB_[10]?1:0,
                                1 === _AB_[11]?1:0)}}
                  if(accepts$4(t[3],addr))
                   {var _AC_=t[3];
                    if(accepts$4(_AC_,addr))
                     {var
                       offset$2=caml_call2(symbol$4,addr,_AC_[3]),
                       _An_=caml_call2(symbol$3,_AC_[2],offset$2);
                      return read_byte(_AC_[1],_An_)}
                    var _Ao_=caml_call1(show$0,addr);
                    throw [0,Invalid_argument,caml_call1(sprintf(_gi_),_Ao_)]}
                  if(accepts$6(t[7],addr))
                   {var _AD_=t[7];
                    return accepts$5(_AD_[1],addr)
                            ?read_byte$0(_AD_[1],addr)
                            :accepts$5(_AD_[2],addr)
                              ?read_byte$0(_AD_[2],addr)
                              :failwith(_go_)}
                  if(accepts(t[8],addr))
                   {var _AE_=t[8];
                    if(caml_call2(symbol$5,addr,_AE_[1][1]))
                     return byte_of_state(_AE_[1]);
                    if(caml_call2(symbol$5,addr,_AE_[2][1]))
                     return caml_call2(lor,224,byte_of_state(_AE_[2]));
                    throw [0,Assert_failure,_ga_]}
                  if(accepts$0(t[9],addr))
                   {var _AF_=t[9];
                    if(caml_equal(addr,_AF_[1]))return _AF_[7] & 255;
                    if(caml_equal(addr,_AF_[2]))return _AF_[11] & 255;
                    if(caml_equal(addr,_AF_[3]))return _AF_[10] & 255;
                    if(caml_equal(addr,_AF_[4]))
                     {var _Af_=_AF_[8]?4:0,enable_bit=_Af_ & 255;
                      switch(_AF_[9])
                       {case 0:var _Ag_=0;break;
                        case 1:var _Ag_=1;break;
                        case 2:var _Ag_=2;break;
                        default:var _Ag_=3}
                      return caml_call2(land,enable_bit,_Ag_)}
                    throw [0,Assert_failure,_gc_]}
                  return accepts$5(t[10],addr)?read_byte$0(t[10],addr):255},
               write_byte$3=
                function(t,addr,data)
                 {if(_xS_(t[1],addr))return _xT_(t[1],addr,data);
                  if(accepts$3(t[2],addr))return write_byte(t[2],addr,data);
                  if(accepts$3(t[5],addr))return write_byte(t[5],addr,data);
                  if(accepts$12(t[4],addr))
                   {var _z4_=t[4];
                    if(accepts$2(_z4_[1],addr))
                     {var match$2=_z4_[7][7];
                      if(1 === match$2)return 0;
                      var
                       _zW_=_z4_[1],
                       _zF_=caml_call2(symbol$2,caml_call2(land,data,1),zero),
                       _zG_=caml_call2(symbol$2,caml_call2(land,data,2),zero),
                       _zH_=caml_call2(symbol$2,caml_call2(land,data,4),zero),
                       _zI_=caml_call2(symbol$2,caml_call2(land,data,8),zero),
                       _zJ_=caml_call2(symbol$2,caml_call2(land,data,16),zero),
                       _zK_=caml_call2(symbol$2,caml_call2(land,data,32),zero),
                       _zL_=caml_call2(symbol$2,caml_call2(land,data,64),zero),
                       data_bits=
                        [0,
                         caml_call2(symbol$2,caml_call2(land,data,128),zero),
                         _zL_,
                         _zK_,
                         _zJ_,
                         _zI_,
                         _zH_,
                         _zG_,
                         _zF_],
                       offset$1=caml_call2(symbol$4,addr,_zW_[2]),
                       index=offset$1 / 16 | 0,
                       row=(offset$1 % 16 | 0) / 2 | 0,
                       colors_in_row=
                        caml_check_bound
                          (caml_check_bound(_zW_[1],index)[1 + index],row)
                         [1 + row],
                       hi_or_lo=0 === (offset$1 % 2 | 0)?17059:16161,
                       f=
                        function(i,b)
                         {var t=caml_check_bound(colors_in_row,i)[1 + i];
                          if(b)
                           {if(17059 <= hi_or_lo)
                             switch(t)
                              {case 0:return 1;
                               case 1:return 1;
                               case 2:return 3;
                               default:return 3}
                            switch(t)
                             {case 0:return 2;
                              case 1:return 3;
                              case 2:return 2;
                              default:return 3}}
                          if(17059 <= hi_or_lo)
                           switch(t)
                            {case 0:return 0;
                             case 1:return 0;
                             case 2:return 2;
                             default:return 2}
                          switch(t)
                           {case 0:return 0;
                            case 1:return 1;
                            case 2:return 0;
                            default:return 1}},
                       l=data_bits.length - 1;
                      if(0 === l)
                       var _zM_=[0];
                      else
                       {var
                         r=caml_make_vect(l,f(0,data_bits[1])),
                         _zx_=l - 1 | 0,
                         _zw_=1;
                        if(! (_zx_ < 1))
                         {var i=_zw_;
                          for(;;)
                           {r[1 + i] = f(i,data_bits[1 + i]);
                            var _zy_=i + 1 | 0;
                            if(_zx_ !== i){var i=_zy_;continue}
                            break}}
                        var _zM_=r}
                      caml_check_bound
                        (caml_check_bound(_zW_[1],index)[1 + index],row)
                       [1 + row]
                      =
                      _zM_;
                      return 0}
                    if(accepts$1(_z4_[2],addr))
                     {var match$3=_z4_[7][7];
                      if(1 === match$3)return 0;
                      var _zX_=_z4_[2];
                      if
                       (caml_call2(symbol$6,_zX_[3],addr)
                        &&
                        caml_call2(symbol$6,addr,_zX_[4]))
                       {var
                         offset=caml_call2(symbol$4,addr,_zX_[3]),
                         _zA_=offset % 32 | 0,
                         _zB_=offset / 32 | 0;
                        caml_check_bound
                          (caml_check_bound(_zX_[1],_zB_)[1 + _zB_],_zA_)
                         [1 + _zA_]
                        =
                        data;
                        return 0}
                      if
                       (caml_call2(symbol$6,_zX_[5],addr)
                        &&
                        caml_call2(symbol$6,addr,_zX_[6]))
                       {var
                         offset$0=caml_call2(symbol$4,addr,_zX_[5]),
                         _zC_=offset$0 % 32 | 0,
                         _zD_=offset$0 / 32 | 0;
                        caml_check_bound
                          (caml_check_bound(_zX_[2],_zD_)[1 + _zD_],_zC_)
                         [1 + _zC_]
                        =
                        data;
                        return 0}
                      var _zE_=caml_call1(show$0,addr);
                      throw [0,Invalid_argument,caml_call1(sprintf(_gg_),_zE_)]}
                    if(accepts$8(_z4_[3],addr))
                     {var match$4=_z4_[7][7];
                      return 2 <= match$4?write_byte$2(_z4_[3],addr,data):0}
                    if(accepts$7(_z4_[4],addr))
                     return write_byte$1(_z4_[4],addr,data);
                    if(accepts$7(_z4_[5],addr))
                     return write_byte$1(_z4_[5],addr,data);
                    if(accepts$7(_z4_[6],addr))
                     return write_byte$1(_z4_[6],addr,data);
                    if(accepts$11(_z4_[7],addr))
                     {var _zY_=_z4_[7];
                      if(accepts$11(_zY_,addr))
                       {var
                         match$1=bitflags_of_byte(data),
                         b3$0=match$1[5],
                         b4$0=match$1[4],
                         b5$0=match$1[3],
                         b6$0=match$1[2];
                        _zY_[2] = b6$0;
                        _zY_[3] = b5$0;
                        _zY_[4] = b4$0;
                        _zY_[5] = b3$0;
                        return 0}
                      throw [0,Invalid_argument,_gz_]}
                    if(accepts$9(_z4_[8],addr))
                     {var lcd_enable_before=_z4_[8][2],_zZ_=_z4_[8];
                      if(accepts$9(_zZ_,addr))
                       {var
                         match$0=bitflags_of_byte(data),
                         b0=match$0[8],
                         b1=match$0[7],
                         b2=match$0[6],
                         b3=match$0[5],
                         b4=match$0[4],
                         b5=match$0[3],
                         b6=match$0[2],
                         b7=match$0[1];
                        _zZ_[2] = b7;
                        var _zS_=b6?1:0;
                        _zZ_[3] = _zS_;
                        _zZ_[4] = b5;
                        var _zT_=b4?0:1;
                        _zZ_[5] = _zT_;
                        var _zU_=b3?1:0;
                        _zZ_[6] = _zU_;
                        var _zV_=b2?-663730172:1056320505;
                        _zZ_[7] = _zV_;
                        _zZ_[8] = b1;
                        _zZ_[9] = b0;
                        var lcd_enable_after=_z4_[8][2];
                        if(lcd_enable_before)
                         {if(! lcd_enable_after)
                           {reset_ly(_z4_[9]);
                            _z4_[11] = 0;
                            _z4_[12] = 1;
                            return set_gpu_mode(_z4_[7],2)}}
                        else
                         if(lcd_enable_after)
                          {_z4_[12] = 2;_z4_[11] = 18;return handle_ly_eq_lyc(_z4_)}
                        return 0}
                      throw [0,Invalid_argument,_gw_]}
                    if(accepts$10(_z4_[9],addr))
                     {var _z0_=_z4_[9];
                      if(caml_call2(symbol$5,addr,_z0_[3][1]))
                       {_z0_[3][2] = 0;return 0}
                      var r$0=register_of_addr(_z0_,addr);
                      r$0[2] = data;
                      return 0}
                    var _z1_=caml_call1(show$0,addr);
                    throw [0,Invalid_argument,caml_call1(sprintf(_gB_),_z1_)]}
                  if(accepts$13(t[6],addr))
                   {var
                     _z5_=t[6],
                     match$5=bitflags_of_byte(data),
                     b4$1=match$5[4],
                     b5$1=match$5[3];
                    return b4$1
                            ?b5$1?(_z5_[3] = 0,0):(_z5_[3] = 2,0)
                            :(_z5_[3] = 1,0)}
                  if(accepts$4(t[3],addr))
                   {var _z6_=t[3];
                    if(accepts$4(_z6_,addr))
                     {var
                       offset$2=caml_call2(symbol$4,addr,_z6_[3]),
                       _zN_=caml_call2(symbol$3,_z6_[2],offset$2);
                      return write_byte(_z6_[1],_zN_,data)}
                    var _zO_=caml_call1(show$0,addr);
                    throw [0,Invalid_argument,caml_call1(sprintf(_gj_),_zO_)]}
                  if(accepts$6(t[7],addr))
                   {var _z7_=t[7];
                    if(accepts$5(_z7_[1],addr))
                     return write_byte$0(_z7_[1],addr,data);
                    if(accepts$5(_z7_[2],addr))
                     {write_byte$0(_z7_[2],addr,data);
                      var
                       _zP_=_z7_[3],
                       _zQ_=_zP_?caml_call2(symbol$1,data,129):_zP_;
                      if(_zQ_)
                       {var _zR_=_z7_[1][2];
                        caml_call1(fprintf(stdout,fmt),_zR_);
                        return flush_all(0)}
                      return _zQ_}
                    return failwith(_gp_)}
                  if(accepts(t[8],addr))
                   {var _z8_=t[8];
                    if(caml_equal(addr,_z8_[1][1]))
                     {_z8_[1] = state_of_byte(data,_z8_[1][1]);return 0}
                    if(caml_equal(addr,_z8_[2][1]))
                     {_z8_[2] = state_of_byte(data,_z8_[2][1]);return 0}
                    throw [0,Assert_failure,_gb_]}
                  if(accepts$0(t[9],addr))
                   {var _z9_=t[9];
                    if(caml_equal(addr,_z9_[1]))
                     {_z9_[7] = 0;_z9_[6] = 0;return 0}
                    if(caml_equal(addr,_z9_[2])){_z9_[11] = data;return 0}
                    if(caml_equal(addr,_z9_[3])){_z9_[10] = data;return 0}
                    if(caml_equal(addr,_z9_[4]))
                     {if(caml_call2(symbol$2,caml_call2(land,data,4),zero))
                       _z9_[8] = 1;
                      var match=data & 3;
                      if(3 < match >>> 0)throw [0,Assert_failure,_gd_];
                      switch(match)
                       {case 0:var _zz_=0;break;
                        case 1:var _zz_=1;break;
                        case 2:var _zz_=2;break;
                        default:var _zz_=3}
                      _z9_[9] = _zz_;
                      return 0}
                    throw [0,Assert_failure,_ge_]}
                  if(accepts$5(t[10],addr))
                   {write_byte$0(t[10],addr,data);
                    var source=caml_call2(lsl$0,data & 65535,8),i$0=0;
                    for(;;)
                     {var
                       data$0=
                        read_byte$2(t,caml_call2(symbol$3,source,i$0 & 65535)),
                       _z2_=t[4][3];
                      write_byte$2
                       (_z2_,caml_call2(symbol$3,_z2_[2],i$0 & 65535),data$0);
                      var _z3_=i$0 + 1 | 0;
                      if(159 !== i$0){var i$0=_z3_;continue}
                      return 0}}
                  return 0},
               read_word=
                function(t,addr)
                 {var lo=read_byte$2(t,addr),hi=read_byte$2(t,succ$0(addr));
                  return ((hi << 8) + lo | 0) & 65535},
               write_word=
                function(t,addr,data)
                 {var hi=(data >>> 8 | 0) & 255,lo=data & 255 & 255;
                  write_byte$3(t,addr,lo);
                  return write_byte$3(t,succ$0(addr),hi)},
               x00=0,
               x08=8,
               x10=16,
               x18=24,
               x20=32,
               x28=40,
               x30=48,
               x38=56,
               l1=1,
               l2=2,
               l3=3,
               ly_addr=65348,
               addr=65345,
               press=
                function(t,key)
                 {var _zv_=t[4];
                  request(_zv_[2],4);
                  switch(key)
                   {case 0:_zv_[4] = 0;return 0;
                    case 1:_zv_[5] = 0;return 0;
                    case 2:_zv_[6] = 0;return 0;
                    case 3:_zv_[7] = 0;return 0;
                    case 4:_zv_[8] = 0;return 0;
                    case 5:_zv_[9] = 0;return 0;
                    case 6:_zv_[10] = 0;return 0;
                    default:_zv_[11] = 0;return 0}},
               release=
                function(t,key)
                 {var _zu_=t[4];
                  switch(key)
                   {case 0:_zu_[4] = 1;return 0;
                    case 1:_zu_[5] = 1;return 0;
                    case 2:_zu_[6] = 1;return 0;
                    case 3:_zu_[7] = 1;return 0;
                    case 4:_zu_[8] = 1;return 0;
                    case 5:_zu_[9] = 1;return 0;
                    case 6:_zu_[10] = 1;return 0;
                    default:_zu_[11] = 1;return 0}},
               cartridge=cartridge$0[1](rom_bytes),
               wram=create$0(49152,57343),
               shadow_ram=[0,wram,49152,57344,65023],
               zero_page=create$0(65408,65534),
               opt=[0,1],
               sc=create$1(65282,18373,0,0),
               sb=create$1(65281,18373,0,0),
               print_serial_port$0=1,
               print_serial_port=opt?print_serial_port$0:0,
               serial_port=[0,sb,sc,print_serial_port],
               ic=[0,[0,65535,0,0,0,0,0],[0,65295,0,0,0,0,0]],
               end_addr=38911,
               start_addr=32768,
               f=function(param){return create_matrix(8,8,0)},
               tiles=caml_make_vect(384,f(0)),
               i=1;
              for(;;)
               {tiles[1 + i] = f(i);
                var _xQ_=i + 1 | 0;
                if(383 !== i){var i=_xQ_;continue}
                var
                 tile_data=[0,tiles,start_addr,end_addr],
                 _xR_=create_matrix(32,32,zero),
                 tile_map=
                  [0,create_matrix(32,32,zero),_xR_,38912,39935,39936,40959],
                 default_sprite=
                  [0,0,0,zero,-259427781,0,0,879375795,-1058811692,0],
                 sprites=caml_make_vect(40,default_sprite),
                 oam_table=[0,sprites,65024,65183],
                 lcd_stat=[0,addr,0,0,0,0,0,0],
                 joypad=[0,65280,ic,1,1,1,1,1,1,1,1,1],
                 lcd_position=
                  [0,
                   [0,65346,0],
                   [0,65347,0],
                   [0,ly_addr,0],
                   [0,65349,0],
                   [0,65354,0],
                   [0,65355,0]],
                 lcd_control=[0,65344,1,0,0,0,0,1056320505,0,1],
                 obp1=create$2(65353),
                 obp0=create$2(65352),
                 bgp=create$2(65351),
                 gpu=
                  [0,
                   tile_data,
                   tile_map,
                   oam_table,
                   bgp,
                   obp0,
                   obp1,
                   lcd_stat,
                   lcd_control,
                   lcd_position,
                   ic,
                   0,
                   0,
                   create_matrix(screen_h,screen_w,-588596599)];
                handle_ly_eq_lyc(gpu);
                var
                 timer=[0,65284,65285,65286,65287,ic,0,0,0,0,0,0],
                 dma_transfer=create$1(65350,18373,0,0),
                 mmu=
                  [0,
                   cartridge,
                   wram,
                   shadow_ram,
                   gpu,
                   zero_page,
                   joypad,
                   serial_port,
                   ic,
                   timer,
                   dma_transfer],
                 registers=[0,zero,zero,zero,zero,zero,zero,zero,zero],
                 cpu=[0,registers,256,65534,mmu,0,0,0,4,ic];
                set_flags(registers,_w4_,_w3_,_w2_,_w1_,0);
                iter
                 (function(param)
                   {var data=param[2],reg=param[1];
                    return write_rr(registers,reg,data & 65535)},
                  _w5_);
                iter
                 (function(param)
                   {var data=param[2],addr=param[1];
                    return write_byte$3(mmu,addr & 65535,data & 255)},
                  _w6_);
                set_gpu_mode(lcd_stat,3);
                gpu[11] = 0;
                var
                 t=[0,cpu,timer,gpu,joypad],
                 down=
                  function(ev)
                   {var key_name=caml_string_of_jsstring(ev.key);
                    return caml_string_notequal(key_name,_w7_)
                            ?caml_string_notequal(key_name,_w8_)
                              ?caml_string_notequal(key_name,_w9_)
                                ?caml_string_notequal(key_name,_w__)
                                  ?caml_string_notequal(key_name,_w$_)
                                    ?caml_string_notequal(key_name,_xa_)
                                      ?caml_string_notequal(key_name,_xb_)
                                        ?caml_string_notequal(key_name,_xc_)?0:press(t,1)
                                        :press(t,0)
                                      :press(t,7)
                                    :press(t,6)
                                  :press(t,3)
                                :press(t,2)
                              :press(t,5)
                            :press(t,4)},
                 up=
                  function(ev)
                   {var key_name=caml_string_of_jsstring(ev.key);
                    return caml_string_notequal(key_name,_xd_)
                            ?caml_string_notequal(key_name,_xe_)
                              ?caml_string_notequal(key_name,_xf_)
                                ?caml_string_notequal(key_name,_xg_)
                                  ?caml_string_notequal(key_name,_xh_)
                                    ?caml_string_notequal(key_name,_xi_)
                                      ?caml_string_notequal(key_name,_xj_)
                                        ?caml_string_notequal(key_name,_xk_)?0:release(t,1)
                                        :release(t,0)
                                      :release(t,7)
                                    :release(t,6)
                                  :release(t,3)
                                :release(t,2)
                              :release(t,5)
                            :release(t,4)};
                listen(0,keydown,down,target);
                listen(0,keyup,up,target);
                key_down_listener[1] = [0,down];
                key_up_listener[1] = [0,up];
                var
                 right_el=find_el_by_id(_xl_),
                 left_el=find_el_by_id(_xm_),
                 down_el=find_el_by_id(_xn_),
                 up_el=find_el_by_id(_xo_),
                 b_el=find_el_by_id(_xp_),
                 a_el=find_el_by_id(_xq_),
                 select_el=find_el_by_id(_xr_),
                 start_el=find_el_by_id(_xs_),
                 press$0=
                  function(ev,t,key)
                   {prevent_default(ev);
                    navigator.vibrate(10);
                    return press(t,key)},
                 release$0=
                  function(ev,t,key)
                   {prevent_default(ev);return release(t,key)},
                 listen_ops={};
                set_if_some(listen_ops,_bQ_,capture);
                set_if_some(listen_ops,_bR_,0);
                set_if_some(listen_ops,_bS_,0);
                listen
                 ([0,listen_ops],
                  touchstart,
                  function(ev){return press$0(ev,t,1)},
                  up_el);
                listen
                 ([0,listen_ops],
                  touchstart,
                  function(ev){return press$0(ev,t,0)},
                  down_el);
                listen
                 ([0,listen_ops],
                  touchstart,
                  function(ev){return press$0(ev,t,2)},
                  left_el);
                listen
                 ([0,listen_ops],
                  touchstart,
                  function(ev){return press$0(ev,t,3)},
                  right_el);
                listen
                 ([0,listen_ops],
                  touchstart,
                  function(ev){return press$0(ev,t,7)},
                  a_el);
                listen
                 ([0,listen_ops],
                  touchstart,
                  function(ev){return press$0(ev,t,6)},
                  b_el);
                listen
                 ([0,listen_ops],
                  touchstart,
                  function(ev){return press$0(ev,t,4)},
                  start_el);
                listen
                 ([0,listen_ops],
                  touchstart,
                  function(ev){return press$0(ev,t,5)},
                  select_el);
                listen
                 ([0,listen_ops],
                  touchend,
                  function(ev){return release$0(ev,t,1)},
                  up_el);
                listen
                 ([0,listen_ops],
                  touchend,
                  function(ev){return release$0(ev,t,0)},
                  down_el);
                listen
                 ([0,listen_ops],
                  touchend,
                  function(ev){return release$0(ev,t,2)},
                  left_el);
                listen
                 ([0,listen_ops],
                  touchend,
                  function(ev){return release$0(ev,t,3)},
                  right_el);
                listen
                 ([0,listen_ops],
                  touchend,
                  function(ev){return release$0(ev,t,7)},
                  a_el);
                listen
                 ([0,listen_ops],
                  touchend,
                  function(ev){return release$0(ev,t,6)},
                  b_el);
                listen
                 ([0,listen_ops],
                  touchend,
                  function(ev){return release$0(ev,t,4)},
                  start_el);
                listen
                 ([0,listen_ops],
                  touchend,
                  function(ev){return release$0(ev,t,5)},
                  select_el);
                var
                 cnt=[0,0],
                 start_time=[0,performance.now()],
                 f$0=
                  function(param)
                   {for(;;)
                     {var _y__=t[1];
                      if(_y__[7]){_y__[6] = 1;_y__[7] = 0}
                      if(_y__[5])
                       var inst_mcycles=4;
                      else
                       {var
                         _y3_=_y__[2],
                         _y4_=_y__[4],
                         addr_after_pc=succ$0(_y3_),
                         next_byte$0=
                          function(addr_after_pc,_zt_)
                           {function next_byte(param)
                             {return read_byte$2(_zt_,addr_after_pc)}
                            return next_byte},
                         next_byte=next_byte$0(addr_after_pc,_y4_),
                         next_word$0=
                          function(addr_after_pc,_zs_)
                           {function next_word(param)
                             {return read_word(_zs_,addr_after_pc)}
                            return next_word},
                         next_word=next_word$0(addr_after_pc,_y4_),
                         op=read_byte$2(_y4_,_y3_);
                        if(255 < op >>> 0)
                         var match$3=failwith(caml_call1(sprintf(_gC_),op));
                        else
                         {var _zb_=op;
                          if(128 <= _zb_)
                           if(192 <= _zb_)
                            if(224 <= _zb_)
                             switch(_zb_)
                              {case 224:
                                var match$3=[0,l2,_u5_,[0,[7,next_byte(0)],_u4_]];break;
                               case 225:var match$3=[0,l1,_u7_,_u6_];break;
                               case 226:var match$3=[0,l1,_u9_,_u8_];break;
                               case 227:var match$3=[0,l1,_u__,4];break;
                               case 228:var match$3=[0,l1,_u$_,4];break;
                               case 229:var match$3=[0,l1,_vb_,_va_];break;
                               case 230:
                                var match$3=[0,l2,_vd_,[8,_vc_,[0,next_byte(0)]]];break;
                               case 231:var match$3=[0,l1,_ve_,[32,x20]];break;
                               case 232:var match$3=[0,l2,_vf_,[4,next_byte(0)]];break;
                               case 233:var match$3=[0,l1,_vh_,_vg_];break;
                               case 234:
                                var match$3=[0,l3,_vj_,[0,[2,next_word(0)],_vi_]];break;
                               case 235:var match$3=[0,l1,_vk_,4];break;
                               case 236:var match$3=[0,l1,_vl_,4];break;
                               case 237:var match$3=[0,l1,_vm_,4];break;
                               case 238:
                                var match$3=[0,l2,_vo_,[10,_vn_,[0,next_byte(0)]]];break;
                               case 239:var match$3=[0,l1,_vp_,[32,x28]];break;
                               case 240:
                                var match$3=[0,l2,_vr_,[0,_vq_,[7,next_byte(0)]]];break;
                               case 241:var match$3=[0,l1,_vt_,_vs_];break;
                               case 242:var match$3=[0,l1,_vv_,_vu_];break;
                               case 243:var match$3=[0,l1,_vw_,7];break;
                               case 244:var match$3=[0,l1,_vx_,4];break;
                               case 245:var match$3=[0,l1,_vz_,_vy_];break;
                               case 246:
                                var match$3=[0,l2,_vB_,[9,_vA_,[0,next_byte(0)]]];break;
                               case 247:var match$3=[0,l1,_vC_,[32,x30]];break;
                               case 248:
                                var match$3=[0,l2,_vE_,[1,_vD_,[8,next_byte(0)]]];break;
                               case 249:var match$3=[0,l1,_vG_,_vF_];break;
                               case 250:
                                var match$3=[0,l3,_vI_,[0,_vH_,[2,next_word(0)]]];break;
                               case 251:var match$3=[0,l1,_vJ_,8];break;
                               case 252:var match$3=[0,l1,_vK_,4];break;
                               case 253:var match$3=[0,l1,_vL_,4];break;
                               case 254:
                                var match$3=[0,l2,_vN_,[11,_vM_,[0,next_byte(0)]]];break;
                               default:var match$3=[0,l1,_vO_,[32,x38]]}
                            else
                             switch(_zb_)
                              {case 192:var match$3=[0,l1,_mm_,_ml_];break;
                               case 193:var match$3=[0,l1,_mo_,_mn_];break;
                               case 194:
                                var match$3=[0,l3,_mp_,[29,1,[1,next_word(0)]]];break;
                               case 195:
                                var match$3=[0,l3,_mq_,[29,0,[1,next_word(0)]]];break;
                               case 196:var match$3=[0,l3,_mr_,[31,1,next_word(0)]];break;
                               case 197:var match$3=[0,l1,_mt_,_ms_];break;
                               case 198:
                                var match$3=[0,l2,_mv_,[2,_mu_,[0,next_byte(0)]]];break;
                               case 199:var match$3=[0,l1,_mw_,[32,x00]];break;
                               case 200:var match$3=[0,l1,_my_,_mx_];break;
                               case 201:var match$3=[0,l1,_mA_,_mz_];break;
                               case 202:
                                var match$3=[0,l3,_mB_,[29,2,[1,next_word(0)]]];break;
                               case 203:
                                var op$0=next_byte(0);
                                if(255 < op$0 >>> 0)
                                 var match$3=failwith(caml_call1(sprintf(_mC_),op$0));
                                else
                                 {var _zc_=op$0;
                                  if(128 <= _zc_)
                                   if(192 <= _zc_)
                                    if(224 <= _zc_)
                                     switch(_zc_)
                                      {case 224:var match$3=[0,l2,_tE_,_tD_];break;
                                       case 225:var match$3=[0,l2,_tG_,_tF_];break;
                                       case 226:var match$3=[0,l2,_tI_,_tH_];break;
                                       case 227:var match$3=[0,l2,_tK_,_tJ_];break;
                                       case 228:var match$3=[0,l2,_tM_,_tL_];break;
                                       case 229:var match$3=[0,l2,_tO_,_tN_];break;
                                       case 230:var match$3=[0,l2,_tQ_,_tP_];break;
                                       case 231:var match$3=[0,l2,_tS_,_tR_];break;
                                       case 232:var match$3=[0,l2,_tU_,_tT_];break;
                                       case 233:var match$3=[0,l2,_tW_,_tV_];break;
                                       case 234:var match$3=[0,l2,_tY_,_tX_];break;
                                       case 235:var match$3=[0,l2,_t0_,_tZ_];break;
                                       case 236:var match$3=[0,l2,_t2_,_t1_];break;
                                       case 237:var match$3=[0,l2,_t4_,_t3_];break;
                                       case 238:var match$3=[0,l2,_t6_,_t5_];break;
                                       case 239:var match$3=[0,l2,_t8_,_t7_];break;
                                       case 240:var match$3=[0,l2,_t__,_t9_];break;
                                       case 241:var match$3=[0,l2,_ua_,_t$_];break;
                                       case 242:var match$3=[0,l2,_uc_,_ub_];break;
                                       case 243:var match$3=[0,l2,_ue_,_ud_];break;
                                       case 244:var match$3=[0,l2,_ug_,_uf_];break;
                                       case 245:var match$3=[0,l2,_ui_,_uh_];break;
                                       case 246:var match$3=[0,l2,_uk_,_uj_];break;
                                       case 247:var match$3=[0,l2,_um_,_ul_];break;
                                       case 248:var match$3=[0,l2,_uo_,_un_];break;
                                       case 249:var match$3=[0,l2,_uq_,_up_];break;
                                       case 250:var match$3=[0,l2,_us_,_ur_];break;
                                       case 251:var match$3=[0,l2,_uu_,_ut_];break;
                                       case 252:var match$3=[0,l2,_uw_,_uv_];break;
                                       case 253:var match$3=[0,l2,_uy_,_ux_];break;
                                       case 254:var match$3=[0,l2,_uA_,_uz_];break;
                                       default:var match$3=[0,l2,_uC_,_uB_]}
                                    else
                                     switch(_zc_)
                                      {case 192:var match$3=[0,l2,_sE_,_sD_];break;
                                       case 193:var match$3=[0,l2,_sG_,_sF_];break;
                                       case 194:var match$3=[0,l2,_sI_,_sH_];break;
                                       case 195:var match$3=[0,l2,_sK_,_sJ_];break;
                                       case 196:var match$3=[0,l2,_sM_,_sL_];break;
                                       case 197:var match$3=[0,l2,_sO_,_sN_];break;
                                       case 198:var match$3=[0,l2,_sQ_,_sP_];break;
                                       case 199:var match$3=[0,l2,_sS_,_sR_];break;
                                       case 200:var match$3=[0,l2,_sU_,_sT_];break;
                                       case 201:var match$3=[0,l2,_sW_,_sV_];break;
                                       case 202:var match$3=[0,l2,_sY_,_sX_];break;
                                       case 203:var match$3=[0,l2,_s0_,_sZ_];break;
                                       case 204:var match$3=[0,l2,_s2_,_s1_];break;
                                       case 205:var match$3=[0,l2,_s4_,_s3_];break;
                                       case 206:var match$3=[0,l2,_s6_,_s5_];break;
                                       case 207:var match$3=[0,l2,_s8_,_s7_];break;
                                       case 208:var match$3=[0,l2,_s__,_s9_];break;
                                       case 209:var match$3=[0,l2,_ta_,_s$_];break;
                                       case 210:var match$3=[0,l2,_tc_,_tb_];break;
                                       case 211:var match$3=[0,l2,_te_,_td_];break;
                                       case 212:var match$3=[0,l2,_tg_,_tf_];break;
                                       case 213:var match$3=[0,l2,_ti_,_th_];break;
                                       case 214:var match$3=[0,l2,_tk_,_tj_];break;
                                       case 215:var match$3=[0,l2,_tm_,_tl_];break;
                                       case 216:var match$3=[0,l2,_to_,_tn_];break;
                                       case 217:var match$3=[0,l2,_tq_,_tp_];break;
                                       case 218:var match$3=[0,l2,_ts_,_tr_];break;
                                       case 219:var match$3=[0,l2,_tu_,_tt_];break;
                                       case 220:var match$3=[0,l2,_tw_,_tv_];break;
                                       case 221:var match$3=[0,l2,_ty_,_tx_];break;
                                       case 222:var match$3=[0,l2,_tA_,_tz_];break;
                                       default:var match$3=[0,l2,_tC_,_tB_]}
                                   else
                                    if(160 <= _zc_)
                                     switch(_zc_)
                                      {case 160:var match$3=[0,l2,_rE_,_rD_];break;
                                       case 161:var match$3=[0,l2,_rG_,_rF_];break;
                                       case 162:var match$3=[0,l2,_rI_,_rH_];break;
                                       case 163:var match$3=[0,l2,_rK_,_rJ_];break;
                                       case 164:var match$3=[0,l2,_rM_,_rL_];break;
                                       case 165:var match$3=[0,l2,_rO_,_rN_];break;
                                       case 166:var match$3=[0,l2,_rQ_,_rP_];break;
                                       case 167:var match$3=[0,l2,_rS_,_rR_];break;
                                       case 168:var match$3=[0,l2,_rU_,_rT_];break;
                                       case 169:var match$3=[0,l2,_rW_,_rV_];break;
                                       case 170:var match$3=[0,l2,_rY_,_rX_];break;
                                       case 171:var match$3=[0,l2,_r0_,_rZ_];break;
                                       case 172:var match$3=[0,l2,_r2_,_r1_];break;
                                       case 173:var match$3=[0,l2,_r4_,_r3_];break;
                                       case 174:var match$3=[0,l2,_r6_,_r5_];break;
                                       case 175:var match$3=[0,l2,_r8_,_r7_];break;
                                       case 176:var match$3=[0,l2,_r__,_r9_];break;
                                       case 177:var match$3=[0,l2,_sa_,_r$_];break;
                                       case 178:var match$3=[0,l2,_sc_,_sb_];break;
                                       case 179:var match$3=[0,l2,_se_,_sd_];break;
                                       case 180:var match$3=[0,l2,_sg_,_sf_];break;
                                       case 181:var match$3=[0,l2,_si_,_sh_];break;
                                       case 182:var match$3=[0,l2,_sk_,_sj_];break;
                                       case 183:var match$3=[0,l2,_sm_,_sl_];break;
                                       case 184:var match$3=[0,l2,_so_,_sn_];break;
                                       case 185:var match$3=[0,l2,_sq_,_sp_];break;
                                       case 186:var match$3=[0,l2,_ss_,_sr_];break;
                                       case 187:var match$3=[0,l2,_su_,_st_];break;
                                       case 188:var match$3=[0,l2,_sw_,_sv_];break;
                                       case 189:var match$3=[0,l2,_sy_,_sx_];break;
                                       case 190:var match$3=[0,l2,_sA_,_sz_];break;
                                       default:var match$3=[0,l2,_sC_,_sB_]}
                                    else
                                     switch(_zc_)
                                      {case 128:var match$3=[0,l2,_qE_,_qD_];break;
                                       case 129:var match$3=[0,l2,_qG_,_qF_];break;
                                       case 130:var match$3=[0,l2,_qI_,_qH_];break;
                                       case 131:var match$3=[0,l2,_qK_,_qJ_];break;
                                       case 132:var match$3=[0,l2,_qM_,_qL_];break;
                                       case 133:var match$3=[0,l2,_qO_,_qN_];break;
                                       case 134:var match$3=[0,l2,_qQ_,_qP_];break;
                                       case 135:var match$3=[0,l2,_qS_,_qR_];break;
                                       case 136:var match$3=[0,l2,_qU_,_qT_];break;
                                       case 137:var match$3=[0,l2,_qW_,_qV_];break;
                                       case 138:var match$3=[0,l2,_qY_,_qX_];break;
                                       case 139:var match$3=[0,l2,_q0_,_qZ_];break;
                                       case 140:var match$3=[0,l2,_q2_,_q1_];break;
                                       case 141:var match$3=[0,l2,_q4_,_q3_];break;
                                       case 142:var match$3=[0,l2,_q6_,_q5_];break;
                                       case 143:var match$3=[0,l2,_q8_,_q7_];break;
                                       case 144:var match$3=[0,l2,_q__,_q9_];break;
                                       case 145:var match$3=[0,l2,_ra_,_q$_];break;
                                       case 146:var match$3=[0,l2,_rc_,_rb_];break;
                                       case 147:var match$3=[0,l2,_re_,_rd_];break;
                                       case 148:var match$3=[0,l2,_rg_,_rf_];break;
                                       case 149:var match$3=[0,l2,_ri_,_rh_];break;
                                       case 150:var match$3=[0,l2,_rk_,_rj_];break;
                                       case 151:var match$3=[0,l2,_rm_,_rl_];break;
                                       case 152:var match$3=[0,l2,_ro_,_rn_];break;
                                       case 153:var match$3=[0,l2,_rq_,_rp_];break;
                                       case 154:var match$3=[0,l2,_rs_,_rr_];break;
                                       case 155:var match$3=[0,l2,_ru_,_rt_];break;
                                       case 156:var match$3=[0,l2,_rw_,_rv_];break;
                                       case 157:var match$3=[0,l2,_ry_,_rx_];break;
                                       case 158:var match$3=[0,l2,_rA_,_rz_];break;
                                       default:var match$3=[0,l2,_rC_,_rB_]}
                                  else
                                   if(64 <= _zc_)
                                    if(96 <= _zc_)
                                     switch(_zc_)
                                      {case 96:var match$3=[0,l2,_pE_,_pD_];break;
                                       case 97:var match$3=[0,l2,_pG_,_pF_];break;
                                       case 98:var match$3=[0,l2,_pI_,_pH_];break;
                                       case 99:var match$3=[0,l2,_pK_,_pJ_];break;
                                       case 100:var match$3=[0,l2,_pM_,_pL_];break;
                                       case 101:var match$3=[0,l2,_pO_,_pN_];break;
                                       case 102:var match$3=[0,l2,_pQ_,_pP_];break;
                                       case 103:var match$3=[0,l2,_pS_,_pR_];break;
                                       case 104:var match$3=[0,l2,_pU_,_pT_];break;
                                       case 105:var match$3=[0,l2,_pW_,_pV_];break;
                                       case 106:var match$3=[0,l2,_pY_,_pX_];break;
                                       case 107:var match$3=[0,l2,_p0_,_pZ_];break;
                                       case 108:var match$3=[0,l2,_p2_,_p1_];break;
                                       case 109:var match$3=[0,l2,_p4_,_p3_];break;
                                       case 110:var match$3=[0,l2,_p6_,_p5_];break;
                                       case 111:var match$3=[0,l2,_p8_,_p7_];break;
                                       case 112:var match$3=[0,l2,_p__,_p9_];break;
                                       case 113:var match$3=[0,l2,_qa_,_p$_];break;
                                       case 114:var match$3=[0,l2,_qc_,_qb_];break;
                                       case 115:var match$3=[0,l2,_qe_,_qd_];break;
                                       case 116:var match$3=[0,l2,_qg_,_qf_];break;
                                       case 117:var match$3=[0,l2,_qi_,_qh_];break;
                                       case 118:var match$3=[0,l2,_qk_,_qj_];break;
                                       case 119:var match$3=[0,l2,_qm_,_ql_];break;
                                       case 120:var match$3=[0,l2,_qo_,_qn_];break;
                                       case 121:var match$3=[0,l2,_qq_,_qp_];break;
                                       case 122:var match$3=[0,l2,_qs_,_qr_];break;
                                       case 123:var match$3=[0,l2,_qu_,_qt_];break;
                                       case 124:var match$3=[0,l2,_qw_,_qv_];break;
                                       case 125:var match$3=[0,l2,_qy_,_qx_];break;
                                       case 126:var match$3=[0,l2,_qA_,_qz_];break;
                                       default:var match$3=[0,l2,_qC_,_qB_]}
                                    else
                                     switch(_zc_)
                                      {case 64:var match$3=[0,l2,_oE_,_oD_];break;
                                       case 65:var match$3=[0,l2,_oG_,_oF_];break;
                                       case 66:var match$3=[0,l2,_oI_,_oH_];break;
                                       case 67:var match$3=[0,l2,_oK_,_oJ_];break;
                                       case 68:var match$3=[0,l2,_oM_,_oL_];break;
                                       case 69:var match$3=[0,l2,_oO_,_oN_];break;
                                       case 70:var match$3=[0,l2,_oQ_,_oP_];break;
                                       case 71:var match$3=[0,l2,_oS_,_oR_];break;
                                       case 72:var match$3=[0,l2,_oU_,_oT_];break;
                                       case 73:var match$3=[0,l2,_oW_,_oV_];break;
                                       case 74:var match$3=[0,l2,_oY_,_oX_];break;
                                       case 75:var match$3=[0,l2,_o0_,_oZ_];break;
                                       case 76:var match$3=[0,l2,_o2_,_o1_];break;
                                       case 77:var match$3=[0,l2,_o4_,_o3_];break;
                                       case 78:var match$3=[0,l2,_o6_,_o5_];break;
                                       case 79:var match$3=[0,l2,_o8_,_o7_];break;
                                       case 80:var match$3=[0,l2,_o__,_o9_];break;
                                       case 81:var match$3=[0,l2,_pa_,_o$_];break;
                                       case 82:var match$3=[0,l2,_pc_,_pb_];break;
                                       case 83:var match$3=[0,l2,_pe_,_pd_];break;
                                       case 84:var match$3=[0,l2,_pg_,_pf_];break;
                                       case 85:var match$3=[0,l2,_pi_,_ph_];break;
                                       case 86:var match$3=[0,l2,_pk_,_pj_];break;
                                       case 87:var match$3=[0,l2,_pm_,_pl_];break;
                                       case 88:var match$3=[0,l2,_po_,_pn_];break;
                                       case 89:var match$3=[0,l2,_pq_,_pp_];break;
                                       case 90:var match$3=[0,l2,_ps_,_pr_];break;
                                       case 91:var match$3=[0,l2,_pu_,_pt_];break;
                                       case 92:var match$3=[0,l2,_pw_,_pv_];break;
                                       case 93:var match$3=[0,l2,_py_,_px_];break;
                                       case 94:var match$3=[0,l2,_pA_,_pz_];break;
                                       default:var match$3=[0,l2,_pC_,_pB_]}
                                   else
                                    if(32 <= _zc_)
                                     switch(_zc_)
                                      {case 32:var match$3=[0,l2,_nE_,_nD_];break;
                                       case 33:var match$3=[0,l2,_nG_,_nF_];break;
                                       case 34:var match$3=[0,l2,_nI_,_nH_];break;
                                       case 35:var match$3=[0,l2,_nK_,_nJ_];break;
                                       case 36:var match$3=[0,l2,_nM_,_nL_];break;
                                       case 37:var match$3=[0,l2,_nO_,_nN_];break;
                                       case 38:var match$3=[0,l2,_nQ_,_nP_];break;
                                       case 39:var match$3=[0,l2,_nS_,_nR_];break;
                                       case 40:var match$3=[0,l2,_nU_,_nT_];break;
                                       case 41:var match$3=[0,l2,_nW_,_nV_];break;
                                       case 42:var match$3=[0,l2,_nY_,_nX_];break;
                                       case 43:var match$3=[0,l2,_n0_,_nZ_];break;
                                       case 44:var match$3=[0,l2,_n2_,_n1_];break;
                                       case 45:var match$3=[0,l2,_n4_,_n3_];break;
                                       case 46:var match$3=[0,l2,_n6_,_n5_];break;
                                       case 47:var match$3=[0,l2,_n8_,_n7_];break;
                                       case 48:var match$3=[0,l2,_n__,_n9_];break;
                                       case 49:var match$3=[0,l2,_oa_,_n$_];break;
                                       case 50:var match$3=[0,l2,_oc_,_ob_];break;
                                       case 51:var match$3=[0,l2,_oe_,_od_];break;
                                       case 52:var match$3=[0,l2,_og_,_of_];break;
                                       case 53:var match$3=[0,l2,_oi_,_oh_];break;
                                       case 54:var match$3=[0,l2,_ok_,_oj_];break;
                                       case 55:var match$3=[0,l2,_om_,_ol_];break;
                                       case 56:var match$3=[0,l2,_oo_,_on_];break;
                                       case 57:var match$3=[0,l2,_oq_,_op_];break;
                                       case 58:var match$3=[0,l2,_os_,_or_];break;
                                       case 59:var match$3=[0,l2,_ou_,_ot_];break;
                                       case 60:var match$3=[0,l2,_ow_,_ov_];break;
                                       case 61:var match$3=[0,l2,_oy_,_ox_];break;
                                       case 62:var match$3=[0,l2,_oA_,_oz_];break;
                                       default:var match$3=[0,l2,_oC_,_oB_]}
                                    else
                                     switch(_zc_)
                                      {case 0:var match$3=[0,l2,_mE_,_mD_];break;
                                       case 1:var match$3=[0,l2,_mG_,_mF_];break;
                                       case 2:var match$3=[0,l2,_mI_,_mH_];break;
                                       case 3:var match$3=[0,l2,_mK_,_mJ_];break;
                                       case 4:var match$3=[0,l2,_mM_,_mL_];break;
                                       case 5:var match$3=[0,l2,_mO_,_mN_];break;
                                       case 6:var match$3=[0,l2,_mQ_,_mP_];break;
                                       case 7:var match$3=[0,l2,_mS_,_mR_];break;
                                       case 8:var match$3=[0,l2,_mU_,_mT_];break;
                                       case 9:var match$3=[0,l2,_mW_,_mV_];break;
                                       case 10:var match$3=[0,l2,_mY_,_mX_];break;
                                       case 11:var match$3=[0,l2,_m0_,_mZ_];break;
                                       case 12:var match$3=[0,l2,_m2_,_m1_];break;
                                       case 13:var match$3=[0,l2,_m4_,_m3_];break;
                                       case 14:var match$3=[0,l2,_m6_,_m5_];break;
                                       case 15:var match$3=[0,l2,_m8_,_m7_];break;
                                       case 16:var match$3=[0,l2,_m__,_m9_];break;
                                       case 17:var match$3=[0,l2,_na_,_m$_];break;
                                       case 18:var match$3=[0,l2,_nc_,_nb_];break;
                                       case 19:var match$3=[0,l2,_ne_,_nd_];break;
                                       case 20:var match$3=[0,l2,_ng_,_nf_];break;
                                       case 21:var match$3=[0,l2,_ni_,_nh_];break;
                                       case 22:var match$3=[0,l2,_nk_,_nj_];break;
                                       case 23:var match$3=[0,l2,_nm_,_nl_];break;
                                       case 24:var match$3=[0,l2,_no_,_nn_];break;
                                       case 25:var match$3=[0,l2,_nq_,_np_];break;
                                       case 26:var match$3=[0,l2,_ns_,_nr_];break;
                                       case 27:var match$3=[0,l2,_nu_,_nt_];break;
                                       case 28:var match$3=[0,l2,_nw_,_nv_];break;
                                       case 29:var match$3=[0,l2,_ny_,_nx_];break;
                                       case 30:var match$3=[0,l2,_nA_,_nz_];break;
                                       default:var match$3=[0,l2,_nC_,_nB_]}}
                                break;
                               case 204:var match$3=[0,l3,_uD_,[31,2,next_word(0)]];break;
                               case 205:var match$3=[0,l3,_uE_,[31,0,next_word(0)]];break;
                               case 206:
                                var match$3=[0,l2,_uG_,[5,_uF_,[0,next_byte(0)]]];break;
                               case 207:var match$3=[0,l1,_uH_,[32,x08]];break;
                               case 208:var match$3=[0,l1,_uJ_,_uI_];break;
                               case 209:var match$3=[0,l1,_uL_,_uK_];break;
                               case 210:
                                var match$3=[0,l3,_uM_,[29,3,[1,next_word(0)]]];break;
                               case 211:var match$3=[0,l1,_uN_,4];break;
                               case 212:var match$3=[0,l3,_uO_,[31,3,next_word(0)]];break;
                               case 213:var match$3=[0,l1,_uQ_,_uP_];break;
                               case 214:
                                var match$3=[0,l2,_uS_,[6,_uR_,[0,next_byte(0)]]];break;
                               case 215:var match$3=[0,l1,_uT_,[32,x10]];break;
                               case 216:var match$3=[0,l1,_uV_,_uU_];break;
                               case 217:var match$3=[0,l1,_uW_,13];break;
                               case 218:
                                var match$3=[0,l3,_uX_,[29,4,[1,next_word(0)]]];break;
                               case 219:var match$3=[0,l1,_uY_,4];break;
                               case 220:var match$3=[0,l3,_uZ_,[31,4,next_word(0)]];break;
                               case 221:var match$3=[0,l1,_u0_,4];break;
                               case 222:
                                var match$3=[0,l2,_u2_,[7,_u1_,[0,next_byte(0)]]];break;
                               default:var match$3=[0,l1,_u3_,[32,x18]]}
                           else
                            if(160 <= _zb_)
                             switch(_zb_)
                              {case 160:var match$3=[0,l1,_lm_,_ll_];break;
                               case 161:var match$3=[0,l1,_lo_,_ln_];break;
                               case 162:var match$3=[0,l1,_lq_,_lp_];break;
                               case 163:var match$3=[0,l1,_ls_,_lr_];break;
                               case 164:var match$3=[0,l1,_lu_,_lt_];break;
                               case 165:var match$3=[0,l1,_lw_,_lv_];break;
                               case 166:var match$3=[0,l1,_ly_,_lx_];break;
                               case 167:var match$3=[0,l1,_lA_,_lz_];break;
                               case 168:var match$3=[0,l1,_lC_,_lB_];break;
                               case 169:var match$3=[0,l1,_lE_,_lD_];break;
                               case 170:var match$3=[0,l1,_lG_,_lF_];break;
                               case 171:var match$3=[0,l1,_lI_,_lH_];break;
                               case 172:var match$3=[0,l1,_lK_,_lJ_];break;
                               case 173:var match$3=[0,l1,_lM_,_lL_];break;
                               case 174:var match$3=[0,l1,_lO_,_lN_];break;
                               case 175:var match$3=[0,l1,_lQ_,_lP_];break;
                               case 176:var match$3=[0,l1,_lS_,_lR_];break;
                               case 177:var match$3=[0,l1,_lU_,_lT_];break;
                               case 178:var match$3=[0,l1,_lW_,_lV_];break;
                               case 179:var match$3=[0,l1,_lY_,_lX_];break;
                               case 180:var match$3=[0,l1,_l0_,_lZ_];break;
                               case 181:var match$3=[0,l1,_l2_,_l1_];break;
                               case 182:var match$3=[0,l1,_l4_,_l3_];break;
                               case 183:var match$3=[0,l1,_l6_,_l5_];break;
                               case 184:var match$3=[0,l1,_l8_,_l7_];break;
                               case 185:var match$3=[0,l1,_l__,_l9_];break;
                               case 186:var match$3=[0,l1,_ma_,_l$_];break;
                               case 187:var match$3=[0,l1,_mc_,_mb_];break;
                               case 188:var match$3=[0,l1,_me_,_md_];break;
                               case 189:var match$3=[0,l1,_mg_,_mf_];break;
                               case 190:var match$3=[0,l1,_mi_,_mh_];break;
                               default:var match$3=[0,l1,_mk_,_mj_]}
                            else
                             switch(_zb_)
                              {case 128:var match$3=[0,l1,_km_,_kl_];break;
                               case 129:var match$3=[0,l1,_ko_,_kn_];break;
                               case 130:var match$3=[0,l1,_kq_,_kp_];break;
                               case 131:var match$3=[0,l1,_ks_,_kr_];break;
                               case 132:var match$3=[0,l1,_ku_,_kt_];break;
                               case 133:var match$3=[0,l1,_kw_,_kv_];break;
                               case 134:var match$3=[0,l1,_ky_,_kx_];break;
                               case 135:var match$3=[0,l1,_kA_,_kz_];break;
                               case 136:var match$3=[0,l1,_kC_,_kB_];break;
                               case 137:var match$3=[0,l1,_kE_,_kD_];break;
                               case 138:var match$3=[0,l1,_kG_,_kF_];break;
                               case 139:var match$3=[0,l1,_kI_,_kH_];break;
                               case 140:var match$3=[0,l1,_kK_,_kJ_];break;
                               case 141:var match$3=[0,l1,_kM_,_kL_];break;
                               case 142:var match$3=[0,l1,_kO_,_kN_];break;
                               case 143:var match$3=[0,l1,_kQ_,_kP_];break;
                               case 144:var match$3=[0,l1,_kS_,_kR_];break;
                               case 145:var match$3=[0,l1,_kU_,_kT_];break;
                               case 146:var match$3=[0,l1,_kW_,_kV_];break;
                               case 147:var match$3=[0,l1,_kY_,_kX_];break;
                               case 148:var match$3=[0,l1,_k0_,_kZ_];break;
                               case 149:var match$3=[0,l1,_k2_,_k1_];break;
                               case 150:var match$3=[0,l1,_k4_,_k3_];break;
                               case 151:var match$3=[0,l1,_k6_,_k5_];break;
                               case 152:var match$3=[0,l1,_k8_,_k7_];break;
                               case 153:var match$3=[0,l1,_k__,_k9_];break;
                               case 154:var match$3=[0,l1,_la_,_k$_];break;
                               case 155:var match$3=[0,l1,_lc_,_lb_];break;
                               case 156:var match$3=[0,l1,_le_,_ld_];break;
                               case 157:var match$3=[0,l1,_lg_,_lf_];break;
                               case 158:var match$3=[0,l1,_li_,_lh_];break;
                               default:var match$3=[0,l1,_lk_,_lj_]}
                          else
                           if(64 <= _zb_)
                            if(96 <= _zb_)
                             switch(_zb_)
                              {case 96:var match$3=[0,l1,_jn_,_jm_];break;
                               case 97:var match$3=[0,l1,_jp_,_jo_];break;
                               case 98:var match$3=[0,l1,_jr_,_jq_];break;
                               case 99:var match$3=[0,l1,_jt_,_js_];break;
                               case 100:var match$3=[0,l1,_jv_,_ju_];break;
                               case 101:var match$3=[0,l1,_jx_,_jw_];break;
                               case 102:var match$3=[0,l1,_jz_,_jy_];break;
                               case 103:var match$3=[0,l1,_jB_,_jA_];break;
                               case 104:var match$3=[0,l1,_jD_,_jC_];break;
                               case 105:var match$3=[0,l1,_jF_,_jE_];break;
                               case 106:var match$3=[0,l1,_jH_,_jG_];break;
                               case 107:var match$3=[0,l1,_jJ_,_jI_];break;
                               case 108:var match$3=[0,l1,_jL_,_jK_];break;
                               case 109:var match$3=[0,l1,_jN_,_jM_];break;
                               case 110:var match$3=[0,l1,_jP_,_jO_];break;
                               case 111:var match$3=[0,l1,_jR_,_jQ_];break;
                               case 112:var match$3=[0,l1,_jT_,_jS_];break;
                               case 113:var match$3=[0,l1,_jV_,_jU_];break;
                               case 114:var match$3=[0,l1,_jX_,_jW_];break;
                               case 115:var match$3=[0,l1,_jZ_,_jY_];break;
                               case 116:var match$3=[0,l1,_j1_,_j0_];break;
                               case 117:var match$3=[0,l1,_j3_,_j2_];break;
                               case 118:var match$3=[0,l1,_j4_,5];break;
                               case 119:var match$3=[0,l1,_j6_,_j5_];break;
                               case 120:var match$3=[0,l1,_j8_,_j7_];break;
                               case 121:var match$3=[0,l1,_j__,_j9_];break;
                               case 122:var match$3=[0,l1,_ka_,_j$_];break;
                               case 123:var match$3=[0,l1,_kc_,_kb_];break;
                               case 124:var match$3=[0,l1,_ke_,_kd_];break;
                               case 125:var match$3=[0,l1,_kg_,_kf_];break;
                               case 126:var match$3=[0,l1,_ki_,_kh_];break;
                               default:var match$3=[0,l1,_kk_,_kj_]}
                            else
                             switch(_zb_)
                              {case 64:var match$3=[0,l1,_in_,_im_];break;
                               case 65:var match$3=[0,l1,_ip_,_io_];break;
                               case 66:var match$3=[0,l1,_ir_,_iq_];break;
                               case 67:var match$3=[0,l1,_it_,_is_];break;
                               case 68:var match$3=[0,l1,_iv_,_iu_];break;
                               case 69:var match$3=[0,l1,_ix_,_iw_];break;
                               case 70:var match$3=[0,l1,_iz_,_iy_];break;
                               case 71:var match$3=[0,l1,_iB_,_iA_];break;
                               case 72:var match$3=[0,l1,_iD_,_iC_];break;
                               case 73:var match$3=[0,l1,_iF_,_iE_];break;
                               case 74:var match$3=[0,l1,_iH_,_iG_];break;
                               case 75:var match$3=[0,l1,_iJ_,_iI_];break;
                               case 76:var match$3=[0,l1,_iL_,_iK_];break;
                               case 77:var match$3=[0,l1,_iN_,_iM_];break;
                               case 78:var match$3=[0,l1,_iP_,_iO_];break;
                               case 79:var match$3=[0,l1,_iR_,_iQ_];break;
                               case 80:var match$3=[0,l1,_iT_,_iS_];break;
                               case 81:var match$3=[0,l1,_iV_,_iU_];break;
                               case 82:var match$3=[0,l1,_iX_,_iW_];break;
                               case 83:var match$3=[0,l1,_iZ_,_iY_];break;
                               case 84:var match$3=[0,l1,_i1_,_i0_];break;
                               case 85:var match$3=[0,l1,_i3_,_i2_];break;
                               case 86:var match$3=[0,l1,_i5_,_i4_];break;
                               case 87:var match$3=[0,l1,_i7_,_i6_];break;
                               case 88:var match$3=[0,l1,_i9_,_i8_];break;
                               case 89:var match$3=[0,l1,_i$_,_i__];break;
                               case 90:var match$3=[0,l1,_jb_,_ja_];break;
                               case 91:var match$3=[0,l1,_jd_,_jc_];break;
                               case 92:var match$3=[0,l1,_jf_,_je_];break;
                               case 93:var match$3=[0,l1,_jh_,_jg_];break;
                               case 94:var match$3=[0,l1,_jj_,_ji_];break;
                               default:var match$3=[0,l1,_jl_,_jk_]}
                           else
                            if(32 <= _zb_)
                             switch(_zb_)
                              {case 32:var match$3=[0,l2,_hv_,[30,1,next_byte(0)]];break;
                               case 33:
                                var match$3=[0,l3,_hx_,[1,_hw_,[1,next_word(0)]]];break;
                               case 34:var match$3=[0,l1,_hz_,_hy_];break;
                               case 35:var match$3=[0,l1,_hB_,_hA_];break;
                               case 36:var match$3=[0,l1,_hD_,_hC_];break;
                               case 37:var match$3=[0,l1,_hF_,_hE_];break;
                               case 38:
                                var match$3=[0,l2,_hH_,[0,_hG_,[0,next_byte(0)]]];break;
                               case 39:var match$3=[0,l1,_hI_,0];break;
                               case 40:var match$3=[0,l2,_hJ_,[30,2,next_byte(0)]];break;
                               case 41:var match$3=[0,l1,_hL_,_hK_];break;
                               case 42:var match$3=[0,l1,_hN_,_hM_];break;
                               case 43:var match$3=[0,l1,_hP_,_hO_];break;
                               case 44:var match$3=[0,l1,_hR_,_hQ_];break;
                               case 45:var match$3=[0,l1,_hT_,_hS_];break;
                               case 46:
                                var match$3=[0,l2,_hV_,[0,_hU_,[0,next_byte(0)]]];break;
                               case 47:var match$3=[0,l1,_hW_,1];break;
                               case 48:var match$3=[0,l2,_hX_,[30,3,next_byte(0)]];break;
                               case 49:
                                var match$3=[0,l3,_hY_,[1,3,[1,next_word(0)]]];break;
                               case 50:var match$3=[0,l1,_h0_,_hZ_];break;
                               case 51:var match$3=[0,l1,_h2_,_h1_];break;
                               case 52:var match$3=[0,l1,_h4_,_h3_];break;
                               case 53:var match$3=[0,l1,_h6_,_h5_];break;
                               case 54:
                                var match$3=[0,l2,_h8_,[0,_h7_,[0,next_byte(0)]]];break;
                               case 55:var match$3=[0,l1,_h9_,3];break;
                               case 56:var match$3=[0,l2,_h__,[30,4,next_byte(0)]];break;
                               case 57:var match$3=[0,l1,_ia_,_h$_];break;
                               case 58:var match$3=[0,l1,_ic_,_ib_];break;
                               case 59:var match$3=[0,l1,_ie_,_id_];break;
                               case 60:var match$3=[0,l1,_ig_,_if_];break;
                               case 61:var match$3=[0,l1,_ii_,_ih_];break;
                               case 62:
                                var match$3=[0,l2,_ik_,[0,_ij_,[0,next_byte(0)]]];break;
                               default:var match$3=[0,l1,_il_,2]}
                            else
                             switch(_zb_)
                              {case 0:var match$3=[0,l1,_gD_,4];break;
                               case 1:
                                var match$3=[0,l3,_gF_,[1,_gE_,[1,next_word(0)]]];break;
                               case 2:var match$3=[0,l1,_gH_,_gG_];break;
                               case 3:var match$3=[0,l1,_gJ_,_gI_];break;
                               case 4:var match$3=[0,l1,_gL_,_gK_];break;
                               case 5:var match$3=[0,l1,_gN_,_gM_];break;
                               case 6:
                                var match$3=[0,l2,_gP_,[0,_gO_,[0,next_byte(0)]]];break;
                               case 7:var match$3=[0,l1,_gQ_,9];break;
                               case 8:var match$3=[0,l3,_gR_,[1,[3,next_word(0)],3]];break;
                               case 9:var match$3=[0,l1,_gT_,_gS_];break;
                               case 10:var match$3=[0,l1,_gV_,_gU_];break;
                               case 11:var match$3=[0,l1,_gX_,_gW_];break;
                               case 12:var match$3=[0,l1,_gZ_,_gY_];break;
                               case 13:var match$3=[0,l1,_g1_,_g0_];break;
                               case 14:
                                var match$3=[0,l2,_g3_,[0,_g2_,[0,next_byte(0)]]];break;
                               case 15:var match$3=[0,l1,_g4_,11];break;
                               case 16:next_byte(0);var match$3=[0,l2,_g5_,6];break;
                               case 17:
                                var match$3=[0,l3,_g7_,[1,_g6_,[1,next_word(0)]]];break;
                               case 18:var match$3=[0,l1,_g9_,_g8_];break;
                               case 19:var match$3=[0,l1,_g$_,_g__];break;
                               case 20:var match$3=[0,l1,_hb_,_ha_];break;
                               case 21:var match$3=[0,l1,_hd_,_hc_];break;
                               case 22:
                                var match$3=[0,l2,_hf_,[0,_he_,[0,next_byte(0)]]];break;
                               case 23:var match$3=[0,l1,_hg_,10];break;
                               case 24:var match$3=[0,l2,_hh_,[30,0,next_byte(0)]];break;
                               case 25:var match$3=[0,l1,_hj_,_hi_];break;
                               case 26:var match$3=[0,l1,_hl_,_hk_];break;
                               case 27:var match$3=[0,l1,_hn_,_hm_];break;
                               case 28:var match$3=[0,l1,_hp_,_ho_];break;
                               case 29:var match$3=[0,l1,_hr_,_hq_];break;
                               case 30:
                                var match$3=[0,l2,_ht_,[0,_hs_,[0,next_byte(0)]]];break;
                               default:var match$3=[0,l1,_hu_,12]}}
                        var inst=match$3[3],mcycles=match$3[2],len$1=match$3[1];
                        _y__[2] = caml_call2(symbol$3,_y__[2],len$1);
                        var
                         _y5_=mcycles[1],
                         _y6_=mcycles[2],
                         _ym_=_y__[1],
                         set_flags$1=
                          function(_zm_)
                           {function set_flags$0(_zn_,_zo_,_zp_,_zq_,_zr_)
                             {return set_flags(_zm_,_zn_,_zo_,_zp_,_zq_,_zr_)}
                            return set_flags$0},
                         set_flags$0=set_flags$1(_ym_),
                         read$0=
                          function(set_flags,_zi_)
                           {function read(arg)
                             {if(typeof arg === "number")
                               switch(arg)
                                {case 0:
                                  var
                                   c=read_r(_zi_[1],2),
                                   addr=caml_call2(symbol$3,65280,c & 65535);
                                  return read_byte$2(_zi_[4],addr);
                                 case 1:
                                  var addr$0=read_rr(_zi_[1],3),_zj_=succ$0(addr$0);
                                  write_rr(_zi_[1],3,_zj_);
                                  return read_byte$2(_zi_[4],addr$0);
                                 case 2:
                                  var addr$1=read_rr(_zi_[1],3),_zk_=pred$0(addr$1);
                                  write_rr(_zi_[1],3,_zk_);
                                  return read_byte$2(_zi_[4],addr$1);
                                 default:return _zi_[3]}
                              else
                               switch(arg[0])
                                {case 0:var n=arg[1];return n;
                                 case 1:var n$0=arg[1];return n$0;
                                 case 2:var addr$2=arg[1];return read_byte$2(_zi_[4],addr$2);
                                 case 3:var addr$3=arg[1];return read_word(_zi_[4],addr$3);
                                 case 4:var r=arg[1];return read_r(_zi_[1],r);
                                 case 5:var rr=arg[1];return read_rr(_zi_[1],rr);
                                 case 6:
                                  var rr$0=arg[1],addr$4=read_rr(_zi_[1],rr$0);
                                  return read_byte$2(_zi_[4],addr$4);
                                 case 7:
                                  var
                                   n$1=arg[1],
                                   addr$5=caml_call2(symbol$3,65280,n$1 & 65535);
                                  return read_byte$2(_zi_[4],addr$5);
                                 default:
                                  var n$2=arg[1],_zl_=_zi_[3],n$3=to_int(n$2);
                                  set_flags
                                   ([0,255 < ((_zl_ & 255) + (n$3 & 255) | 0)?1:0],
                                    [0,15 < ((_zl_ & 15) + (n$3 & 15) | 0)?1:0],
                                    _v3_,
                                    _v2_,
                                    0);
                                  return (_zl_ + n$3 | 0) & 65535}}
                            return read},
                         read=read$0(set_flags$0,_y__),
                         symbol$6=
                          function(_zf_)
                           {function symbol(x,y)
                             {if(typeof x === "number")
                               switch(x)
                                {case 0:
                                  var
                                   c=read_r(_zf_[1],2),
                                   addr=caml_call2(symbol$3,65280,c & 65535);
                                  return write_byte$3(_zf_[4],addr,y);
                                 case 1:
                                  var addr$0=read_rr(_zf_[1],3);
                                  write_byte$3(_zf_[4],addr$0,y);
                                  var _zg_=succ$0(addr$0);
                                  return write_rr(_zf_[1],3,_zg_);
                                 case 2:
                                  var addr$1=read_rr(_zf_[1],3);
                                  write_byte$3(_zf_[4],addr$1,y);
                                  var _zh_=pred$0(addr$1);
                                  return write_rr(_zf_[1],3,_zh_);
                                 default:_zf_[3] = y;return 0}
                              else
                               switch(x[0])
                                {case 2:
                                  var addr$2=x[1];return write_byte$3(_zf_[4],addr$2,y);
                                 case 3:var addr$3=x[1];return write_word(_zf_[4],addr$3,y);
                                 case 4:var r=x[1];return write_r(_zf_[1],r,y);
                                 case 5:var rr=x[1];return write_rr(_zf_[1],rr,y);
                                 case 6:
                                  var rr$0=x[1],addr$4=read_rr(_zf_[1],rr$0);
                                  return write_byte$3(_zf_[4],addr$4,y);
                                 case 7:
                                  var n=x[1],addr$5=caml_call2(symbol$3,65280,n & 65535);
                                  return write_byte$3(_zf_[4],addr$5,y);
                                 default:return failwith(sprintf(_v4_))}}
                            return symbol},
                         symbol$5=symbol$6(_y__),
                         check_condition=
                          function(t,param)
                           {switch(param)
                             {case 0:return 1;
                              case 1:return 1 - read_flag(t[1],3);
                              case 2:return read_flag(t[1],3);
                              case 3:return 1 - read_flag(t[1],0);
                              default:return read_flag(t[1],0)}};
                        if(typeof inst === "number")
                         switch(inst)
                          {case 0:
                            var
                             n_flag=read_flag(_y__[1],2),
                             c_flag=read_flag(_y__[1],0),
                             h_flag=read_flag(_y__[1],1),
                             a=[0,read_r(_y__[1],0)];
                            if(n_flag)
                             {if(c_flag)a[1] = caml_call2(symbol$0,a[1],96);
                              if(h_flag)a[1] = caml_call2(symbol$0,a[1],6)}
                            else
                             {var c_flag$0=c_flag || caml_greaterthan(a[1],153);
                              if(c_flag$0)
                               {a[1] = caml_call2(symbol,a[1],96);
                                set_flags$0(_v6_,0,0,0,0)}
                              var
                               h_flag$0=
                                h_flag || caml_greaterthan(caml_call2(land,a[1],15),9);
                              if(h_flag$0)a[1] = caml_call2(symbol,a[1],6)}
                            set_flags$0(0,_v5_,0,[0,caml_call2(symbol$1,a[1],zero)],0);
                            write_r(_y__[1],0,a[1]);
                            var next_pc=0;
                            break;
                           case 1:
                            set_flags$0(0,_v8_,_v7_,0,0);
                            var n=read_r(_y__[1],0),_yn_=caml_call2(lxor,n,max_int);
                            write_r(_y__[1],0,_yn_);
                            var next_pc=0;
                            break;
                           case 2:
                            var c=read_flag(_y__[1],0);
                            set_flags$0([0,1 - c],_v__,_v9_,0,0);
                            var next_pc=0;
                            break;
                           case 3:set_flags$0(_wb_,_wa_,_v$_,0,0);var next_pc=0;break;
                           case 4:var next_pc=0;break;
                           case 5:_y__[5] = 1;var next_pc=0;break;
                           case 6:throw [0,Assert_failure,_wc_];
                           case 7:_y__[7] = 0;_y__[6] = 0;var next_pc=0;break;
                           case 8:_y__[7] = 1;var next_pc=0;break;
                           case 9:
                            var
                             a$0=read_r(_y__[1],0),
                             c$0=caml_call2(symbol$2,caml_call2(land,a$0,128),zero),
                             _yo_=c$0?one:zero,
                             n$0=caml_call2(lor,caml_call2(lsl,a$0,1),_yo_);
                            write_r(_y__[1],0,n$0);
                            set_flags$0([0,c$0],_wf_,_we_,_wd_,0);
                            var next_pc=0;
                            break;
                           case 10:
                            var
                             a$1=read_r(_y__[1],0),
                             old_c=read_flag(_y__[1],0),
                             _yp_=old_c?one:zero,
                             n$1=caml_call2(lor,caml_call2(lsl,a$1,1),_yp_);
                            write_r(_y__[1],0,n$1);
                            var
                             new_c=
                              caml_call2(symbol$2,caml_call2(land,a$1,128),zero);
                            set_flags$0([0,new_c],_wi_,_wh_,_wg_,0);
                            var next_pc=0;
                            break;
                           case 11:
                            var
                             a$2=read_r(_y__[1],0),
                             c$1=caml_call2(symbol$2,caml_call2(land,a$2,1),zero),
                             _yq_=c$1?128:zero,
                             n$2=caml_call2(lor,caml_call2(lsr,a$2,1),_yq_);
                            write_r(_y__[1],0,n$2);
                            set_flags$0([0,c$1],_wl_,_wk_,_wj_,0);
                            var next_pc=0;
                            break;
                           case 12:
                            var
                             a$3=read_r(_y__[1],0),
                             old_c$0=read_flag(_y__[1],0),
                             _yr_=old_c$0?128:zero,
                             n$3=caml_call2(lor,caml_call2(lsr,a$3,1),_yr_);
                            write_r(_y__[1],0,n$3);
                            var
                             new_c$0=
                              caml_call2(symbol$2,caml_call2(land,a$3,1),zero);
                            set_flags$0([0,new_c$0],_wo_,_wn_,_wm_,0);
                            var next_pc=0;
                            break;
                           default:
                            var addr$0=read_word(_y__[4],_y__[3]);
                            _y__[3] = caml_call2(symbol$3,_y__[3],2);
                            _y__[6] = 1;
                            var next_pc=[0,addr$0]}
                        else
                         switch(inst[0])
                          {case 0:
                            var y$0=inst[2],x$0=inst[1];
                            symbol$5(x$0,read(y$0));
                            var next_pc=0;
                            break;
                           case 1:
                            var y$1=inst[2],x$1=inst[1];
                            symbol$5(x$1,read(y$1));
                            var next_pc=0;
                            break;
                           case 2:
                            var
                             y$2=inst[2],
                             x$2=inst[1],
                             y$3=read(y$2),
                             x$3=read(x$2),
                             n$4=caml_call2(symbol,x$3,y$3),
                             _ys_=[0,caml_equal(n$4,zero)],
                             _yt_=caml_call2(land,y$3,15),
                             _yu_=
                              [0,
                               caml_greaterthan
                                (caml_call2(symbol,caml_call2(land,x$3,15),_yt_),15)];
                            set_flags$0
                             ([0,caml_greaterthan(x$3,caml_call2(symbol$0,255,y$3))],
                              _yu_,
                              _wp_,
                              _ys_,
                              0);
                            symbol$5(x$2,n$4);
                            var next_pc=0;
                            break;
                           case 3:
                            var
                             y$4=inst[2],
                             x$4=inst[1],
                             y$5=read(y$4),
                             x$5=read(x$4),
                             n$5=caml_call2(symbol$3,x$5,y$5),
                             _yv_=caml_call2(land$0,y$5,4095),
                             _yw_=
                              [0,
                               caml_greaterthan
                                (caml_call2(symbol$3,caml_call2(land$0,x$5,4095),_yv_),4095)];
                            set_flags$0
                             ([0,caml_greaterthan(x$5,caml_call2(symbol$4,65535,y$5))],
                              _yw_,
                              _wq_,
                              0,
                              0);
                            symbol$5(x$4,n$5);
                            var next_pc=0;
                            break;
                           case 4:
                            var y$6=inst[1],x$6=read(3),y$7=to_int(y$6);
                            set_flags$0
                             ([0,255 < ((x$6 & 255) + (y$7 & 255) | 0)?1:0],
                              [0,15 < ((x$6 & 15) + (y$7 & 15) | 0)?1:0],
                              _ws_,
                              _wr_,
                              0);
                            symbol$5(3,(x$6 + y$7 | 0) & 65535);
                            var next_pc=0;
                            break;
                           case 5:
                            var
                             y$8=inst[2],
                             x$7=inst[1],
                             c$2=read_flag(_y__[1],0)?one:zero,
                             y$9=read(y$8),
                             x$8=read(x$7),
                             n$6=caml_call2(symbol,caml_call2(symbol,x$8,y$9),c$2),
                             _yx_=[0,caml_equal(n$6,zero)],
                             _yy_=caml_call2(land,y$9,15);
                            set_flags$0
                             ([0,255 < ((x$8 + y$9 | 0) + c$2 | 0)?1:0],
                              [0,
                               caml_greaterthan
                                (caml_call2
                                  (symbol,caml_call2(symbol,caml_call2(land,x$8,15),_yy_),c$2),
                                 15)],
                              _wt_,
                              _yx_,
                              0);
                            symbol$5(x$7,n$6);
                            var next_pc=0;
                            break;
                           case 6:
                            var
                             y$10=inst[2],
                             x$9=inst[1],
                             y$11=read(y$10),
                             x$10=read(x$9),
                             n$7=caml_call2(symbol$0,x$10,y$11),
                             _yz_=[0,caml_equal(n$7,zero)],
                             _yA_=caml_call2(land,y$11,15);
                            set_flags$0
                             ([0,x$10 < y$11?1:0],
                              [0,caml_lessthan(caml_call2(land,x$10,15),_yA_)],
                              _wu_,
                              _yz_,
                              0);
                            symbol$5(x$9,n$7);
                            var next_pc=0;
                            break;
                           case 7:
                            var
                             y$12=inst[2],
                             x$11=inst[1],
                             c$3=read_flag(_y__[1],0)?one:zero,
                             y$13=read(y$12),
                             x$12=read(x$11),
                             n$8=caml_call2(symbol$0,x$12,caml_call2(symbol,y$13,c$3)),
                             _yB_=[0,caml_equal(n$8,zero)],
                             _yC_=caml_call2(symbol,caml_call2(land,y$13,15),c$3);
                            set_flags$0
                             ([0,x$12 < (y$13 + c$3 | 0)?1:0],
                              [0,caml_lessthan(caml_call2(land,x$12,15),_yC_)],
                              _wv_,
                              _yB_,
                              0);
                            symbol$5(x$11,n$8);
                            var next_pc=0;
                            break;
                           case 8:
                            var
                             y$14=inst[2],
                             x$13=inst[1],
                             _yD_=read(y$14),
                             n$9=caml_call2(land,read(x$13),_yD_);
                            set_flags$0(_wy_,_wx_,_ww_,[0,caml_equal(n$9,zero)],0);
                            symbol$5(x$13,n$9);
                            var next_pc=0;
                            break;
                           case 9:
                            var
                             y$15=inst[2],
                             x$14=inst[1],
                             _yE_=read(y$15),
                             n$10=caml_call2(lor,read(x$14),_yE_);
                            set_flags$0(_wB_,_wA_,_wz_,[0,caml_equal(n$10,zero)],0);
                            symbol$5(x$14,n$10);
                            var next_pc=0;
                            break;
                           case 10:
                            var
                             y$16=inst[2],
                             x$15=inst[1],
                             _yF_=read(y$16),
                             n$11=caml_call2(lxor,read(x$15),_yF_);
                            set_flags$0(_wE_,_wD_,_wC_,[0,caml_equal(n$11,zero)],0);
                            symbol$5(x$15,n$11);
                            var next_pc=0;
                            break;
                           case 11:
                            var
                             y$17=inst[2],
                             x$16=inst[1],
                             y$18=read(y$17),
                             x$17=read(x$16),
                             n$12=caml_call2(symbol$0,x$17,y$18),
                             _yG_=[0,caml_equal(n$12,zero)],
                             _yH_=caml_call2(land,y$18,15);
                            set_flags$0
                             ([0,x$17 < y$18?1:0],
                              [0,caml_lessthan(caml_call2(land,x$17,15),_yH_)],
                              _wF_,
                              _yG_,
                              0);
                            var next_pc=0;
                            break;
                           case 12:
                            var
                             x$18=inst[1],
                             x$19=read(x$18),
                             n$13=succ(x$19),
                             _yI_=[0,caml_equal(n$13,zero)];
                            set_flags$0
                             (0,
                              [0,caml_call2(symbol$1,caml_call2(land,x$19,15),15)],
                              _wG_,
                              _yI_,
                              0);
                            symbol$5(x$18,n$13);
                            var next_pc=0;
                            break;
                           case 13:
                            var x$20=inst[1];
                            symbol$5(x$20,succ$0(read(x$20)));
                            var next_pc=0;
                            break;
                           case 14:
                            var
                             x$21=inst[1],
                             x$22=read(x$21),
                             n$14=pred(x$22),
                             _yJ_=[0,caml_equal(n$14,zero)];
                            set_flags$0
                             (0,
                              [0,caml_call2(symbol$1,caml_call2(land,x$22,15),0)],
                              _wH_,
                              _yJ_,
                              0);
                            symbol$5(x$21,n$14);
                            var next_pc=0;
                            break;
                           case 15:
                            var x$23=inst[1];
                            symbol$5(x$23,pred$0(read(x$23)));
                            var next_pc=0;
                            break;
                           case 16:
                            var
                             x$24=inst[1],
                             x$25=read(x$24),
                             _yK_=caml_call2(lsr,x$25,4),
                             n$15=caml_call2(lor,caml_call2(lsl,x$25,4),_yK_);
                            set_flags$0(_wK_,_wJ_,_wI_,[0,caml_equal(n$15,zero)],0);
                            symbol$5(x$24,n$15);
                            var next_pc=0;
                            break;
                           case 17:
                            var
                             x$26=inst[1],
                             x$27=read(x$26),
                             c$4=caml_call2(symbol$2,caml_call2(land,x$27,128),zero),
                             _yL_=c$4?one:zero,
                             n$16=caml_call2(lor,caml_call2(lsl,x$27,1),_yL_);
                            symbol$5(x$26,n$16);
                            set_flags$0
                             ([0,c$4],_wM_,_wL_,[0,caml_call2(symbol$1,n$16,zero)],0);
                            var next_pc=0;
                            break;
                           case 18:
                            var
                             x$28=inst[1],
                             x$29=read(x$28),
                             old_c$1=read_flag(_y__[1],0),
                             _yM_=old_c$1?one:zero,
                             n$17=caml_call2(lor,caml_call2(lsl,x$29,1),_yM_);
                            symbol$5(x$28,n$17);
                            var
                             new_c$1=
                              caml_call2(symbol$2,caml_call2(land,x$29,128),zero);
                            set_flags$0
                             ([0,new_c$1],_wO_,_wN_,[0,caml_call2(symbol$1,n$17,zero)],0);
                            var next_pc=0;
                            break;
                           case 19:
                            var
                             x$30=inst[1],
                             x$31=read(x$30),
                             c$5=caml_call2(symbol$2,caml_call2(land,x$31,1),zero),
                             _yN_=c$5?128:zero,
                             n$18=caml_call2(lor,caml_call2(lsr,x$31,1),_yN_);
                            symbol$5(x$30,n$18);
                            set_flags$0
                             ([0,c$5],_wQ_,_wP_,[0,caml_call2(symbol$1,n$18,zero)],0);
                            var next_pc=0;
                            break;
                           case 20:
                            var
                             x$32=inst[1],
                             x$33=read(x$32),
                             old_c$2=read_flag(_y__[1],0),
                             _yO_=old_c$2?128:zero,
                             n$19=caml_call2(lor,caml_call2(lsr,x$33,1),_yO_);
                            symbol$5(x$32,n$19);
                            var _yP_=[0,caml_call2(symbol$1,n$19,zero)];
                            set_flags$0
                             ([0,caml_call2(symbol$2,caml_call2(land,x$33,1),zero)],
                              _wS_,
                              _wR_,
                              _yP_,
                              0);
                            var next_pc=0;
                            break;
                           case 21:
                            var
                             x$34=inst[1],
                             x$35=read(x$34),
                             n$20=caml_call2(lsl,x$35,1);
                            symbol$5(x$34,n$20);
                            var _yQ_=[0,caml_call2(symbol$1,n$20,zero)];
                            set_flags$0
                             ([0,caml_call2(symbol$2,caml_call2(land,x$35,128),zero)],
                              _wU_,
                              _wT_,
                              _yQ_,
                              0);
                            var next_pc=0;
                            break;
                           case 22:
                            var
                             x$36=inst[1],
                             x$37=read(x$36),
                             _yR_=caml_call2(land,x$37,128),
                             n$21=caml_call2(lor,caml_call2(lsr,x$37,1),_yR_);
                            symbol$5(x$36,n$21);
                            var _yS_=[0,caml_call2(symbol$1,n$21,zero)];
                            set_flags$0
                             ([0,caml_call2(symbol$2,caml_call2(land,x$37,1),zero)],
                              _wW_,
                              _wV_,
                              _yS_,
                              0);
                            var next_pc=0;
                            break;
                           case 23:
                            var
                             x$38=inst[1],
                             x$39=read(x$38),
                             n$22=caml_call2(lsr,x$39,1);
                            symbol$5(x$38,n$22);
                            var _yT_=[0,caml_call2(symbol$1,n$22,zero)];
                            set_flags$0
                             ([0,caml_call2(symbol$2,caml_call2(land,x$39,1),zero)],
                              _wY_,
                              _wX_,
                              _yT_,
                              0);
                            var next_pc=0;
                            break;
                           case 24:
                            var
                             x$40=inst[2],
                             n$23=inst[1],
                             _yU_=caml_call2(lsl,one,n$23),
                             b=caml_call2(symbol$1,caml_call2(land,read(x$40),_yU_),zero);
                            set_flags$0(0,_w0_,_wZ_,[0,b],0);
                            var next_pc=0;
                            break;
                           case 25:
                            var x$41=inst[2],n$24=inst[1],_yV_=caml_call2(lsl,one,n$24);
                            symbol$5(x$41,caml_call2(lor,read(x$41),_yV_));
                            var next_pc=0;
                            break;
                           case 26:
                            var
                             x$42=inst[2],
                             n$25=inst[1],
                             mask=caml_call2(lxor,caml_call2(lsl,one,n$25),255);
                            symbol$5(x$42,caml_call2(land,read(x$42),mask));
                            var next_pc=0;
                            break;
                           case 27:
                            var rr=inst[1];
                            _y__[3] = caml_call2(symbol$4,_y__[3],2);
                            var _yW_=read_rr(_y__[1],rr);
                            write_word(_y__[4],_y__[3],_yW_);
                            var next_pc=0;
                            break;
                           case 28:
                            var rr$0=inst[1],_yX_=read_word(_y__[4],_y__[3]);
                            write_rr(_y__[1],rr$0,_yX_);
                            _y__[3] = caml_call2(symbol$3,_y__[3],2);
                            var next_pc=0;
                            break;
                           case 29:
                            var
                             x$43=inst[2],
                             c$6=inst[1],
                             _yY_=check_condition(_y__,c$6)?[0,read(x$43)]:0,
                             next_pc=_yY_;
                            break;
                           case 30:
                            var x$44=inst[2],c$7=inst[1];
                            if(check_condition(_y__,c$7))
                             var
                              _yZ_=to_int(x$44),
                              addr$1=(_y__[2] + _yZ_ | 0) & 65535,
                              _y0_=[0,addr$1];
                            else
                             var _y0_=0;
                            var next_pc=_y0_;
                            break;
                           case 31:
                            var
                             x$45=inst[2],
                             c$8=inst[1],
                             _y1_=
                              check_condition(_y__,c$8)
                               ?(_y__[3]
                                 =
                                 caml_call2(symbol$4,_y__[3],2),
                                 write_word(_y__[4],_y__[3],_y__[2]),
                                 [0,x$45])
                               :0,
                             next_pc=_y1_;
                            break;
                           case 32:
                            var x$46=inst[1];
                            _y__[3] = caml_call2(symbol$4,_y__[3],2);
                            write_word(_y__[4],_y__[3],_y__[2]);
                            var next_pc=[0,x$46];
                            break;
                           default:
                            var c$9=inst[1];
                            if(check_condition(_y__,c$9))
                             {var addr$2=read_word(_y__[4],_y__[3]);
                              _y__[3] = caml_call2(symbol$3,_y__[3],2);
                              var _y2_=[0,addr$2]}
                            else
                             var _y2_=0;
                            var next_pc=_y2_}
                        _y__[8] = inst;
                        if(next_pc)
                         {var addr=next_pc[1];_y__[2] = addr;var _y7_=_y6_}
                        else
                         var _y7_=_y5_;
                        var inst_mcycles=_y7_}
                      var _y8_=_y__[9],switch$0=0;
                      if(_y8_[1][2] && _y8_[2][2])
                       var match$4=_f7_;
                      else
                       switch$0 = 1;
                      if(switch$0)
                       {var switch$1=0;
                        if(_y8_[1][3] && _y8_[2][3])
                         var match$4=_f8_;
                        else
                         switch$1 = 1;
                        if(switch$1)
                         {var switch$2=0;
                          if(_y8_[1][4] && _y8_[2][4])
                           var match$4=_f9_;
                          else
                           switch$2 = 1;
                          if(switch$2)
                           {var switch$3=0;
                            if(_y8_[1][5] && _y8_[2][5])
                             var match$4=_f__;
                            else
                             switch$3 = 1;
                            if(switch$3)
                             {var switch$4=0;
                              if(_y8_[1][6] && _y8_[2][6])
                               var match$4=_f$_;
                              else
                               switch$4 = 1;
                              if(switch$4)var match$4=0}}}}
                      if(match$4)
                       {var type=match$4[1];
                        _y__[5] = 0;
                        if(_y__[6])
                         {_y__[6] = 0;
                          var _y9_=_y__[9];
                          _y9_[2] = update(_y9_[2],type,0);
                          switch(type)
                           {case 0:var addr$3=64;break;
                            case 1:var addr$3=72;break;
                            case 2:var addr$3=80;break;
                            case 3:var addr$3=88;break;
                            default:var addr$3=96}
                          _y__[3] = caml_call2(symbol$4,_y__[3],2);
                          write_word(_y__[4],_y__[3],_y__[2]);
                          _y__[2] = addr$3;
                          var interrupt_mcycles=5}
                        else
                         var interrupt_mcycles=0}
                      else
                       var interrupt_mcycles=0;
                      var
                       mcycles$0=inst_mcycles + interrupt_mcycles | 0,
                       _y$_=t[2],
                       before_mcycle_count=_y$_[6],
                       after_mcycle_count=before_mcycle_count + mcycles$0 | 0;
                      _y$_[6] = after_mcycle_count % 65536 | 0;
                      var
                       quotient_diff=
                        (after_mcycle_count / 64 | 0)
                        -
                        (before_mcycle_count / 64 | 0)
                        |
                        0;
                      _y$_[7] = (_y$_[7] + quotient_diff | 0) % 256 | 0;
                      if(_y$_[8])
                       {switch(_y$_[9])
                         {case 0:var divider=256;break;
                          case 1:var divider=4;break;
                          case 2:var divider=16;break;
                          default:var divider=64}
                        var
                         _x1_=caml_div(before_mcycle_count,divider),
                         quotient_diff$0=
                          caml_div(after_mcycle_count,divider)
                          -
                          _x1_
                          |
                          0,
                         before_tima_counter=_y$_[11];
                        _y$_[11] = (_y$_[11] + quotient_diff$0 | 0) % 256 | 0;
                        var after_tima_counter=_y$_[11];
                        if(after_tima_counter < before_tima_counter)
                         {request(_y$_[5],2);_y$_[11] = _y$_[10]}}
                      var
                       _za_=t[3],
                       incr_ly=
                        function(t)
                         {var _ze_=t[9];
                          _ze_[3][2] = _ze_[3][2] + 1 | 0;
                          return get_ly(t[9])};
                      switch(_za_[12])
                       {case 0:
                         _za_[11] = _za_[11] + mcycles$0 | 0;
                         var match$2=_za_[7][7];
                         switch(match$2)
                          {case 0:
                            if(20 <= _za_[11])
                             {_za_[11] = _za_[11] % 20 | 0;set_gpu_mode(_za_[7],1)}
                            var match$5=0;
                            break;
                           case 1:
                            if(43 <= _za_[11])
                             {_za_[11] = _za_[11] % 43 | 0;
                              set_gpu_mode(_za_[7],2);
                              if(is_enabled(_za_[7],3))request(_za_[10],1);
                              var ly=get_ly(_za_[9]);
                              if(_za_[8][9])
                               {var
                                 tile_data_area=_za_[8][5],
                                 y=(_za_[9][1][2] + ly | 0) % 256 | 0,
                                 bg_tile_map_area=_za_[8][6],
                                 row_in_tile=y % 8 | 0,
                                 lx=[0,0],
                                 _x2_=_za_[9][2][2];
                                for(;;)
                                 {if(lx[1] < 160)
                                   {var
                                     x=(_x2_ + lx[1] | 0) % 256 | 0,
                                     col_in_tile=x % 8 | 0,
                                     tile_index=get_tile_index(_za_[2],bg_tile_map_area,y,x),
                                     tile_pixel_row=
                                      get_row_pixels
                                       (_za_[1],tile_data_area,tile_index,row_in_tile),
                                     len=
                                      0 < col_in_tile
                                       ?8 - col_in_tile | 0
                                       :8 <= (160 - lx[1] | 0)?8:160 - lx[1] | 0,
                                     _x5_=len - 1 | 0,
                                     _x4_=0;
                                    if(! (_x5_ < 0))
                                     {var i$0=_x4_;
                                      for(;;)
                                       {var
                                         _x6_=col_in_tile + i$0 | 0,
                                         _x7_=caml_check_bound(tile_pixel_row,_x6_)[1 + _x6_],
                                         color=lookup(_za_[4],_x7_),
                                         _x8_=lx[1] + i$0 | 0;
                                        caml_check_bound(caml_check_bound(_za_[13],ly)[1 + ly],_x8_)
                                         [1 + _x8_]
                                        =
                                        color;
                                        var _x9_=i$0 + 1 | 0;
                                        if(_x5_ !== i$0){var i$0=_x9_;continue}
                                        break}}
                                    lx[1] = lx[1] + len | 0;
                                    continue}
                                  if(_za_[8][4])
                                   {var
                                     _x3_=_za_[9][5][2],
                                     wx=_za_[9][6][2] - 7 | 0,
                                     _x__=_x3_ <= ly?1:0;
                                    if(_x__)
                                     var
                                      _x$_=ly <= (_x3_ + 256 | 0)?1:0,
                                      _ya_=_x$_?wx <= 160?1:0:_x$_;
                                    else
                                     var _ya_=_x__;
                                    if(_ya_)
                                     {var
                                       window_tile_map_area=_za_[8][3],
                                       y_in_w=abs$0(ly - _x3_ | 0),
                                       row_in_tile$0=y_in_w % 8 | 0,
                                       wx$0=0 <= wx?wx:0,
                                       lx$0=[0,wx$0];
                                      for(;;)
                                       {if(lx$0[1] < 160)
                                         {var
                                           x_in_w=abs$0(lx$0[1] - wx | 0),
                                           tile_index$0=
                                            get_tile_index(_za_[2],window_tile_map_area,y_in_w,x_in_w),
                                           tile_pixel_row$0=
                                            get_row_pixels
                                             (_za_[1],tile_data_area,tile_index$0,row_in_tile$0),
                                           len$0=8 <= (160 - lx$0[1] | 0)?8:160 - lx$0[1] | 0,
                                           _yc_=len$0 - 1 | 0,
                                           _yb_=0;
                                          if(! (_yc_ < 0))
                                           {var i$1=_yb_;
                                            for(;;)
                                             {var
                                               _yd_=caml_check_bound(tile_pixel_row$0,i$1)[1 + i$1],
                                               color$0=lookup(_za_[4],_yd_),
                                               _ye_=lx$0[1] + i$1 | 0;
                                              caml_check_bound(caml_check_bound(_za_[13],ly)[1 + ly],_ye_)
                                               [1 + _ye_]
                                              =
                                              color$0;
                                              var _yf_=i$1 + 1 | 0;
                                              if(_yc_ !== i$1){var i$1=_yf_;continue}
                                              break}}
                                          lx$0[1] = lx$0[1] + len$0 | 0;
                                          continue}
                                        break}}}
                                  break}}
                              if(_za_[8][8])
                               {var
                                 match=_za_[8][7],
                                 y_sprite_size=1056320505 <= match?8:16,
                                 _yg_=_za_[3][1],
                                 _xZ_=_yg_.length - 1 - 1 | 0,
                                 _xY_=0;
                                if(! (_xZ_ < 0))
                                 {var i=_xY_;
                                  for(;;)
                                   {var
                                     sprite=_yg_[1 + i],
                                     _yh_=sprite[1] <= ly?1:0,
                                     _yi_=
                                      _yh_
                                       ?ly <= ((sprite[1] + y_sprite_size | 0) - 1 | 0)?1:0
                                       :_yh_;
                                    if(_yi_)
                                     {var
                                       row$0=ly - sprite[1] | 0,
                                       pallete=879375796 <= sprite[7]?_za_[6]:_za_[5],
                                       col=0;
                                      for(;;)
                                       {var lx$1=sprite[2] + col | 0,switch$5=0;
                                        if(0 <= lx$1 && ! (160 <= lx$1))
                                         {var
                                           _yk_=sprite[6]?7 - col | 0:col,
                                           _yl_=sprite[5]?(y_sprite_size - row$0 | 0) - 1 | 0:row$0,
                                           row=get_row_pixels(_za_[1],0,sprite[3],_yl_),
                                           color_id=caml_check_bound(row,_yk_)[1 + _yk_];
                                          if(color_id)
                                           {var
                                             match$0=sprite[4],
                                             match$1=
                                              caml_check_bound(caml_check_bound(_za_[13],ly)[1 + ly],lx$1)
                                               [1 + lx$1],
                                             switch$6=0;
                                            if(486156037 <= match$0)
                                             {var switch$7=0;
                                              if
                                               (-937474657
                                                !==
                                                match$1
                                                &&
                                                -603547828
                                                !==
                                                match$1
                                                &&
                                                -126317716
                                                !==
                                                match$1)
                                               switch$7 = 1;
                                              if(! switch$7)switch$6 = 1}
                                            if(! switch$6)
                                             {var color$1=lookup(pallete,color_id);
                                              caml_check_bound(caml_check_bound(_za_[13],ly)[1 + ly],lx$1)
                                               [1 + lx$1]
                                              =
                                              color$1}}
                                          switch$5 = 1}
                                        var _yj_=col + 1 | 0;
                                        if(7 !== col){var col=_yj_;continue}
                                        break}}
                                    var _x0_=i + 1 | 0;
                                    if(_xZ_ !== i){var i=_x0_;continue}
                                    break}}}}
                            var match$5=0;
                            break;
                           case 2:
                            if(51 <= _za_[11])
                             {_za_[11] = _za_[11] % 51 | 0;
                              var ly$0=incr_ly(_za_);
                              handle_ly_eq_lyc(_za_);
                              if(ly$0 === 144)
                               {set_gpu_mode(_za_[7],3);
                                if(is_enabled(_za_[7],2))request(_za_[10],1);
                                request(_za_[10],0)}
                              else
                               {set_gpu_mode(_za_[7],0);
                                if(is_enabled(_za_[7],1))request(_za_[10],1)}}
                            var match$5=0;
                            break;
                           default:
                            if(_za_[11] < 114)
                             var match$5=0;
                            else
                             {_za_[11] = _za_[11] % 114 | 0;
                              var ly$1=incr_ly(_za_);
                              handle_ly_eq_lyc(_za_);
                              if(154 <= ly$1)
                               {reset_ly(_za_[9]);
                                handle_ly_eq_lyc(_za_);
                                set_gpu_mode(_za_[7],0);
                                if(is_enabled(_za_[7],1))request(_za_[10],1);
                                var match$5=[0,_za_[13]]}
                              else
                               var match$5=0}}
                         break;
                        case 1:var match$5=0;break;
                        default:
                         _za_[11] = _za_[11] + mcycles$0 | 0;
                         if(51 <= _za_[11])
                          {_za_[11] = _za_[11] % 51 | 0;
                           _za_[12] = 0;
                           handle_ly_eq_lyc(_za_);
                           set_gpu_mode(_za_[7],0);
                           if(is_enabled(_za_[7],1))request(_za_[10],1)}
                         var match$5=0}
                      if(match$5)
                       {var fb=match$5[1];
                        cnt[1]++;
                        if(60 === cnt[1])
                         {var
                           end_time=performance.now(),
                           sec_per_60_frame=(end_time - start_time[1]) / 1000.,
                           fps=60. / sec_per_60_frame;
                          start_time[1] = end_time;
                          var
                           fps_str=caml_call1(sprintf(_xt_),fps),
                           e=find_el_by_id(_xu_),
                           s=caml_jsstring_of_string(fps_str),
                           l=[0,d.createTextNode(s),0];
                          for(;;)
                           {if(! is_null(e.firstChild))
                             {e.removeChild(e.firstChild);continue}
                            iter(function(_zd_){return _bU_(e,_zd_)},l);
                            cnt[1] = 0;
                            break}}
                        draw_framebuffer(ctx,image_data,fb);
                        if(throttled[1])
                         {var f=function(param){return f$0(0)};
                          run_id[1] = [0,target.requestAnimationFrame(f)];
                          return 0}
                        run_id[1] = [0,target.setTimeout(f$0,0)];
                        return 0}
                      continue}};
                return return$0(f$0(0))}}
            var e=result[1];
            return return$0(log([0,e.message,0]))}
          var _xN_=rom_blob.arrayBuffer();
          return bind(of_promise(function(_xP_){return _xP_},_xN_),_xO_)},
       run_selected_rom=
        function(ctx,image_data,rom_path)
         {function _xI_(result)
           {if(0 === result[0])
             {var
               response=result[1],
               _xL_=
                function(result)
                 {if(0 === result[0])
                   {var blob=result[1];
                    return run_rom_blob(ctx,image_data,blob)}
                  var e=result[1];
                  return return$0(log([0,e.message,0]))},
               _xK_=response.blob();
              return bind(of_promise(function(_xM_){return _xM_},_xK_),_xL_)}
            var e=result[1];
            return return$0(log([0,e.message,0]))}
          var
           url=caml_jsstring_of_string(rom_path),
           init={},
           _xH_=fetch(url,init);
          return bind(of_promise(function(_xJ_){return _xJ_},_xH_),_xI_)},
       e$0=find_el_by_id(_xx_);
      if(caml_equal(n$1,tag_name(e$0)))
       var canvas=e$0;
      else
       var
        msg="Expected canvas element but found: ".concat(tag_name(e$0)),
        e=new (target.Error)(msg),
        canvas=caml_call1(function(exn){throw exn},e);
      var ctx=canvas.getContext("2d",attrs);
      ctx.scale(1.5,1.5);
      var
       image_data=ctx.createImageData(160,144),
       fb=create_matrix(gb_h,gb_w,-603547828);
      draw_framebuffer(ctx,image_data,fb);
      var
       checkbox_el=find_el_by_id(_xy_),
       uri=new url(w.location),
       v=uri.search,
       q=decode(v);
      if(is_empty(q))
       var _xv_=q;
      else
       {if(opt$0)var sth=opt$0[1],start=sth;else var start=0;
        var _xv_=q.slice(start)}
      var
       p=new usp(_xv_),
       _bT_=p.get("throttled"),
       param$3=to_option(function(_xG_){return _xG_},_bT_),
       set_throttled_val=
        function(b)
         {var _xF_=caml_call1(p$0[3],b);
          checkbox_el[p$0[1]] = _xF_;
          throttled[1] = b;
          return 0};
      if(param$3)
       {var jstr=param$3[1],match$0=caml_string_of_jsstring(jstr);
        if(caml_string_notequal(match$0,_xw_))
         set_throttled_val(1);
        else
         set_throttled_val(0)}
      else
       set_throttled_val(1);
      listen
       (0,
        change,
        function(param)
         {var checked=prop(p$0,checkbox_el);throttled[1] = checked;return 0},
        checkbox_el);
      var input_el=find_el_by_id(_xz_);
      listen
       (0,
        change,
        function(param)
         {var v=input_el.files,match=is_none(v)?0:[0,v];
          if(match)
           {var
             files=match[1],
             len=files.length,
             f=function(i){return files[i]};
            if(0 <= len)
             if(rev_init_threshold < len)
              {var acc=0,i=0;
               for(;;)
                {if(! (len <= i))
                  {var i$0=i + 1 | 0,acc$0=[0,f(i),acc],acc=acc$0,i=i$0;
                   continue}
                 var l1=acc,l2=0;
                 for(;;)
                  {if(l1)
                    {var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;
                     continue}
                   var _xD_=l2;
                   break}
                 break}}
             else
              var _xD_=init_aux(0,len,f);
            else
             var _xD_=invalid_arg(_m_)}
          else
           var _xD_=0;
          var file=hd(_xD_);
          function _xE_(param){return 0}
          return await$0(run_rom_blob(ctx,image_data,file),_xE_)},
        input_el);
      var
       selector_el=find_el_by_id(_xA_),
       l=
        map
         (function(rom_option)
           {var
             cs=[0,d.createTextNode(caml_jsstring_of_string(rom_option[1])),0],
             s=caml_jsstring_of_string(rom_option[2]),
             sth=[0,[0,value,s],0],
             at$0=[0,sth],
             at=at$0?sth:0,
             e=d.createElement("option");
            iter
             (function(param)
               {var v=param[2],a=param[1],match=caml_equal(a,class$0);
                return match
                        ?is_empty(v)?0:(e.classList.add(v),0)
                        :(e.setAttribute(a,v),0)},
              at);
            iter(function(_xC_){return _bU_(e,_xC_)},cs);
            return e},
          rom_options);
      if(l)
       {var tl=l[2],hd$0=l[1],accu=0,param=l;
        for(;;)
         {if(param)
           {var
             param$0=param[2],
             accu$0=accu + 1 | 0,
             accu=accu$0,
             param=param$0;
            continue}
          var a=caml_make_vect(accu,hd$0),i=1,param$1=tl;
          for(;;)
           {if(param$1)
             {var param$2=param$1[2],hd$1=param$1[1];
              a[1 + i] = hd$1;
              var i$0=i + 1 | 0,i=i$0,param$1=param$2;
              continue}
            var _bV_=a;
            break}
          break}}
      else
       var _bV_=[0];
      caml_js_meth_call(selector_el,_bW_,_bV_);
      var
       on_change=
        function(param)
         {var rom_path=caml_string_of_jsstring(prop(value$0,selector_el));
          function _xB_(param){return 0}
          return await$0(run_selected_rom(ctx,image_data,rom_path),_xB_)};
      listen(0,change,on_change,selector_el);
      var rom=hd(rom_options),fut=run_selected_rom(ctx,image_data,rom[2]);
      await$0(fut,function(param){return 0});
      do_at_exit(0);
      return}}
  (function(){return this}()));
