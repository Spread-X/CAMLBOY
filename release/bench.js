// Generated by js_of_ocaml 3.11.0+git-5adaa2b
(function(joo_global_object)
   {"use strict";
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_kind_of_typed_array(ta)
     {var g=joo_global_object,kind;
      if(ta instanceof g.Float32Array)
       kind = 0;
      else
       if(ta instanceof g.Float64Array)
        kind = 1;
       else
        if(ta instanceof g.Int8Array)
         kind = 2;
        else
         if(ta instanceof g.Uint8Array)
          kind = 3;
         else
          if(ta instanceof g.Int16Array)
           kind = 4;
          else
           if(ta instanceof g.Uint16Array)
            kind = 5;
           else
            if(ta instanceof g.Int32Array)
             kind = 6;
            else
             if(ta instanceof g.Uint32Array)
              kind = 6;
             else
              caml_invalid_argument
               ("caml_ba_kind_of_typed_array: unsupported kind");
      return kind}
    function caml_ba_from_typed_array(ta)
     {var kind=caml_ba_kind_of_typed_array(ta);
      return caml_ba_create_unsafe(kind,0,[ta.length],ta)}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_ba_set_1(ba,i0,v){ba.set(ba.offset(i0),v);return 0}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    function make_path_is_absolute()
     {function posix(path)
       {if(path.charAt(0) === "/")return ["",path.substring(1)];return}
      function win32(path)
       {var
         splitDeviceRe=
          /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
         result=splitDeviceRe.exec(path),
         device=result[1] || "",
         isUnc=Boolean(device && device.charAt(1) !== ":");
        if(Boolean(result[2] || isUnc))
         {var root=result[1] || "",sep=result[2] || "";
          return [root,path.substring(root.length + sep.length)]}
        return}
      return joo_global_object.process && joo_global_object.process.platform
              ?joo_global_object.process.platform === "win32"?win32:posix
              :posix}
    var path_is_absolute=make_path_is_absolute();
    function caml_trailing_slash(name)
     {return name.slice(- 1) !== "/"?name + "/":name}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    caml_current_dir = caml_trailing_slash(caml_current_dir);
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(! path_is_absolute(name))name = caml_current_dir + name;
      var comp0=path_is_absolute(name),comp=comp0[1].split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         default:ncomp.push(comp[i]);break}
      ncomp.unshift(comp0[0]);
      ncomp.orig = name;
      return ncomp}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    var
     unix_error=
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    function make_unix_err_args(code,syscall,path,errno)
     {var variant=unix_error.indexOf(code);
      if(variant < 0){if(errno == null)errno = - 9999;variant = [0,errno]}
      var
       args=
        [variant,
         caml_string_of_jsstring(syscall || ""),
         caml_string_of_jsstring(path || "")];
      return args}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_raise_with_args(tag,args){throw [0,tag].concat(args)}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.create_dir_if_needed
    =
    function(name)
     {var comp=name.split("/"),res="";
      for(var i=0;i < comp.length - 1;i++)
       {res += comp[i] + "/";
        if(this.content[res])continue;
        this.content[res] = Symbol("directory")}};
    MlFakeDevice.prototype.slash
    =
    function(name){return /\/$/.test(name)?name:name + "/"};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         {this.create_dir_if_needed(name);
          this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=this.slash(name);
      if(this.content[name_slash])return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {var unix_error=raise_unix && caml_named_value("Unix.Unix_error");
      if(this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("EEXIST","mkdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": File exists");
      var parent=/^(.*)\/[^/]+/.exec(name);
      parent = parent && parent[1] || "";
      if(! this.exists(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": No such file or directory");
      if(! this.is_dir(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": Not a directory");
      this.create_dir_if_needed(this.slash(name))};
    MlFakeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       name_slash=name == ""?"":this.slash(name),
       r=new RegExp("^" + name_slash + "([^/]+)");
      if(! this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": Not a directory");
      for(var n in this.content)
       if(n.match(r))
        if(unix_error)
         caml_raise_with_args
          (unix_error,make_unix_err_args("ENOTEMPTY","rmdir",this.nm(name)));
        else
         caml_raise_sys_error(this.nm(name) + ": Directory not empty");
      delete this.content[name_slash]};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var name_slash=name == ""?"":this.slash(name);
      if(! this.exists(name))
       caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))caml_raise_sys_error(name + ": Not a directory");
      var r=new RegExp("^" + name_slash + "([^/]+)"),seen={},a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {if(name == "")return true;
      var name_slash=this.slash(name);
      return this.content[name_slash]?1:0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {var file;
      if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))file = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       file = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        file = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         file = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           file = new MlFakeFile(bytes)}
      if(file)
       {this.create_dir_if_needed(name);this.content[name] = file}
      else
       caml_raise_sys_error
        (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try {return this.fs.existsSync(this.nm(name))?1:0}catch(err){return 0}};
    MlNodeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {try
       {this.fs.mkdirSync(this.nm(name),{mode:mode});return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {try
       {this.fs.rmdirSync(this.nm(name));return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readdir
    =
    function(name,raise_unix)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name,raise_unix)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name));
        return b}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.open
    =
    function(name,f,raise_unix)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rename
    =
    function(o,n,raise_unix)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.stat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.statSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.lstat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.lstatSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.symlink
    =
    function(to_dir,target,path,raise_unix)
     {try
       {this.fs.symlinkSync(this.nm(target),this.nm(path),to_dir?"dir":"file");
        return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readlink
    =
    function(name,raise_unix)
     {try
       {var link=this.fs.readlinkSync(this.nm(name),"utf8");
        return caml_string_of_jsstring(link)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.raise_nodejs_error
    =
    function(err,raise_unix)
     {var unix_error=caml_named_value("Unix.Unix_error");
      if(raise_unix && unix_error)
       {var args=make_unix_err_args(err.code,err.syscall,err.path,err.errno);
        caml_raise_with_args(unix_error,args)}
      else
       caml_raise_sys_error(err.toString())};
    MlNodeDevice.prototype.stats_from_js
    =
    function(js_stats)
     {var file_kind;
      if(js_stats.isFile())
       file_kind = 0;
      else
       if(js_stats.isDirectory())
        file_kind = 1;
       else
        if(js_stats.isCharacterDevice())
         file_kind = 2;
        else
         if(js_stats.isBlockDevice())
          file_kind = 3;
         else
          if(js_stats.isSymbolicLink())
           file_kind = 4;
          else
           if(js_stats.isFIFO())
            file_kind = 5;
           else
            if(js_stats.isSocket())file_kind = 6;
      return [0,
              js_stats.dev,
              js_stats.ino,
              file_kind,
              js_stats.mode,
              js_stats.nlink,
              js_stats.uid,
              js_stats.gid,
              js_stats.rdev,
              js_stats.size,
              js_stats.atimeMs,
              js_stats.mtimeMs,
              js_stats.ctimeMs]};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    function caml_get_root(path)
     {var x=path_is_absolute(path);if(! x)return;return x[0] + "/"}
    var
     caml_root=
      caml_get_root(caml_current_dir)
      ||
      caml_failwith("unable to compute caml_root");
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=caml_trailing_slash(name),
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      if(! res)
       {var root=caml_get_root(name);
        if(root && root.match(/^[a-zA-Z]:\/$/))
         {var m={path:root,device:new MlNodeDevice(root)};
          jsoo_mount_point.push(m);
          res
          =
          {path:m.path,
           device:m.device,
           rest:name.substring(m.path.length,name.length)}}}
      if(res)return res;
      caml_raise_sys_error("no device found for " + name_slash)}
    function caml_create_file(name,content)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       content=
        typeof content == "string"?caml_string_of_jsbytes(content):content,
       root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_gc_major(){return 0}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_meth_call(o,f,args)
     {return o[caml_jsstring_of_string(f)].apply(o,caml_js_from_array(args))}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_ml_debug_info_status(){return 0}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var refill=null;
      if(fd == 0 && fs_node_supported())
       {var fs=require("fs");
        refill
        =
        function(){return caml_string_of_jsstring(fs.readFileSync(0,"utf8"))}}
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:refill};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_sys_const_naked_pointers_checked(_unit){return 0}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_is_special_exception(exn)
     {switch(exn[2]){case - 8:case - 11:case - 12:return 1;default:return 0}}
    function caml_format_exception(exn)
     {var r="";
      if(exn[0] == 0)
       {r += exn[1][1];
        if
         (exn.length
          ==
          3
          &&
          exn[2][0]
          ==
          0
          &&
          caml_is_special_exception(exn[1]))
         var bucket=exn[2],start=1;
        else
         var start=2,bucket=exn;
        r += "(";
        for(var i=start;i < bucket.length;i++)
         {if(i > start)r += ", ";
          var v=bucket[i];
          if(typeof v == "number")
           r += v.toString();
          else
           if(v instanceof MlBytes)
            r += '"' + v.toString() + '"';
           else
            if(typeof v == "string")
             r += '"' + v.toString() + '"';
            else
             r += "_"}
        r += ")"}
      else
       if(exn[0] == 248)r += exn[1];
      return r}
    function caml_fatal_uncaught_exception(err)
     {if(err instanceof Array && (err[0] == 0 || err[0] == 248))
       {var handler=caml_named_value("Printexc.handle_uncaught_exception");
        if(handler)
         handler(err,false);
        else
         {var
           msg=caml_format_exception(err),
           at_exit=caml_named_value("Pervasives.do_at_exit");
          if(at_exit)at_exit(0);
          joo_global_object.console.error
           ("Fatal error: exception " + msg + "\n")}}
      else
       throw err}
    function caml_setup_uncaught_exception_handler()
     {var g=joo_global_object;
      if(g.process && g.process.on)
       g.process.on
        ("uncaughtException",
         function(err,origin)
          {caml_fatal_uncaught_exception(err);g.process.exit(2)});
      else
       if(g.addEventListener)
        g.addEventListener
         ("error",
          function(event)
           {if(event.error)caml_fatal_uncaught_exception(event.error)})}
    caml_setup_uncaught_exception_handler();
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     opt=[0,103],
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     meth=caml_string_of_jsbytes("log"),
     opt$0=[0,1],
     fmt=[0,[0,0],caml_string_of_jsbytes("%c")],
     partial$0=
      [8,
       [0,0,0],
       0,
       0,
       [12,
        10,
        [2,
         [0,1,8],
         [11,caml_string_of_jsbytes(": "),[8,[0,0,0],0,0,[12,10,0]]]]]];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _d_=caml_string_of_jsbytes("%.12g"),
     _c_=caml_string_of_jsbytes("."),
     _a_=caml_string_of_jsbytes("true"),
     _b_=caml_string_of_jsbytes("false"),
     _e_=caml_string_of_jsbytes("option is None"),
     _f_=caml_string_of_jsbytes("\\\\"),
     _g_=caml_string_of_jsbytes("\\'"),
     _h_=caml_string_of_jsbytes("\\b"),
     _i_=caml_string_of_jsbytes("\\t"),
     _j_=caml_string_of_jsbytes("\\n"),
     _k_=caml_string_of_jsbytes("\\r"),
     _n_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _m_=caml_string_of_jsbytes("Bytes.blit"),
     _l_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _q_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _p_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _o_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _z_=caml_string_of_jsbytes("%c"),
     _A_=caml_string_of_jsbytes("%s"),
     _B_=caml_string_of_jsbytes("%i"),
     _C_=caml_string_of_jsbytes("%li"),
     _D_=caml_string_of_jsbytes("%ni"),
     _E_=caml_string_of_jsbytes("%Li"),
     _F_=caml_string_of_jsbytes("%f"),
     _G_=caml_string_of_jsbytes("%B"),
     _H_=caml_string_of_jsbytes("%{"),
     _I_=caml_string_of_jsbytes("%}"),
     _J_=caml_string_of_jsbytes("%("),
     _K_=caml_string_of_jsbytes("%)"),
     _L_=caml_string_of_jsbytes("%a"),
     _M_=caml_string_of_jsbytes("%t"),
     _N_=caml_string_of_jsbytes("%?"),
     _O_=caml_string_of_jsbytes("%r"),
     _P_=caml_string_of_jsbytes("%_r"),
     _Q_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _T_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _U_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _V_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _W_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _X_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _Z_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _R_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     ___=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _S_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _Y_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _a$_=caml_string_of_jsbytes("%u"),
     _a9_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _a__=caml_string_of_jsbytes("Printf: bad conversion %["),
     _ba_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bb_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _bc_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bd_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _be_=caml_string_of_jsbytes("@{"),
     _bf_=caml_string_of_jsbytes("@["),
     _bg_=caml_string_of_jsbytes("@{"),
     _bh_=caml_string_of_jsbytes("@["),
     _a8_=caml_string_of_jsbytes("nan"),
     _a6_=caml_string_of_jsbytes("neg_infinity"),
     _a7_=caml_string_of_jsbytes("infinity"),
     _a5_=caml_string_of_jsbytes("."),
     _aT_=caml_string_of_jsbytes("%+nd"),
     _aU_=caml_string_of_jsbytes("% nd"),
     _aW_=caml_string_of_jsbytes("%+ni"),
     _aX_=caml_string_of_jsbytes("% ni"),
     _aY_=caml_string_of_jsbytes("%nx"),
     _aZ_=caml_string_of_jsbytes("%#nx"),
     _a0_=caml_string_of_jsbytes("%nX"),
     _a1_=caml_string_of_jsbytes("%#nX"),
     _a2_=caml_string_of_jsbytes("%no"),
     _a3_=caml_string_of_jsbytes("%#no"),
     _aS_=caml_string_of_jsbytes("%nd"),
     _aV_=caml_string_of_jsbytes("%ni"),
     _a4_=caml_string_of_jsbytes("%nu"),
     _aG_=caml_string_of_jsbytes("%+ld"),
     _aH_=caml_string_of_jsbytes("% ld"),
     _aJ_=caml_string_of_jsbytes("%+li"),
     _aK_=caml_string_of_jsbytes("% li"),
     _aL_=caml_string_of_jsbytes("%lx"),
     _aM_=caml_string_of_jsbytes("%#lx"),
     _aN_=caml_string_of_jsbytes("%lX"),
     _aO_=caml_string_of_jsbytes("%#lX"),
     _aP_=caml_string_of_jsbytes("%lo"),
     _aQ_=caml_string_of_jsbytes("%#lo"),
     _aF_=caml_string_of_jsbytes("%ld"),
     _aI_=caml_string_of_jsbytes("%li"),
     _aR_=caml_string_of_jsbytes("%lu"),
     _at_=caml_string_of_jsbytes("%+Ld"),
     _au_=caml_string_of_jsbytes("% Ld"),
     _aw_=caml_string_of_jsbytes("%+Li"),
     _ax_=caml_string_of_jsbytes("% Li"),
     _ay_=caml_string_of_jsbytes("%Lx"),
     _az_=caml_string_of_jsbytes("%#Lx"),
     _aA_=caml_string_of_jsbytes("%LX"),
     _aB_=caml_string_of_jsbytes("%#LX"),
     _aC_=caml_string_of_jsbytes("%Lo"),
     _aD_=caml_string_of_jsbytes("%#Lo"),
     _as_=caml_string_of_jsbytes("%Ld"),
     _av_=caml_string_of_jsbytes("%Li"),
     _aE_=caml_string_of_jsbytes("%Lu"),
     _ag_=caml_string_of_jsbytes("%+d"),
     _ah_=caml_string_of_jsbytes("% d"),
     _aj_=caml_string_of_jsbytes("%+i"),
     _ak_=caml_string_of_jsbytes("% i"),
     _al_=caml_string_of_jsbytes("%x"),
     _am_=caml_string_of_jsbytes("%#x"),
     _an_=caml_string_of_jsbytes("%X"),
     _ao_=caml_string_of_jsbytes("%#X"),
     _ap_=caml_string_of_jsbytes("%o"),
     _aq_=caml_string_of_jsbytes("%#o"),
     _af_=caml_string_of_jsbytes("%d"),
     _ai_=caml_string_of_jsbytes("%i"),
     _ar_=caml_string_of_jsbytes("%u"),
     _r_=caml_string_of_jsbytes("@]"),
     _s_=caml_string_of_jsbytes("@}"),
     _t_=caml_string_of_jsbytes("@?"),
     _u_=caml_string_of_jsbytes("@\n"),
     _v_=caml_string_of_jsbytes("@."),
     _w_=caml_string_of_jsbytes("@@"),
     _x_=caml_string_of_jsbytes("@%"),
     _y_=caml_string_of_jsbytes("@"),
     _ae_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _bl_=caml_string_of_jsbytes(""),
     _bm_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bJ_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bK_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Fatal error in uncaught exception handler: exception "),
        [2,0,[12,10,0]]],
       caml_string_of_jsbytes
        ("Fatal error in uncaught exception handler: exception %s\n")],
     _bI_=
      caml_string_of_jsbytes
       ("Fatal error: out of memory in uncaught exception handler"),
     _bH_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bE_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bF_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bw_=caml_string_of_jsbytes("Raised at"),
     _bx_=caml_string_of_jsbytes("Re-raised at"),
     _by_=caml_string_of_jsbytes("Raised by primitive operation at"),
     _bz_=caml_string_of_jsbytes("Called from"),
     _bA_=caml_string_of_jsbytes(" (inlined)"),
     _bC_=caml_string_of_jsbytes(""),
     _bB_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _bD_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _br_=caml_string_of_jsbytes("Out of memory"),
     _bs_=caml_string_of_jsbytes("Stack overflow"),
     _bt_=caml_string_of_jsbytes("Pattern matching failed"),
     _bu_=caml_string_of_jsbytes("Assertion failed"),
     _bv_=caml_string_of_jsbytes("Undefined recursive module"),
     _bn_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bo_=caml_string_of_jsbytes(""),
     _bp_=caml_string_of_jsbytes(""),
     _bq_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bk_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bi_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bj_=caml_string_of_jsbytes("_"),
     _bG_=
      [0,
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file not found)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],
     _bM_=caml_string_of_jsbytes("Fun.Finally_raised: "),
     _bL_=caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     _bN_=caml_string_of_jsbytes("Jv.Error"),
     _bP_=[0,[12,36,[4,8,[0,2,2],0,0]],caml_string_of_jsbytes("$%02X")],
     _bQ_=[0,[12,36,[4,8,[0,2,4],0,0]],caml_string_of_jsbytes("$%04X")],
     _bX_=
      [0,
       caml_string_of_jsbytes
        ("lib/interrupt_controller/interrupt_controller.ml"),
       107,
       4],
     _bW_=
      [0,
       caml_string_of_jsbytes
        ("lib/interrupt_controller/interrupt_controller.ml"),
       77,
       4],
     _bR_=[0,0],
     _bS_=[0,1],
     _bT_=[0,2],
     _bU_=[0,3],
     _bV_=[0,4],
     _bZ_=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),92,11],
     _b0_=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),106,9],
     _bY_=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),82,9],
     _b2_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _b1_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _b3_=[0,0,1,2,3,4,5,6,7],
     _b5_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _b4_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _b9_=caml_string_of_jsbytes("cannot write"),
     _b8_=caml_string_of_jsbytes("invalid addr"),
     _b7_=caml_string_of_jsbytes("cannot read"),
     _b6_=caml_string_of_jsbytes("invalid addr"),
     _b$_=caml_string_of_jsbytes("invalid addr"),
     _b__=caml_string_of_jsbytes("invalid addr"),
     _cb_=[0,caml_string_of_jsbytes("lib/gpu/pallete.ml"),53,14],
     _cc_=caml_string_of_jsbytes("Address out of bounds"),
     _ca_=caml_string_of_jsbytes("Address out of bounds"),
     _ce_=[0,caml_string_of_jsbytes("lib/gpu/oam_table.ml"),89,9],
     _cd_=[0,caml_string_of_jsbytes("lib/gpu/oam_table.ml"),67,9],
     _cg_=caml_string_of_jsbytes("Address out of bounds"),
     _cf_=caml_string_of_jsbytes("Address out of bounds"),
     _ch_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _cj_=caml_string_of_jsbytes("Address out of bounds"),
     _ci_=caml_string_of_jsbytes("Address out of bounds"),
     _cl_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _ck_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _cm_=
      [0,
       [11,
        caml_string_of_jsbytes("Unrecognized opcode: 0x"),
        [4,6,[0,2,2],0,0]],
       caml_string_of_jsbytes("Unrecognized opcode: 0x%02x")],
     _cn_=[0,1,1],
     _co_=[5,1],
     _cp_=[0,3,3],
     _cq_=[0,[6,1],[4,0]],
     _cr_=[0,2,2],
     _cs_=[13,[5,1]],
     _ct_=[0,2,2],
     _cu_=[12,[4,1]],
     _cv_=[0,1,1],
     _cw_=[14,[4,1]],
     _cx_=[0,1,1],
     _cy_=[4,1],
     _cz_=[0,2,2],
     _cA_=[0,1,1],
     _cB_=[0,5,5],
     _cC_=[3,[5,3],[5,1]],
     _cD_=[0,2,2],
     _cE_=[0,[4,0],[6,1]],
     _cF_=[0,2,2],
     _cG_=[15,[5,1]],
     _cH_=[0,2,2],
     _cI_=[12,[4,2]],
     _cJ_=[0,1,1],
     _cK_=[14,[4,2]],
     _cL_=[0,1,1],
     _cM_=[4,2],
     _cN_=[0,2,2],
     _cO_=[0,1,1],
     _cP_=[0,1,1],
     _cQ_=[5,2],
     _cR_=[0,3,3],
     _cS_=[0,[6,2],[4,0]],
     _cT_=[0,2,2],
     _cU_=[13,[5,2]],
     _cV_=[0,2,2],
     _cW_=[12,[4,3]],
     _cX_=[0,1,1],
     _cY_=[14,[4,3]],
     _cZ_=[0,1,1],
     _c0_=[4,3],
     _c1_=[0,2,2],
     _c2_=[0,1,1],
     _c3_=[0,3,3],
     _c4_=[3,[5,3],[5,2]],
     _c5_=[0,2,2],
     _c6_=[0,[4,0],[6,2]],
     _c7_=[0,2,2],
     _c8_=[15,[5,2]],
     _c9_=[0,2,2],
     _c__=[12,[4,4]],
     _c$_=[0,1,1],
     _da_=[14,[4,4]],
     _db_=[0,1,1],
     _dc_=[4,4],
     _dd_=[0,2,2],
     _de_=[0,1,1],
     _df_=[0,2,3],
     _dg_=[5,3],
     _dh_=[0,3,3],
     _di_=[0,1,[4,0]],
     _dj_=[0,2,2],
     _dk_=[13,[5,3]],
     _dl_=[0,2,2],
     _dm_=[12,[4,6]],
     _dn_=[0,1,1],
     _do_=[14,[4,6]],
     _dp_=[0,1,1],
     _dq_=[4,6],
     _dr_=[0,2,2],
     _ds_=[0,1,1],
     _dt_=[0,2,3],
     _du_=[3,[5,3],[5,3]],
     _dv_=[0,2,2],
     _dw_=[0,[4,0],1],
     _dx_=[0,2,2],
     _dy_=[15,[5,3]],
     _dz_=[0,2,2],
     _dA_=[12,[4,7]],
     _dB_=[0,1,1],
     _dC_=[14,[4,7]],
     _dD_=[0,1,1],
     _dE_=[4,7],
     _dF_=[0,2,2],
     _dG_=[0,1,1],
     _dH_=[0,2,3],
     _dI_=[0,3,3],
     _dJ_=[0,2,[4,0]],
     _dK_=[0,2,2],
     _dL_=[13,3],
     _dM_=[0,2,2],
     _dN_=[12,[6,3]],
     _dO_=[0,3,3],
     _dP_=[14,[6,3]],
     _dQ_=[0,3,3],
     _dR_=[6,3],
     _dS_=[0,3,3],
     _dT_=[0,1,1],
     _dU_=[0,2,3],
     _dV_=[3,[5,3],3],
     _dW_=[0,2,2],
     _dX_=[0,[4,0],2],
     _dY_=[0,2,2],
     _dZ_=[15,3],
     _d0_=[0,2,2],
     _d1_=[12,[4,0]],
     _d2_=[0,1,1],
     _d3_=[14,[4,0]],
     _d4_=[0,1,1],
     _d5_=[4,0],
     _d6_=[0,2,2],
     _d7_=[0,1,1],
     _d8_=[0,[4,1],[4,1]],
     _d9_=[0,1,1],
     _d__=[0,[4,1],[4,2]],
     _d$_=[0,1,1],
     _ea_=[0,[4,1],[4,3]],
     _eb_=[0,1,1],
     _ec_=[0,[4,1],[4,4]],
     _ed_=[0,1,1],
     _ee_=[0,[4,1],[4,6]],
     _ef_=[0,1,1],
     _eg_=[0,[4,1],[4,7]],
     _eh_=[0,1,1],
     _ei_=[0,[4,1],[6,3]],
     _ej_=[0,2,2],
     _ek_=[0,[4,1],[4,0]],
     _el_=[0,1,1],
     _em_=[0,[4,2],[4,1]],
     _en_=[0,1,1],
     _eo_=[0,[4,2],[4,2]],
     _ep_=[0,1,1],
     _eq_=[0,[4,2],[4,3]],
     _er_=[0,1,1],
     _es_=[0,[4,2],[4,4]],
     _et_=[0,1,1],
     _eu_=[0,[4,2],[4,6]],
     _ev_=[0,1,1],
     _ew_=[0,[4,2],[4,7]],
     _ex_=[0,1,1],
     _ey_=[0,[4,2],[6,3]],
     _ez_=[0,2,2],
     _eA_=[0,[4,2],[4,0]],
     _eB_=[0,1,1],
     _eC_=[0,[4,3],[4,1]],
     _eD_=[0,1,1],
     _eE_=[0,[4,3],[4,2]],
     _eF_=[0,1,1],
     _eG_=[0,[4,3],[4,3]],
     _eH_=[0,1,1],
     _eI_=[0,[4,3],[4,4]],
     _eJ_=[0,1,1],
     _eK_=[0,[4,3],[4,6]],
     _eL_=[0,1,1],
     _eM_=[0,[4,3],[4,7]],
     _eN_=[0,1,1],
     _eO_=[0,[4,3],[6,3]],
     _eP_=[0,2,2],
     _eQ_=[0,[4,3],[4,0]],
     _eR_=[0,1,1],
     _eS_=[0,[4,4],[4,1]],
     _eT_=[0,1,1],
     _eU_=[0,[4,4],[4,2]],
     _eV_=[0,1,1],
     _eW_=[0,[4,4],[4,3]],
     _eX_=[0,1,1],
     _eY_=[0,[4,4],[4,4]],
     _eZ_=[0,1,1],
     _e0_=[0,[4,4],[4,6]],
     _e1_=[0,1,1],
     _e2_=[0,[4,4],[4,7]],
     _e3_=[0,1,1],
     _e4_=[0,[4,4],[6,3]],
     _e5_=[0,2,2],
     _e6_=[0,[4,4],[4,0]],
     _e7_=[0,1,1],
     _e8_=[0,[4,6],[4,1]],
     _e9_=[0,1,1],
     _e__=[0,[4,6],[4,2]],
     _e$_=[0,1,1],
     _fa_=[0,[4,6],[4,3]],
     _fb_=[0,1,1],
     _fc_=[0,[4,6],[4,4]],
     _fd_=[0,1,1],
     _fe_=[0,[4,6],[4,6]],
     _ff_=[0,1,1],
     _fg_=[0,[4,6],[4,7]],
     _fh_=[0,1,1],
     _fi_=[0,[4,6],[6,3]],
     _fj_=[0,2,2],
     _fk_=[0,[4,6],[4,0]],
     _fl_=[0,1,1],
     _fm_=[0,[4,7],[4,1]],
     _fn_=[0,1,1],
     _fo_=[0,[4,7],[4,2]],
     _fp_=[0,1,1],
     _fq_=[0,[4,7],[4,3]],
     _fr_=[0,1,1],
     _fs_=[0,[4,7],[4,4]],
     _ft_=[0,1,1],
     _fu_=[0,[4,7],[4,6]],
     _fv_=[0,1,1],
     _fw_=[0,[4,7],[4,7]],
     _fx_=[0,1,1],
     _fy_=[0,[4,7],[6,3]],
     _fz_=[0,2,2],
     _fA_=[0,[4,7],[4,0]],
     _fB_=[0,1,1],
     _fC_=[0,[6,3],[4,1]],
     _fD_=[0,2,2],
     _fE_=[0,[6,3],[4,2]],
     _fF_=[0,2,2],
     _fG_=[0,[6,3],[4,3]],
     _fH_=[0,2,2],
     _fI_=[0,[6,3],[4,4]],
     _fJ_=[0,2,2],
     _fK_=[0,[6,3],[4,6]],
     _fL_=[0,2,2],
     _fM_=[0,[6,3],[4,7]],
     _fN_=[0,2,2],
     _fO_=[0,1,1],
     _fP_=[0,[6,3],[4,0]],
     _fQ_=[0,2,2],
     _fR_=[0,[4,0],[4,1]],
     _fS_=[0,1,1],
     _fT_=[0,[4,0],[4,2]],
     _fU_=[0,1,1],
     _fV_=[0,[4,0],[4,3]],
     _fW_=[0,1,1],
     _fX_=[0,[4,0],[4,4]],
     _fY_=[0,1,1],
     _fZ_=[0,[4,0],[4,6]],
     _f0_=[0,1,1],
     _f1_=[0,[4,0],[4,7]],
     _f2_=[0,1,1],
     _f3_=[0,[4,0],[6,3]],
     _f4_=[0,2,2],
     _f5_=[0,[4,0],[4,0]],
     _f6_=[0,1,1],
     _f7_=[2,[4,0],[4,1]],
     _f8_=[0,1,1],
     _f9_=[2,[4,0],[4,2]],
     _f__=[0,1,1],
     _f$_=[2,[4,0],[4,3]],
     _ga_=[0,1,1],
     _gb_=[2,[4,0],[4,4]],
     _gc_=[0,1,1],
     _gd_=[2,[4,0],[4,6]],
     _ge_=[0,1,1],
     _gf_=[2,[4,0],[4,7]],
     _gg_=[0,1,1],
     _gh_=[2,[4,0],[6,3]],
     _gi_=[0,2,2],
     _gj_=[2,[4,0],[4,0]],
     _gk_=[0,1,1],
     _gl_=[5,[4,0],[4,1]],
     _gm_=[0,1,1],
     _gn_=[5,[4,0],[4,2]],
     _go_=[0,1,1],
     _gp_=[5,[4,0],[4,3]],
     _gq_=[0,1,1],
     _gr_=[5,[4,0],[4,4]],
     _gs_=[0,1,1],
     _gt_=[5,[4,0],[4,6]],
     _gu_=[0,1,1],
     _gv_=[5,[4,0],[4,7]],
     _gw_=[0,1,1],
     _gx_=[5,[4,0],[6,3]],
     _gy_=[0,2,2],
     _gz_=[5,[4,0],[4,0]],
     _gA_=[0,1,1],
     _gB_=[6,[4,0],[4,1]],
     _gC_=[0,1,1],
     _gD_=[6,[4,0],[4,2]],
     _gE_=[0,1,1],
     _gF_=[6,[4,0],[4,3]],
     _gG_=[0,1,1],
     _gH_=[6,[4,0],[4,4]],
     _gI_=[0,1,1],
     _gJ_=[6,[4,0],[4,6]],
     _gK_=[0,1,1],
     _gL_=[6,[4,0],[4,7]],
     _gM_=[0,1,1],
     _gN_=[6,[4,0],[6,3]],
     _gO_=[0,2,2],
     _gP_=[6,[4,0],[4,0]],
     _gQ_=[0,1,1],
     _gR_=[7,[4,0],[4,1]],
     _gS_=[0,1,1],
     _gT_=[7,[4,0],[4,2]],
     _gU_=[0,1,1],
     _gV_=[7,[4,0],[4,3]],
     _gW_=[0,1,1],
     _gX_=[7,[4,0],[4,4]],
     _gY_=[0,1,1],
     _gZ_=[7,[4,0],[4,6]],
     _g0_=[0,1,1],
     _g1_=[7,[4,0],[4,7]],
     _g2_=[0,1,1],
     _g3_=[7,[4,0],[6,3]],
     _g4_=[0,2,2],
     _g5_=[7,[4,0],[4,0]],
     _g6_=[0,1,1],
     _g7_=[8,[4,0],[4,1]],
     _g8_=[0,1,1],
     _g9_=[8,[4,0],[4,2]],
     _g__=[0,1,1],
     _g$_=[8,[4,0],[4,3]],
     _ha_=[0,1,1],
     _hb_=[8,[4,0],[4,4]],
     _hc_=[0,1,1],
     _hd_=[8,[4,0],[4,6]],
     _he_=[0,1,1],
     _hf_=[8,[4,0],[4,7]],
     _hg_=[0,1,1],
     _hh_=[8,[4,0],[6,3]],
     _hi_=[0,2,2],
     _hj_=[8,[4,0],[4,0]],
     _hk_=[0,1,1],
     _hl_=[10,[4,0],[4,1]],
     _hm_=[0,1,1],
     _hn_=[10,[4,0],[4,2]],
     _ho_=[0,1,1],
     _hp_=[10,[4,0],[4,3]],
     _hq_=[0,1,1],
     _hr_=[10,[4,0],[4,4]],
     _hs_=[0,1,1],
     _ht_=[10,[4,0],[4,6]],
     _hu_=[0,1,1],
     _hv_=[10,[4,0],[4,7]],
     _hw_=[0,1,1],
     _hx_=[10,[4,0],[6,3]],
     _hy_=[0,2,2],
     _hz_=[10,[4,0],[4,0]],
     _hA_=[0,1,1],
     _hB_=[9,[4,0],[4,1]],
     _hC_=[0,1,1],
     _hD_=[9,[4,0],[4,2]],
     _hE_=[0,1,1],
     _hF_=[9,[4,0],[4,3]],
     _hG_=[0,1,1],
     _hH_=[9,[4,0],[4,4]],
     _hI_=[0,1,1],
     _hJ_=[9,[4,0],[4,6]],
     _hK_=[0,1,1],
     _hL_=[9,[4,0],[4,7]],
     _hM_=[0,1,1],
     _hN_=[9,[4,0],[6,3]],
     _hO_=[0,2,2],
     _hP_=[9,[4,0],[4,0]],
     _hQ_=[0,1,1],
     _hR_=[11,[4,0],[4,1]],
     _hS_=[0,1,1],
     _hT_=[11,[4,0],[4,2]],
     _hU_=[0,1,1],
     _hV_=[11,[4,0],[4,3]],
     _hW_=[0,1,1],
     _hX_=[11,[4,0],[4,4]],
     _hY_=[0,1,1],
     _hZ_=[11,[4,0],[4,6]],
     _h0_=[0,1,1],
     _h1_=[11,[4,0],[4,7]],
     _h2_=[0,1,1],
     _h3_=[11,[4,0],[6,3]],
     _h4_=[0,2,2],
     _h5_=[11,[4,0],[4,0]],
     _h6_=[0,1,1],
     _h7_=[33,1],
     _h8_=[0,2,5],
     _h9_=[28,1],
     _h__=[0,3,3],
     _h$_=[0,3,4],
     _ia_=[0,4,4],
     _ib_=[0,3,6],
     _ic_=[27,1],
     _id_=[0,4,4],
     _ie_=[4,0],
     _if_=[0,2,2],
     _ig_=[0,4,4],
     _ih_=[33,2],
     _ii_=[0,2,5],
     _ij_=[33,0],
     _ik_=[0,4,4],
     _il_=[0,3,4],
     _im_=
      [0,
       [11,
        caml_string_of_jsbytes("Unrecognized opcode after 0xCB: 0x"),
        [4,6,[0,2,2],0,0]],
       caml_string_of_jsbytes("Unrecognized opcode after 0xCB: 0x%02x")],
     _in_=[17,[4,1]],
     _io_=[0,2,2],
     _ip_=[17,[4,2]],
     _iq_=[0,2,2],
     _ir_=[17,[4,3]],
     _is_=[0,2,2],
     _it_=[17,[4,4]],
     _iu_=[0,2,2],
     _iv_=[17,[4,6]],
     _iw_=[0,2,2],
     _ix_=[17,[4,7]],
     _iy_=[0,2,2],
     _iz_=[17,[6,3]],
     _iA_=[0,4,4],
     _iB_=[17,[4,0]],
     _iC_=[0,2,2],
     _iD_=[19,[4,1]],
     _iE_=[0,2,2],
     _iF_=[19,[4,2]],
     _iG_=[0,2,2],
     _iH_=[19,[4,3]],
     _iI_=[0,2,2],
     _iJ_=[19,[4,4]],
     _iK_=[0,2,2],
     _iL_=[19,[4,6]],
     _iM_=[0,2,2],
     _iN_=[19,[4,7]],
     _iO_=[0,2,2],
     _iP_=[19,[6,3]],
     _iQ_=[0,4,4],
     _iR_=[19,[4,0]],
     _iS_=[0,2,2],
     _iT_=[18,[4,1]],
     _iU_=[0,2,2],
     _iV_=[18,[4,2]],
     _iW_=[0,2,2],
     _iX_=[18,[4,3]],
     _iY_=[0,2,2],
     _iZ_=[18,[4,4]],
     _i0_=[0,2,2],
     _i1_=[18,[4,6]],
     _i2_=[0,2,2],
     _i3_=[18,[4,7]],
     _i4_=[0,2,2],
     _i5_=[18,[6,3]],
     _i6_=[0,4,4],
     _i7_=[18,[4,0]],
     _i8_=[0,2,2],
     _i9_=[20,[4,1]],
     _i__=[0,2,2],
     _i$_=[20,[4,2]],
     _ja_=[0,2,2],
     _jb_=[20,[4,3]],
     _jc_=[0,2,2],
     _jd_=[20,[4,4]],
     _je_=[0,2,2],
     _jf_=[20,[4,6]],
     _jg_=[0,2,2],
     _jh_=[20,[4,7]],
     _ji_=[0,2,2],
     _jj_=[20,[6,3]],
     _jk_=[0,4,4],
     _jl_=[20,[4,0]],
     _jm_=[0,2,2],
     _jn_=[21,[4,1]],
     _jo_=[0,2,2],
     _jp_=[21,[4,2]],
     _jq_=[0,2,2],
     _jr_=[21,[4,3]],
     _js_=[0,2,2],
     _jt_=[21,[4,4]],
     _ju_=[0,2,2],
     _jv_=[21,[4,6]],
     _jw_=[0,2,2],
     _jx_=[21,[4,7]],
     _jy_=[0,2,2],
     _jz_=[21,[6,3]],
     _jA_=[0,4,4],
     _jB_=[21,[4,0]],
     _jC_=[0,2,2],
     _jD_=[22,[4,1]],
     _jE_=[0,2,2],
     _jF_=[22,[4,2]],
     _jG_=[0,2,2],
     _jH_=[22,[4,3]],
     _jI_=[0,2,2],
     _jJ_=[22,[4,4]],
     _jK_=[0,2,2],
     _jL_=[22,[4,6]],
     _jM_=[0,2,2],
     _jN_=[22,[4,7]],
     _jO_=[0,2,2],
     _jP_=[22,[6,3]],
     _jQ_=[0,4,4],
     _jR_=[22,[4,0]],
     _jS_=[0,2,2],
     _jT_=[16,[4,1]],
     _jU_=[0,2,2],
     _jV_=[16,[4,2]],
     _jW_=[0,2,2],
     _jX_=[16,[4,3]],
     _jY_=[0,2,2],
     _jZ_=[16,[4,4]],
     _j0_=[0,2,2],
     _j1_=[16,[4,6]],
     _j2_=[0,2,2],
     _j3_=[16,[4,7]],
     _j4_=[0,2,2],
     _j5_=[16,[6,3]],
     _j6_=[0,4,4],
     _j7_=[16,[4,0]],
     _j8_=[0,2,2],
     _j9_=[23,[4,1]],
     _j__=[0,2,2],
     _j$_=[23,[4,2]],
     _ka_=[0,2,2],
     _kb_=[23,[4,3]],
     _kc_=[0,2,2],
     _kd_=[23,[4,4]],
     _ke_=[0,2,2],
     _kf_=[23,[4,6]],
     _kg_=[0,2,2],
     _kh_=[23,[4,7]],
     _ki_=[0,2,2],
     _kj_=[23,[6,3]],
     _kk_=[0,4,4],
     _kl_=[23,[4,0]],
     _km_=[0,2,2],
     _kn_=[24,0,[4,1]],
     _ko_=[0,2,2],
     _kp_=[24,0,[4,2]],
     _kq_=[0,2,2],
     _kr_=[24,0,[4,3]],
     _ks_=[0,2,2],
     _kt_=[24,0,[4,4]],
     _ku_=[0,2,2],
     _kv_=[24,0,[4,6]],
     _kw_=[0,2,2],
     _kx_=[24,0,[4,7]],
     _ky_=[0,2,2],
     _kz_=[24,0,[6,3]],
     _kA_=[0,3,3],
     _kB_=[24,0,[4,0]],
     _kC_=[0,2,2],
     _kD_=[24,1,[4,1]],
     _kE_=[0,2,2],
     _kF_=[24,1,[4,2]],
     _kG_=[0,2,2],
     _kH_=[24,1,[4,3]],
     _kI_=[0,2,2],
     _kJ_=[24,1,[4,4]],
     _kK_=[0,2,2],
     _kL_=[24,1,[4,6]],
     _kM_=[0,2,2],
     _kN_=[24,1,[4,7]],
     _kO_=[0,2,2],
     _kP_=[24,1,[6,3]],
     _kQ_=[0,3,3],
     _kR_=[24,1,[4,0]],
     _kS_=[0,2,2],
     _kT_=[24,2,[4,1]],
     _kU_=[0,2,2],
     _kV_=[24,2,[4,2]],
     _kW_=[0,2,2],
     _kX_=[24,2,[4,3]],
     _kY_=[0,2,2],
     _kZ_=[24,2,[4,4]],
     _k0_=[0,2,2],
     _k1_=[24,2,[4,6]],
     _k2_=[0,2,2],
     _k3_=[24,2,[4,7]],
     _k4_=[0,2,2],
     _k5_=[24,2,[6,3]],
     _k6_=[0,3,3],
     _k7_=[24,2,[4,0]],
     _k8_=[0,2,2],
     _k9_=[24,3,[4,1]],
     _k__=[0,2,2],
     _k$_=[24,3,[4,2]],
     _la_=[0,2,2],
     _lb_=[24,3,[4,3]],
     _lc_=[0,2,2],
     _ld_=[24,3,[4,4]],
     _le_=[0,2,2],
     _lf_=[24,3,[4,6]],
     _lg_=[0,2,2],
     _lh_=[24,3,[4,7]],
     _li_=[0,2,2],
     _lj_=[24,3,[6,3]],
     _lk_=[0,3,3],
     _ll_=[24,3,[4,0]],
     _lm_=[0,2,2],
     _ln_=[24,4,[4,1]],
     _lo_=[0,2,2],
     _lp_=[24,4,[4,2]],
     _lq_=[0,2,2],
     _lr_=[24,4,[4,3]],
     _ls_=[0,2,2],
     _lt_=[24,4,[4,4]],
     _lu_=[0,2,2],
     _lv_=[24,4,[4,6]],
     _lw_=[0,2,2],
     _lx_=[24,4,[4,7]],
     _ly_=[0,2,2],
     _lz_=[24,4,[6,3]],
     _lA_=[0,3,3],
     _lB_=[24,4,[4,0]],
     _lC_=[0,2,2],
     _lD_=[24,5,[4,1]],
     _lE_=[0,2,2],
     _lF_=[24,5,[4,2]],
     _lG_=[0,2,2],
     _lH_=[24,5,[4,3]],
     _lI_=[0,2,2],
     _lJ_=[24,5,[4,4]],
     _lK_=[0,2,2],
     _lL_=[24,5,[4,6]],
     _lM_=[0,2,2],
     _lN_=[24,5,[4,7]],
     _lO_=[0,2,2],
     _lP_=[24,5,[6,3]],
     _lQ_=[0,3,3],
     _lR_=[24,5,[4,0]],
     _lS_=[0,2,2],
     _lT_=[24,6,[4,1]],
     _lU_=[0,2,2],
     _lV_=[24,6,[4,2]],
     _lW_=[0,2,2],
     _lX_=[24,6,[4,3]],
     _lY_=[0,2,2],
     _lZ_=[24,6,[4,4]],
     _l0_=[0,2,2],
     _l1_=[24,6,[4,6]],
     _l2_=[0,2,2],
     _l3_=[24,6,[4,7]],
     _l4_=[0,2,2],
     _l5_=[24,6,[6,3]],
     _l6_=[0,3,3],
     _l7_=[24,6,[4,0]],
     _l8_=[0,2,2],
     _l9_=[24,7,[4,1]],
     _l__=[0,2,2],
     _l$_=[24,7,[4,2]],
     _ma_=[0,2,2],
     _mb_=[24,7,[4,3]],
     _mc_=[0,2,2],
     _md_=[24,7,[4,4]],
     _me_=[0,2,2],
     _mf_=[24,7,[4,6]],
     _mg_=[0,2,2],
     _mh_=[24,7,[4,7]],
     _mi_=[0,2,2],
     _mj_=[24,7,[6,3]],
     _mk_=[0,3,3],
     _ml_=[24,7,[4,0]],
     _mm_=[0,2,2],
     _mn_=[26,0,[4,1]],
     _mo_=[0,2,2],
     _mp_=[26,0,[4,2]],
     _mq_=[0,2,2],
     _mr_=[26,0,[4,3]],
     _ms_=[0,2,2],
     _mt_=[26,0,[4,4]],
     _mu_=[0,2,2],
     _mv_=[26,0,[4,6]],
     _mw_=[0,2,2],
     _mx_=[26,0,[4,7]],
     _my_=[0,2,2],
     _mz_=[26,0,[6,3]],
     _mA_=[0,4,4],
     _mB_=[26,0,[4,0]],
     _mC_=[0,2,2],
     _mD_=[26,1,[4,1]],
     _mE_=[0,2,2],
     _mF_=[26,1,[4,2]],
     _mG_=[0,2,2],
     _mH_=[26,1,[4,3]],
     _mI_=[0,2,2],
     _mJ_=[26,1,[4,4]],
     _mK_=[0,2,2],
     _mL_=[26,1,[4,6]],
     _mM_=[0,2,2],
     _mN_=[26,1,[4,7]],
     _mO_=[0,2,2],
     _mP_=[26,1,[6,3]],
     _mQ_=[0,4,4],
     _mR_=[26,1,[4,0]],
     _mS_=[0,2,2],
     _mT_=[26,2,[4,1]],
     _mU_=[0,2,2],
     _mV_=[26,2,[4,2]],
     _mW_=[0,2,2],
     _mX_=[26,2,[4,3]],
     _mY_=[0,2,2],
     _mZ_=[26,2,[4,4]],
     _m0_=[0,2,2],
     _m1_=[26,2,[4,6]],
     _m2_=[0,2,2],
     _m3_=[26,2,[4,7]],
     _m4_=[0,2,2],
     _m5_=[26,2,[6,3]],
     _m6_=[0,4,4],
     _m7_=[26,2,[4,0]],
     _m8_=[0,2,2],
     _m9_=[26,3,[4,1]],
     _m__=[0,2,2],
     _m$_=[26,3,[4,2]],
     _na_=[0,2,2],
     _nb_=[26,3,[4,3]],
     _nc_=[0,2,2],
     _nd_=[26,3,[4,4]],
     _ne_=[0,2,2],
     _nf_=[26,3,[4,6]],
     _ng_=[0,2,2],
     _nh_=[26,3,[4,7]],
     _ni_=[0,2,2],
     _nj_=[26,3,[6,3]],
     _nk_=[0,4,4],
     _nl_=[26,3,[4,0]],
     _nm_=[0,2,2],
     _nn_=[26,4,[4,1]],
     _no_=[0,2,2],
     _np_=[26,4,[4,2]],
     _nq_=[0,2,2],
     _nr_=[26,4,[4,3]],
     _ns_=[0,2,2],
     _nt_=[26,4,[4,4]],
     _nu_=[0,2,2],
     _nv_=[26,4,[4,6]],
     _nw_=[0,2,2],
     _nx_=[26,4,[4,7]],
     _ny_=[0,2,2],
     _nz_=[26,4,[6,3]],
     _nA_=[0,4,4],
     _nB_=[26,4,[4,0]],
     _nC_=[0,2,2],
     _nD_=[26,5,[4,1]],
     _nE_=[0,2,2],
     _nF_=[26,5,[4,2]],
     _nG_=[0,2,2],
     _nH_=[26,5,[4,3]],
     _nI_=[0,2,2],
     _nJ_=[26,5,[4,4]],
     _nK_=[0,2,2],
     _nL_=[26,5,[4,6]],
     _nM_=[0,2,2],
     _nN_=[26,5,[4,7]],
     _nO_=[0,2,2],
     _nP_=[26,5,[6,3]],
     _nQ_=[0,4,4],
     _nR_=[26,5,[4,0]],
     _nS_=[0,2,2],
     _nT_=[26,6,[4,1]],
     _nU_=[0,2,2],
     _nV_=[26,6,[4,2]],
     _nW_=[0,2,2],
     _nX_=[26,6,[4,3]],
     _nY_=[0,2,2],
     _nZ_=[26,6,[4,4]],
     _n0_=[0,2,2],
     _n1_=[26,6,[4,6]],
     _n2_=[0,2,2],
     _n3_=[26,6,[4,7]],
     _n4_=[0,2,2],
     _n5_=[26,6,[6,3]],
     _n6_=[0,4,4],
     _n7_=[26,6,[4,0]],
     _n8_=[0,2,2],
     _n9_=[26,7,[4,1]],
     _n__=[0,2,2],
     _n$_=[26,7,[4,2]],
     _oa_=[0,2,2],
     _ob_=[26,7,[4,3]],
     _oc_=[0,2,2],
     _od_=[26,7,[4,4]],
     _oe_=[0,2,2],
     _of_=[26,7,[4,6]],
     _og_=[0,2,2],
     _oh_=[26,7,[4,7]],
     _oi_=[0,2,2],
     _oj_=[26,7,[6,3]],
     _ok_=[0,4,4],
     _ol_=[26,7,[4,0]],
     _om_=[0,2,2],
     _on_=[25,0,[4,1]],
     _oo_=[0,2,2],
     _op_=[25,0,[4,2]],
     _oq_=[0,2,2],
     _or_=[25,0,[4,3]],
     _os_=[0,2,2],
     _ot_=[25,0,[4,4]],
     _ou_=[0,2,2],
     _ov_=[25,0,[4,6]],
     _ow_=[0,2,2],
     _ox_=[25,0,[4,7]],
     _oy_=[0,2,2],
     _oz_=[25,0,[6,3]],
     _oA_=[0,4,4],
     _oB_=[25,0,[4,0]],
     _oC_=[0,2,2],
     _oD_=[25,1,[4,1]],
     _oE_=[0,2,2],
     _oF_=[25,1,[4,2]],
     _oG_=[0,2,2],
     _oH_=[25,1,[4,3]],
     _oI_=[0,2,2],
     _oJ_=[25,1,[4,4]],
     _oK_=[0,2,2],
     _oL_=[25,1,[4,6]],
     _oM_=[0,2,2],
     _oN_=[25,1,[4,7]],
     _oO_=[0,2,2],
     _oP_=[25,1,[6,3]],
     _oQ_=[0,4,4],
     _oR_=[25,1,[4,0]],
     _oS_=[0,2,2],
     _oT_=[25,2,[4,1]],
     _oU_=[0,2,2],
     _oV_=[25,2,[4,2]],
     _oW_=[0,2,2],
     _oX_=[25,2,[4,3]],
     _oY_=[0,2,2],
     _oZ_=[25,2,[4,4]],
     _o0_=[0,2,2],
     _o1_=[25,2,[4,6]],
     _o2_=[0,2,2],
     _o3_=[25,2,[4,7]],
     _o4_=[0,2,2],
     _o5_=[25,2,[6,3]],
     _o6_=[0,4,4],
     _o7_=[25,2,[4,0]],
     _o8_=[0,2,2],
     _o9_=[25,3,[4,1]],
     _o__=[0,2,2],
     _o$_=[25,3,[4,2]],
     _pa_=[0,2,2],
     _pb_=[25,3,[4,3]],
     _pc_=[0,2,2],
     _pd_=[25,3,[4,4]],
     _pe_=[0,2,2],
     _pf_=[25,3,[4,6]],
     _pg_=[0,2,2],
     _ph_=[25,3,[4,7]],
     _pi_=[0,2,2],
     _pj_=[25,3,[6,3]],
     _pk_=[0,4,4],
     _pl_=[25,3,[4,0]],
     _pm_=[0,2,2],
     _pn_=[25,4,[4,1]],
     _po_=[0,2,2],
     _pp_=[25,4,[4,2]],
     _pq_=[0,2,2],
     _pr_=[25,4,[4,3]],
     _ps_=[0,2,2],
     _pt_=[25,4,[4,4]],
     _pu_=[0,2,2],
     _pv_=[25,4,[4,6]],
     _pw_=[0,2,2],
     _px_=[25,4,[4,7]],
     _py_=[0,2,2],
     _pz_=[25,4,[6,3]],
     _pA_=[0,4,4],
     _pB_=[25,4,[4,0]],
     _pC_=[0,2,2],
     _pD_=[25,5,[4,1]],
     _pE_=[0,2,2],
     _pF_=[25,5,[4,2]],
     _pG_=[0,2,2],
     _pH_=[25,5,[4,3]],
     _pI_=[0,2,2],
     _pJ_=[25,5,[4,4]],
     _pK_=[0,2,2],
     _pL_=[25,5,[4,6]],
     _pM_=[0,2,2],
     _pN_=[25,5,[4,7]],
     _pO_=[0,2,2],
     _pP_=[25,5,[6,3]],
     _pQ_=[0,4,4],
     _pR_=[25,5,[4,0]],
     _pS_=[0,2,2],
     _pT_=[25,6,[4,1]],
     _pU_=[0,2,2],
     _pV_=[25,6,[4,2]],
     _pW_=[0,2,2],
     _pX_=[25,6,[4,3]],
     _pY_=[0,2,2],
     _pZ_=[25,6,[4,4]],
     _p0_=[0,2,2],
     _p1_=[25,6,[4,6]],
     _p2_=[0,2,2],
     _p3_=[25,6,[4,7]],
     _p4_=[0,2,2],
     _p5_=[25,6,[6,3]],
     _p6_=[0,4,4],
     _p7_=[25,6,[4,0]],
     _p8_=[0,2,2],
     _p9_=[25,7,[4,1]],
     _p__=[0,2,2],
     _p$_=[25,7,[4,2]],
     _qa_=[0,2,2],
     _qb_=[25,7,[4,3]],
     _qc_=[0,2,2],
     _qd_=[25,7,[4,4]],
     _qe_=[0,2,2],
     _qf_=[25,7,[4,6]],
     _qg_=[0,2,2],
     _qh_=[25,7,[4,7]],
     _qi_=[0,2,2],
     _qj_=[25,7,[6,3]],
     _qk_=[0,4,4],
     _ql_=[25,7,[4,0]],
     _qm_=[0,2,2],
     _qn_=[0,3,6],
     _qo_=[0,6,6],
     _qp_=[4,0],
     _qq_=[0,2,2],
     _qr_=[0,4,4],
     _qs_=[33,3],
     _qt_=[0,2,5],
     _qu_=[28,2],
     _qv_=[0,3,3],
     _qw_=[0,3,4],
     _qx_=[0,1,1],
     _qy_=[0,3,6],
     _qz_=[27,2],
     _qA_=[0,4,4],
     _qB_=[4,0],
     _qC_=[0,2,2],
     _qD_=[0,4,4],
     _qE_=[33,4],
     _qF_=[0,2,5],
     _qG_=[0,4,4],
     _qH_=[0,3,4],
     _qI_=[0,1,1],
     _qJ_=[0,3,6],
     _qK_=[0,1,1],
     _qL_=[4,0],
     _qM_=[0,2,2],
     _qN_=[0,4,4],
     _qO_=[4,0],
     _qP_=[0,3,3],
     _qQ_=[28,3],
     _qR_=[0,3,3],
     _qS_=[0,0,[4,0]],
     _qT_=[0,2,2],
     _qU_=[0,1,1],
     _qV_=[0,1,1],
     _qW_=[27,3],
     _qX_=[0,4,4],
     _qY_=[4,0],
     _qZ_=[0,2,2],
     _q0_=[0,4,4],
     _q1_=[0,4,4],
     _q2_=[29,0,[5,3]],
     _q3_=[0,1,1],
     _q4_=[4,0],
     _q5_=[0,4,4],
     _q6_=[0,1,1],
     _q7_=[0,1,1],
     _q8_=[0,1,1],
     _q9_=[4,0],
     _q__=[0,2,2],
     _q$_=[0,4,4],
     _ra_=[4,0],
     _rb_=[0,3,3],
     _rc_=[28,0],
     _rd_=[0,3,3],
     _re_=[0,[4,0],0],
     _rf_=[0,2,2],
     _rg_=[0,1,1],
     _rh_=[0,1,1],
     _ri_=[27,0],
     _rj_=[0,4,4],
     _rk_=[4,0],
     _rl_=[0,2,2],
     _rm_=[0,4,4],
     _rn_=[5,3],
     _ro_=[0,3,3],
     _rp_=[1,3,[5,3]],
     _rq_=[0,2,2],
     _rr_=[4,0],
     _rs_=[0,4,4],
     _rt_=[0,1,1],
     _ru_=[0,1,1],
     _rv_=[0,1,1],
     _rw_=[4,0],
     _rx_=[0,2,2],
     _ry_=[0,4,4],
     _rz_=
      [0,
       [11,caml_string_of_jsbytes("Unknown rom type : 0x"),[4,6,0,0,0]],
       caml_string_of_jsbytes("Unknown rom type : 0x%x")],
     _rA_=
      [0,caml_string_of_jsbytes("lib/cartridge/cartridge_header.ml"),33,11],
     _rB_=
      [0,caml_string_of_jsbytes("lib/cartridge/cartridge_header.ml"),43,11],
     _rH_=[0,caml_string_of_jsbytes("lib/cartridge/cartridge_mbc1.ml"),114,9],
     _rG_=
      [0,
       [11,caml_string_of_jsbytes("Unexpected rom size: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Unexpected rom size: %d")],
     _rF_=[0,caml_string_of_jsbytes("lib/cartridge/cartridge_mbc1.ml"),84,9],
     _rE_=
      [0,
       [11,caml_string_of_jsbytes("Unexpected ram size: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Unexpected ram size: %d")],
     _rD_=[0,caml_string_of_jsbytes("lib/cartridge/cartridge_mbc1.ml"),51,9],
     _rC_=[0,caml_string_of_jsbytes("lib/cartridge/cartridge_mbc1.ml"),39,13],
     _rJ_=caml_string_of_jsbytes("Address out of bounds"),
     _rL_=
      [0,caml_string_of_jsbytes("lib/cartridge/detect_cartridge.ml"),11,31],
     _rO_=
      [0,
       [11,caml_string_of_jsbytes("Invalid arugment"),0],
       caml_string_of_jsbytes("Invalid arugment")],
     _rP_=
      [0,
       [11,caml_string_of_jsbytes("Invalid arugment"),0],
       caml_string_of_jsbytes("Invalid arugment")],
     _rQ_=
      [0,
       [11,caml_string_of_jsbytes("Invalid arugment"),0],
       caml_string_of_jsbytes("Invalid arugment")],
     _rM_=[0,0],
     _rN_=[0,0],
     _rS_=[0,1],
     _rR_=[0,0],
     _rT_=[0,1],
     _rU_=[0,1],
     _rV_=[0,0],
     _rW_=[0,0],
     _rX_=[0,0],
     _rY_=[0,0],
     _rZ_=[0,1],
     _r0_=[0,caml_string_of_jsbytes("lib/cpu/cpu.ml"),282,16],
     _r1_=[0,0],
     _r2_=[0,0],
     _r3_=[0,0],
     _r4_=[0,0],
     _r5_=[0,0],
     _r6_=[0,0],
     _r7_=[0,0],
     _r8_=[0,0],
     _r9_=[0,0],
     _r__=[0,0],
     _r$_=[0,0],
     _sa_=[0,0],
     _sb_=[0,0],
     _sc_=[0,0],
     _sd_=[0,0],
     _se_=[0,0],
     _sf_=[0,0],
     _sg_=[0,1],
     _sh_=[0,1],
     _si_=[0,0],
     _sj_=[0,1],
     _sk_=[0,0],
     _sl_=[0,0],
     _sm_=[0,0],
     _sn_=[0,0],
     _so_=[0,0],
     _sp_=[0,0],
     _sq_=[0,0],
     _sr_=[0,1],
     _ss_=[0,0],
     _st_=[0,1],
     _su_=[0,0],
     _sv_=[0,0],
     _sw_=[0,0],
     _sx_=[0,0],
     _sy_=[0,0],
     _sz_=[0,0],
     _sA_=[0,0],
     _sB_=[0,0],
     _sC_=[0,0],
     _sD_=[0,0],
     _sE_=[0,0],
     _sF_=[0,0],
     _sG_=[0,0],
     _sH_=[0,0],
     _sI_=[0,0],
     _sJ_=[0,0],
     _sK_=[0,0],
     _sL_=[0,0],
     _sM_=[0,1],
     _sN_=[0,1],
     _sO_=[0,0],
     _sP_=[0,1],
     _sQ_=[0,1],
     _sR_=[0,[0,0,432],[0,[0,1,19],[0,[0,2,216],[0,[0,3,333],0]]]],
     _sS_=
      caml_list_of_js_array
       ([[0,65280,207],
         [0,65281,0],
         [0,65282,126],
         [0,65284,171],
         [0,65285,0],
         [0,65286,0],
         [0,65287,248],
         [0,65295,225],
         [0,65344,145],
         [0,65346,0],
         [0,65347,0],
         [0,65348,0],
         [0,65349,0],
         [0,65350,255],
         [0,65351,252],
         [0,65354,0],
         [0,65355,0],
         [0,65535,0]]),
     _sZ_=caml_string_of_jsbytes("FPS"),
     _s0_=caml_string_of_jsbytes("Duration"),
     _s1_=caml_string_of_jsbytes("Frames"),
     _s2_=caml_string_of_jsbytes("ROM path"),
     _s3_=
      [0,
       [2,
        [0,1,8],
        [11,
         caml_string_of_jsbytes(": "),
         [2,
          0,
          [12,
           10,
           [2,
            [0,1,8],
            [11,
             caml_string_of_jsbytes(": "),
             [4,
              0,
              0,
              0,
              [12,10,[2,[0,1,8],[11,caml_string_of_jsbytes(": "),partial$0]]]]]]]]]],
       caml_string_of_jsbytes("%8s: %s\n%8s: %d\n%8s: %f\n%8s: %f\n")],
     _sU_=caml_string_of_jsbytes("tobu.gb"),
     _sV_=caml_string_of_jsbytes("rom_path"),
     _sW_=caml_string_of_jsbytes("1500"),
     _sX_=caml_string_of_jsbytes("frames");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function compare_and_set(r,seen,v)
     {var cur=r[1];return cur === seen?(r[1] = v,1):0}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function abs(x){return 0 <= x?x:- x | 0}
    function cat(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_zI_)
             {_zI_ = caml_wrap_exception(_zI_);
              if(_zI_[1] !== Sys_error)throw _zI_;
              var _zH_=_zI_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    var exit_function=[0,flush_all];
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    caml_register_named_value
     (caml_string_of_jsbytes("Pervasives.do_at_exit"),do_at_exit);
    if(caml_sys_const_naked_pointers_checked(0))
     for(;;)
      {var
        f_yet_to_run=[0,1],
        old_exit=exit_function[1],
        new_exit$0=
         function(f_yet_to_run,old_exit)
          {function new_exit(param)
            {if(compare_and_set(f_yet_to_run,1,0))caml_gc_major(0);
             return caml_call1(old_exit,0)}
           return new_exit},
        new_exit=new_exit$0(f_yet_to_run,old_exit),
        success=compare_and_set(exit_function,old_exit,new_exit);
       if(1 - success)continue;
       break}
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    typeof match === "number";
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function abs$0(x){return 0 <= x?x:- x | 0}
    var compare=caml_int_compare;
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub_string(b,ofs,len)
     {var switch$0=0;
      if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(b) - len | 0) < ofs))
       {var r=caml_create_bytes(len);
        caml_blit_bytes(b,ofs,r,0,len);
        var _zG_=r;
        switch$0 = 1}
      if(! switch$0)var _zG_=invalid_arg(_l_);
      return caml_string_of_bytes(_zG_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_m_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_n_)}
    function create_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_zE_=sx - 1 | 0,_zD_=0;
      if(! (_zE_ < 0))
       {var x=_zD_;
        for(;;)
         {res[1 + x] = caml_make_vect(sy,init);
          var _zF_=x + 1 | 0;
          if(_zE_ !== x){var x=_zF_;continue}
          break}}
      return res}
    caml_fresh_oo_id(0);
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_q_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_o_]}
        throw [0,Assert_failure,_p_]}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       y=buf[1] + overhead | 0,
       _zB_=len < y?1:0;
      if(_zB_)
       {var
         x=len * 2 | 0,
         new_len=y <= x?x:y,
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _zC_=0}
      else
       var _zC_=_zB_;
      return _zC_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _r_;
         case 1:return _s_;
         case 2:return _t_;
         case 3:return _u_;
         case 4:return _v_;
         case 5:return _w_;
         default:return _x_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:
          var c=formatting_lit[1];
          return cat(_y_,caml_string_of_bytes(make(1,c)))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_z_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_A_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_B_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_C_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_D_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_H_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_I_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_J_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_K_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_L_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_M_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_N_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _zd_=function(param){return 0},
         _ze_=function(param){return 0},
         _zf_=function(param){return 0};
        return [0,function(param){return 0},_zf_,_ze_,_zd_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _zg_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_zg_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _zh_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _zh_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _zi_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _zi_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _zj_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _zj_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _zk_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _zk_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _zl_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _zl_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _zm_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _zm_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _zn_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _zn_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _zo_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _zo_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _zp_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _zq_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _zr_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _zr_,
                  _zq_,
                  _zp_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _zs_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _zs_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _zt_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _zt_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _zu_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _zu_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _zv_=function(param){caml_call1(de$12,0);return 0},
           _zw_=function(param){caml_call1(ed$12,0);return 0},
           _zx_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _zx_,
                  _zw_,
                  _zv_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _zy_=function(param){caml_call1(de$13,0);return 0},
           _zz_=function(param){caml_call1(ed$13,0);return 0},
           _zA_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _zA_,
                  _zz_,
                  _zy_]}}
    function trans(ty1,ty2)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof ty2 === "number")
        return 0;
       else
        switch(ty2[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_Q_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_yW_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 0:var rest2=ty2[1];return [0,trans(_yW_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_yX_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 1:var rest2$0=ty2[1];return [1,trans(_yX_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_yY_=ty1[1];
          if(typeof ty2 === "number")
           switch$3 = 1;
          else
           switch(ty2[0])
            {case 2:var rest2$1=ty2[1];return [2,trans(_yY_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_yZ_=ty1[1];
          if(typeof ty2 === "number")
           switch$4 = 1;
          else
           switch(ty2[0])
            {case 3:var rest2$2=ty2[1];return [3,trans(_yZ_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_y0_=ty1[1];
          if(typeof ty2 === "number")
           switch$5 = 1;
          else
           switch(ty2[0])
            {case 4:var rest2$3=ty2[1];return [4,trans(_y0_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_y1_=ty1[1];
          if(typeof ty2 === "number")
           switch$6 = 1;
          else
           switch(ty2[0])
            {case 5:var rest2$4=ty2[1];return [5,trans(_y1_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_y2_=ty1[1];
          if(typeof ty2 === "number")
           switch$7 = 1;
          else
           switch(ty2[0])
            {case 6:var rest2$5=ty2[1];return [6,trans(_y2_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_y3_=ty1[1];
          if(typeof ty2 === "number")
           switch$8 = 1;
          else
           switch(ty2[0])
            {case 7:var rest2$6=ty2[1];return [7,trans(_y3_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_y4_=ty1[2],_y5_=ty1[1];
          if(typeof ty2 === "number")
           switch$9 = 1;
          else
           switch(ty2[0])
            {case 8:
              var rest2$7=ty2[2],ty2$0=ty2[1],_y6_=trans(_y4_,rest2$7);
              return [8,trans(_y5_,ty2$0),_y6_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_Z_];
          break;
         case 9:
          var switch$10=0,_y7_=ty1[3],_y8_=ty1[2],_y9_=ty1[1];
          if(typeof ty2 === "number")
           switch$10 = 1;
          else
           switch(ty2[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=ty2[3],
               ty22=ty2[2],
               ty21=ty2[1],
               ty=trans(symm(_y8_),ty21),
               match=fmtty_rel_det(ty),
               f4=match[4],
               f2=match[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_y9_,ty22,trans(_y7_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,___];
          break;
         case 10:
          var _y__=ty1[1];
          if(typeof ty2 !== "number" && 10 === ty2[0])
           {var rest2$9=ty2[1];return [10,trans(_y__,rest2$9)]}
          throw [0,Assert_failure,_$_];
         case 11:
          var switch$11=0,_y$_=ty1[1];
          if(typeof ty2 === "number")
           switch$11 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:var rest2$10=ty2[1];return [11,trans(_y$_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_aa_];
          break;
         case 12:
          var switch$12=0,_za_=ty1[1];
          if(typeof ty2 === "number")
           switch$12 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=ty2[1];return [12,trans(_za_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_ab_];
          break;
         case 13:
          var switch$13=0,_zb_=ty1[1];
          if(typeof ty2 === "number")
           switch$13 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=ty2[1];return [13,trans(_zb_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_ac_];
          break;
         default:
          var switch$14=0,_zc_=ty1[1];
          if(typeof ty2 === "number")
           switch$14 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=ty2[1];return [14,trans(_zc_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_ad_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_T_];
        case 1:throw [0,Assert_failure,_U_];
        case 2:throw [0,Assert_failure,_V_];
        case 3:throw [0,Assert_failure,_W_];
        case 4:throw [0,Assert_failure,_X_];
        case 5:throw [0,Assert_failure,_R_];
        case 6:throw [0,Assert_failure,_S_];
        default:throw [0,Assert_failure,_Y_]}}
    var Type_mismatch=[248,_ae_,caml_fresh_oo_id(0)];
    function type_padding(pad,fmtty)
     {if(typeof pad === "number")
       return [0,0,fmtty];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],fmtty]}
        if(typeof fmtty !== "number" && 2 === fmtty[0])
         {var rest=fmtty[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _yV_=match[2];
          if(typeof _yV_ !== "number" && 2 === _yV_[0])
           {var rest=_yV_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,fmtty)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,fmtty)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             sub_fmtty_rest=sub_fmtty[1],
             match=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match[2],
             sub_fmtty_rest$0=match[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$0[2],
             sub_fmtty_rest$2=match$0[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$1=fmtty[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$1[2],
             sub_fmtty_rest$4=match$1[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof fmtty !== "number" && 3 === fmtty[0])
           {var
             fmtty_rest$2=fmtty[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$2[2],
             sub_fmtty_rest$6=match$2[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof fmtty !== "number" && 4 === fmtty[0])
           {var
             fmtty_rest$3=fmtty[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$3[2],
             sub_fmtty_rest$8=match$3[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof fmtty !== "number" && 5 === fmtty[0])
           {var
             fmtty_rest$4=fmtty[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$4[2],
             sub_fmtty_rest$10=match$4[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof fmtty !== "number" && 6 === fmtty[0])
           {var
             fmtty_rest$5=fmtty[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$5[2],
             sub_fmtty_rest$12=match$5[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$6=fmtty[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$6[2],
             sub_fmtty_rest$14=match$6[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$7=fmtty[2],
             sub2_fmtty=fmtty[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$7[2],
             sub_fmtty_rest$16=match$7[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[3],
             sub2_fmtty$1=fmtty[2],
             sub1_fmtty=fmtty[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _yT_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_yT_))
             throw Type_mismatch;
            var _yU_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_yU_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$8=fmtty_rel_det(sub_fmtty$0),
             f4=match$8[4],
             f2=match$8[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$9=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$9[2],
             sub_fmtty_rest$18=match$9[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$10=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$10[2],
             sub_fmtty_rest$20=match$10[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$11[2],
             sub_fmtty_rest$22=match$11[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$12[2],
             sub_fmtty_rest$24=match$12[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 14 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$13[2],
             sub_fmtty_rest$26=match$13[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _yC_=match$1[2],
           _yB_=match$1[1];
          if(typeof _yC_ !== "number" && 1 === _yC_[0])
           {var
             fmtty_rest$1=_yC_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_yB_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _yE_=match$3[2],
           _yD_=match$3[1];
          if(typeof _yE_ !== "number" && 1 === _yE_[0])
           {var
             fmtty_rest$2=_yE_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_yD_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _yG_=match$5[3],
           _yF_=match$5[1];
          if(typeof _yG_ !== "number" && 2 === _yG_[0])
           {var
             fmtty_rest$3=_yG_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_yF_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _yI_=match$7[3],
           _yH_=match$7[1];
          if(typeof _yI_ !== "number" && 3 === _yI_[0])
           {var
             fmtty_rest$4=_yI_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_yH_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _yK_=match$9[3],
           _yJ_=match$9[1];
          if(typeof _yK_ !== "number" && 4 === _yK_[0])
           {var
             fmtty_rest$5=_yK_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_yJ_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _yM_=match$11[3],
           _yL_=match$11[1];
          if(typeof _yM_ !== "number" && 5 === _yM_[0])
           {var
             fmtty_rest$6=_yM_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_yL_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _yO_=match$13[3],
           _yN_=match$13[1];
          if(typeof _yO_ !== "number" && 6 === _yO_[0])
           {var
             fmtty_rest$7=_yO_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_yN_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _yQ_=match$15[2],
           _yP_=match$15[1];
          if(typeof _yQ_ !== "number" && 7 === _yQ_[0])
           {var
             fmtty_rest$8=_yQ_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_yP_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _yR_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_yR_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _yS_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_yS_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_yS_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _yA_=2 === padty$0?48:32,res=make(width$0,_yA_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _yy_=match$0 - 32 | 0,
           switch$0=0;
          if(59 < _yy_ >>> 0)
           {if(33 < (_yy_ - 61 | 0) >>> 0)switch$0 = 1}
          else
           if(2 === _yy_)switch$0 = 1;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _yr_=caml_ml_bytes_length(s$0) - 1 | 0,
           _yq_=0;
          if(! (_yr_ < 0))
           {var i$0=_yq_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0),switch$1=0;
              if(32 <= match)
               {var _yv_=match - 34 | 0,switch$2=0;
                if(58 < _yv_ >>> 0)
                 {if(93 <= _yv_)switch$2 = 1}
                else
                 if(56 < (_yv_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _yw_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _yw_=4;break;case 1:var _yw_=2;break}
              n[1] = n[1] + _yw_ | 0;
              var _yx_=i$0 + 1 | 0;
              if(_yr_ !== i$0){var i$0=_yx_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           {var len=caml_ml_bytes_length(s$0),r=caml_create_bytes(len);
            caml_blit_bytes(s$0,0,r,0,len);
            var _yz_=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _yt_=caml_ml_bytes_length(s$0) - 1 | 0,_ys_=0;
            if(! (_yt_ < 0))
             {var i=_ys_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _yu_=i + 1 | 0;
                if(_yt_ !== i){var i=_yu_;continue}
                break}}
            var _yz_=s}
          var str$0=caml_string_of_bytes(_yz_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function format_of_fconv(fconv,prec)
     {var prec$0=abs(prec);
      if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=cF;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      if(8 <= fconv[2])buffer_add_char(buf,35);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_yl_=caml_ml_string_length(s) - 1 | 0,_yk_=0;
        if(! (_yl_ < 0))
         {var i$0=_yk_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _yp_=i$0 + 1 | 0;
            if(_yl_ !== i$0){var i$0=_yp_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _yn_=caml_ml_string_length(s) - 1 | 0,
         _ym_=0;
        if(! (_yn_ < 0))
         {var i=_ym_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _yo_=i + 1 | 0;
            if(_yn_ !== i){var i=_yo_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _yj_=_ag_;break;
        case 2:var _yj_=_ah_;break;
        case 4:var _yj_=_aj_;break;
        case 5:var _yj_=_ak_;break;
        case 6:var _yj_=_al_;break;
        case 7:var _yj_=_am_;break;
        case 8:var _yj_=_an_;break;
        case 9:var _yj_=_ao_;break;
        case 10:var _yj_=_ap_;break;
        case 11:var _yj_=_aq_;break;
        case 0:
        case 13:var _yj_=_af_;break;
        case 3:
        case 14:var _yj_=_ai_;break;
        default:var _yj_=_ar_}
      return transform_int_alt(iconv,caml_format_int(_yj_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _yi_=_aG_;break;
        case 2:var _yi_=_aH_;break;
        case 4:var _yi_=_aJ_;break;
        case 5:var _yi_=_aK_;break;
        case 6:var _yi_=_aL_;break;
        case 7:var _yi_=_aM_;break;
        case 8:var _yi_=_aN_;break;
        case 9:var _yi_=_aO_;break;
        case 10:var _yi_=_aP_;break;
        case 11:var _yi_=_aQ_;break;
        case 0:
        case 13:var _yi_=_aF_;break;
        case 3:
        case 14:var _yi_=_aI_;break;
        default:var _yi_=_aR_}
      return transform_int_alt(iconv,caml_format_int(_yi_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _yh_=_aT_;break;
        case 2:var _yh_=_aU_;break;
        case 4:var _yh_=_aW_;break;
        case 5:var _yh_=_aX_;break;
        case 6:var _yh_=_aY_;break;
        case 7:var _yh_=_aZ_;break;
        case 8:var _yh_=_a0_;break;
        case 9:var _yh_=_a1_;break;
        case 10:var _yh_=_a2_;break;
        case 11:var _yh_=_a3_;break;
        case 0:
        case 13:var _yh_=_aS_;break;
        case 3:
        case 14:var _yh_=_aV_;break;
        default:var _yh_=_a4_}
      return transform_int_alt(iconv,caml_format_int(_yh_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _yg_=_at_;break;
        case 2:var _yg_=_au_;break;
        case 4:var _yg_=_aw_;break;
        case 5:var _yg_=_ax_;break;
        case 6:var _yg_=_ay_;break;
        case 7:var _yg_=_az_;break;
        case 8:var _yg_=_aA_;break;
        case 9:var _yg_=_aB_;break;
        case 10:var _yg_=_aC_;break;
        case 11:var _yg_=_aD_;break;
        case 0:
        case 13:var _yg_=_as_;break;
        case 3:
        case 14:var _yg_=_av_;break;
        default:var _yg_=_aE_}
      return transform_int_alt(iconv,caml_int64_format(_yg_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_a6_:_a7_:4 <= match?_a8_:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i$0=0;
         for(;;)
          {if(i$0 === len)
            var _ye_=0;
           else
            {var
              match=caml_string_get(str,i$0),
              _yd_=match - 46 | 0,
              switch$0=0;
             if(23 < _yd_ >>> 0)
              {if(55 === _yd_)switch$0 = 1}
             else
              if(21 < (_yd_ - 1 | 0) >>> 0)switch$0 = 1;
             if(! switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
             var _ye_=1}
           var _yf_=_ye_?str:cat(str,_a5_);
           return caml_special_val(_yf_)}
        case 6:return hex(0);
        case 7:
         var s$0=hex(0),s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
         if(0 === l)
          var _yc_=s;
         else
          {var r=caml_create_bytes(l),_x$_=l - 1 | 0,_x__=0;
           if(! (_x$_ < 0))
            {var i=_x__;
             for(;;)
              {var
                c=caml_bytes_unsafe_get(s,i),
                switcher=c - 97 | 0,
                _ya_=25 < switcher >>> 0?c:c - 32 | 0;
               caml_bytes_unsafe_set(r,i,_ya_);
               var _yb_=i + 1 | 0;
               if(_x$_ !== i){var i=_yb_;continue}
               break}}
           var _yc_=r}
         return caml_string_of_bytes(_yc_);
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_f_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_g_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_h_;break;
                  case 9:var str=_i_;break;
                  case 10:var str=_j_;break;
                  case 13:var str=_k_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _x6_=pad$5[2],_x7_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_x7_,_x6_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_x7_,_x6_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_x7_,_x6_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _x8_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_x8_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_x8_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_x8_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _x9_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _x9_[2] === "number")
              {var fmt=_x9_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _x4_=fmt$0[1];
           if(0 === _x4_[0])
            {var
              rest$13=fmt$0[2],
              match=_x4_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_x4_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_a9_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_a__];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_a$_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_ba_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _x5_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_x5_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_x5_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_x3_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bb_];
         default:throw [0,Assert_failure,_bc_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _x2_=[8,acc,_bd_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_x2_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_x2_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _x1_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_x1_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_x1_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,prec,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _xY_=pad[2],_xZ_=pad[1];
          if(typeof prec === "number")
           return prec
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_xZ_,_xY_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_xZ_,_xY_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=prec[1];
          return function(x)
           {var
             str=
              fix_padding
               (_xZ_,_xY_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _x0_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_x0_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_x0_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=prec[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_x0_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _xW_=acc$0[2],_xX_=acc$0[1];
           if(0 === _xW_[0])
            {var acc$1=_xW_[1];
             output_acc(o,_xX_);
             output_string(o,_be_);
             var acc$0=acc$1;
             continue}
           var acc$2=_xW_[1];
           output_acc(o,_xX_);
           output_string(o,_bf_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _xU_=acc$0[2],_xV_=acc$0[1];
           if(0 === _xU_[0])
            {var acc$1=_xU_[1];
             strput_acc(b,_xV_);
             add_string(b,_bg_);
             var acc$0=acc$1;
             continue}
           var acc$2=_xU_[1];
           strput_acc(b,_xV_);
           add_string(b,_bh_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_bytes_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_xT_=0;
      return make_printf(function(acc){output_acc(oc,acc);return 0},_xT_,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return sub_string(buf[1],0,buf[2])}
      return make_printf(k,0,fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var a=x[1 + i$1];
      if(1 - (typeof a === "number"?1:0))
       {if(caml_obj_tag(a) === 252)return caml_call1(sprintf(_bi_),a);
        if(caml_obj_tag(a) === 253)
         {var s=caml_format_float(_d_,a),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return cat(s,_c_);
            var match=caml_string_get(s,i),switch$0=0;
            if(48 <= match)
             {if(! (58 <= match))switch$0 = 1}
            else
             if(45 === match)switch$0 = 1;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bj_}
      return caml_call1(sprintf(_bk_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bl_;
      var _xR_=other_fields(x,i + 1 | 0),_xS_=field(x,i);
      return caml_call2(sprintf(_bm_),_xS_,_xR_)}
    function to_string(e)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,e);switch$0 = 1}
            catch(_xQ_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      var match$0=conv(printers[1]);
      if(match$0){var s=match$0[1];return s}
      if(e === Out_of_memory)return _br_;
      if(e === Stack_overflow)return _bs_;
      if(e[1] === Match_failure)
       {var match$1=e[2],char$0=match$1[3],line=match$1[2],file=match$1[1];
        return caml_call5
                (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bt_)}
      if(e[1] === Assert_failure)
       {var
         match$2=e[2],
         char$1=match$2[3],
         line$0=match$2[2],
         file$0=match$2[1];
        return caml_call5
                (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bu_)}
      if(e[1] === Undefined_recursive_module)
       {var
         match$3=e[2],
         char$2=match$3[3],
         line$1=match$3[2],
         file$1=match$3[1];
        return caml_call5
                (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bv_)}
      if(0 === caml_obj_tag(e))
       {var constructor=e[1][1],match=e.length - 1;
        if(2 < match >>> 0)
         var
          _xM_=other_fields(e,2),
          _xN_=field(e,1),
          _xP_=caml_call2(sprintf(_bn_),_xN_,_xM_);
        else
         switch(match)
          {case 0:var _xP_=_bo_;break;
           case 1:var _xP_=_bp_;break;
           default:var _xO_=field(e,1),_xP_=caml_call1(sprintf(_bq_),_xO_)}
        return cat(constructor,_xP_)}
      return e[1]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var a=caml_convert_raw_backtrace(raw_backtrace),backtrace=[0,a];
      if(backtrace)
       {var _xK_=a.length - 1 - 1 | 0,_xJ_=0;
        if(! (_xK_ < 0))
         {var i=_xJ_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[1 + i],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_bw_:_bx_:0 === i?_by_:_bz_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              _xB_=slot[5],
              _xC_=slot[4],
              _xD_=slot[3],
              _xE_=slot[6]?_bA_:_bC_,
              _xF_=slot[2],
              _xG_=slot[7],
              _xH_=info(slot[1]),
              match=
               [0,
                caml_call7(sprintf(_bB_),_xH_,_xG_,_xF_,_xE_,_xD_,_xC_,_xB_)];
            else
             if(slot[1])
              var match=0;
             else
              var _xI_=info(0),match=[0,caml_call1(sprintf(_bD_),_xI_)];
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bE_),str)}
            var _xL_=i + 1 | 0;
            if(_xK_ !== i){var i=_xL_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bF_)}
    var errors=_bG_.slice();
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _xz_=to_string(exn);
      caml_call1(eprintf(_bH_),_xz_);
      print_raw_backtrace(stderr,raw_backtrace);
      var status=caml_ml_debug_info_status(0);
      if(status < 0)
       {var _xA_=abs(status);
        prerr_endline(caml_check_bound(errors,_xA_)[1 + _xA_])}
      return caml_ml_flush(stderr)}
    var empty_backtrace=[0];
    function handle_uncaught_exception(exn,debugger_in_use)
     {try
       {try
         {var
           raw_backtrace=
            debugger_in_use
             ?empty_backtrace
             :caml_get_exception_raw_backtrace(0);
          try {do_at_exit(0)}catch(_xy_){}
          try
           {var
             _xu_=default_uncaught_exception_han(exn,raw_backtrace),
             _xt_=_xu_}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            var
             raw_backtrace$0=caml_get_exception_raw_backtrace(0),
             _xr_=to_string(exn);
            caml_call1(eprintf(_bJ_),_xr_);
            print_raw_backtrace(stderr,raw_backtrace);
            var _xs_=to_string(exn$0);
            caml_call1(eprintf(_bK_),_xs_);
            print_raw_backtrace(stderr,raw_backtrace$0);
            var _xt_=caml_ml_flush(stderr)}
          var _xv_=_xt_}
        catch(_xx_)
         {_xx_ = caml_wrap_exception(_xx_);
          if(_xx_ !== Out_of_memory)throw _xx_;
          var _xv_=prerr_endline(_bI_)}
        return _xv_}
      catch(_xw_){return 0}}
    caml_register_named_value
     (caml_string_of_jsbytes("Printexc.handle_uncaught_exception"),
      handle_uncaught_exception);
    var Finally_raised=[248,_bL_,caml_fresh_oo_id(0)];
    function fn(param)
     {if(param[1] === Finally_raised)
       {var exn=param[2];return [0,cat(_bM_,to_string(exn))]}
      return 0}
    for(;;)
     {var
       old_printers=printers[1],
       new_printers=[0,fn,old_printers],
       success$0=compare_and_set(printers,old_printers,new_printers);
      if(1 - success$0)continue;
      var
       null$0=null,
       fn$0=undefined,
       is_null=function(v){return v === null$0?1:0},
       to_option=
        function(conv,v)
         {var _xp_=is_null(v),_xq_=_xp_ || (v === fn$0?1:0);
          return _xq_?0:[0,caml_call1(conv,v)]},
       target=globalThis,
       Error=[248,_bN_,caml_fresh_oo_id(0)],
       exn=[0,Error,{}],
       slot=caml_obj_tag(exn) === 248?exn:exn[1];
      caml_register_named_value(caml_string_of_jsbytes("jsError"),slot);
      var
       promise=target.Promise,
       resolve=function(v){return promise.resolve(v)},
       return$0=function(v){return {"fut":resolve(v)}},
       bind=
        function(f,fn)
         {function _xo_(v){return caml_call1(fn,v).fut}
          return {"fut":f.fut.then(_xo_)}},
       of_promise=
        function(ok$0,v)
         {function ok(v){return resolve([0,caml_call1(ok$0,v)])}
          function error(e){return resolve([1,e])}
          return {"fut":v.then(ok,error)}},
       let$0=
        function(f,fn)
         {return bind(f,function(v){return return$0(caml_call1(fn,v))})},
       decode=target.decodeURI,
       url=target.URL,
       usp=target.URLSearchParams,
       d=target.document,
       c=target.console,
       log=
        function(msg)
         {var a=new (target.Array)(0),i=0,param=msg;
          for(;;)
           {if(param)
             {var param$0=param[2],v=param[1];
              a[i] = v;
              var i$0=i + 1 | 0,i=i$0,param=param$0;
              continue}
            var args=caml_js_to_array(a);
            caml_js_meth_call(c,meth,args);
            return 0}},
       performance=target.performance,
       w=target.window,
       fetch=target.fetch,
       create=function(size){return caml_ba_create(12,0,[0,size])};
      create(0);
      var
       MakeInfix=
        function(B)
         {var
           symbol=B[8],
           symbol$0=B[9],
           symbol$1=B[10],
           symbol$2=B[11],
           symbol$3=B[6];
          function symbol$4(a,b){return 1 - caml_call2(B[6],a,b)}
          var
           symbol$5=B[7],
           mod=B[12],
           land=B[15],
           lor=B[16],
           lxor=B[17],
           lsl=B[18],
           lsr=B[19];
          return [0,
                  symbol,
                  symbol$0,
                  symbol$1,
                  symbol$2,
                  symbol$3,
                  symbol$4,
                  symbol$5,
                  mod,
                  land,
                  lor,
                  lxor,
                  lsl,
                  lsr]},
       max_int=255,
       zero=0,
       one=1,
       equal=function(x,y){return 0 === caml_int_compare(x,y)?1:0},
       le=caml_lessequal,
       add=function(x,y){return (x + y | 0) & 255},
       sub=function(x,y){return (x - y | 0) & 255},
       mul=function(x,y){return caml_mul(x,y) & 255},
       div=function(x,y){return caml_div(x,y) & 255},
       rem=function(x,y){return caml_mod(x,y) & 255},
       succ=function(x){return add(x,one)},
       pred=function(x){return sub(x,one)},
       logand=function(x,y){return x & y},
       logor=function(x,y){return x | y},
       logxor=function(_xn_,_xm_){return _xn_ ^ _xm_},
       shift_left=function(x,y){return x << y & 255},
       shift_right=function(_xl_,_xk_){return _xl_ >>> _xk_ | 0},
       of_int=function(x){return x & 255},
       show=sprintf(_bP_),
       Infix=
        MakeInfix
         ([0,
           show,
           max_int,
           zero,
           one,
           compare,
           equal,
           le,
           add,
           sub,
           mul,
           div,
           rem,
           succ,
           pred,
           logand,
           logor,
           logxor,
           shift_left,
           shift_right,
           of_int,
           function(_xj_){return _xj_}]),
       symbol=Infix[1],
       symbol$0=Infix[2],
       symbol$1=Infix[5],
       symbol$2=Infix[6],
       land=Infix[9],
       lor=Infix[10],
       lxor=Infix[11],
       lsl=Infix[12],
       lsr=Infix[13],
       max_int$0=65535,
       zero$0=0,
       one$0=1,
       equal$0=function(x,y){return 0 === caml_int_compare(x,y)?1:0},
       le$0=caml_lessequal,
       add$0=function(x,y){return (x + y | 0) & 65535},
       sub$0=function(x,y){return (x - y | 0) & 65535},
       mul$0=function(x,y){return caml_mul(x,y) & 65535},
       div$0=function(x,y){return caml_div(x,y) & 65535},
       rem$0=function(x,y){return caml_mod(x,y) & 65535},
       succ$0=function(x){return add$0(x,one$0)},
       pred$0=function(x){return sub$0(x,one$0)},
       logand$0=function(x,y){return x & y},
       logor$0=function(x,y){return x | y},
       logxor$0=function(_xi_,_xh_){return _xi_ ^ _xh_},
       shift_left$0=function(x,y){return x << y & 65535},
       shift_right$0=function(_xg_,_xf_){return _xg_ >>> _xf_ | 0},
       of_int$0=function(x){return x & 65535},
       show$0=sprintf(_bQ_),
       Infix$0=
        MakeInfix
         ([0,
           show$0,
           max_int$0,
           zero$0,
           one$0,
           compare,
           equal$0,
           le$0,
           add$0,
           sub$0,
           mul$0,
           div$0,
           rem$0,
           succ$0,
           pred$0,
           logand$0,
           logor$0,
           logxor$0,
           shift_left$0,
           shift_right$0,
           of_int$0,
           function(_xe_){return _xe_}]),
       symbol$3=Infix$0[1],
       symbol$4=Infix$0[2],
       symbol$5=Infix$0[5],
       symbol$6=Infix$0[7],
       land$0=Infix$0[9],
       lor$0=Infix$0[10],
       lsl$0=Infix$0[12],
       is_neg=function(t){return 0 !== (t & 128)?1:0},
       to_int=
        function(t)
         {if(is_neg(t))
           {var _xd_=is_neg(t)?(t - 1 | 0) ^ 255:t;return - _xd_ | 0}
          return t},
       update=
        function(state,type,b)
         {switch(type)
           {case 0:return [0,state[1],b,state[3],state[4],state[5],state[6]];
            case 1:return [0,state[1],state[2],b,state[4],state[5],state[6]];
            case 2:return [0,state[1],state[2],state[3],b,state[5],state[6]];
            case 3:return [0,state[1],state[2],state[3],state[4],b,state[6]];
            default:return [0,state[1],state[2],state[3],state[4],state[5],b]}},
       request=function(t,type){t[2] = update(t[2],type,1);return 0},
       accepts=
        function(t,addr)
         {var _xc_=caml_call2(symbol$5,t[1][1],addr);
          return _xc_?_xc_:caml_call2(symbol$5,t[2][1],addr)},
       byte_of_state=
        function(s)
         {var
           _w9_=s[6]?16:0,
           _w__=s[5]?8:0,
           _w$_=s[4]?4:0,
           _xa_=s[3]?2:0,
           _xb_=s[2]?1:0;
          return (_xb_ | _xa_ | _w$_ | _w__ | _w9_) & 255},
       state_of_byte=
        function(n,addr)
         {var
           b0=caml_call2(symbol$2,caml_call2(land,n,1),0),
           b1=caml_call2(symbol$2,caml_call2(land,n,2),0),
           b2=caml_call2(symbol$2,caml_call2(land,n,4),0),
           b3=caml_call2(symbol$2,caml_call2(land,n,8),0),
           b4=caml_call2(symbol$2,caml_call2(land,n,16),0);
          return [0,addr,b0,b1,b2,b3,b4]},
       accepts$0=
        function(t,addr)
         {var _w5_=caml_equal(addr,t[1]);
          if(_w5_)
           var _w6_=_w5_;
          else
           {var _w7_=caml_equal(addr,t[2]);
            if(_w7_)
             var _w6_=_w7_;
            else
             var _w8_=caml_equal(addr,t[3]),_w6_=_w8_ || caml_equal(addr,t[4])}
          return _w6_},
       get_tile_index=
        function(t,area,y,x)
         {if(area)
           {var _w1_=x / 8 | 0,_w2_=y / 8 | 0;
            return caml_check_bound
                     (caml_check_bound(t[2],_w2_)[1 + _w2_],_w1_)
                    [1 + _w1_]}
          var _w3_=x / 8 | 0,_w4_=y / 8 | 0;
          return caml_check_bound(caml_check_bound(t[1],_w4_)[1 + _w4_],_w3_)
                  [1 + _w3_]},
       accepts$1=
        function(t,addr)
         {var
           _wX_=caml_call2(symbol$6,t[3],addr),
           _wY_=_wX_?caml_call2(symbol$6,addr,t[4]):_wX_;
          if(_wY_)
           var _wZ_=_wY_;
          else
           {var _w0_=caml_call2(symbol$6,t[5],addr);
            if(_w0_)return caml_call2(symbol$6,addr,t[6]);
            var _wZ_=_w0_}
          return _wZ_},
       bitflags_of_byte=
        function(x)
         {var
           _wQ_=caml_call2(symbol$2,caml_call2(land,x,1),zero),
           _wR_=caml_call2(symbol$2,caml_call2(land,x,2),zero),
           _wS_=caml_call2(symbol$2,caml_call2(land,x,4),zero),
           _wT_=caml_call2(symbol$2,caml_call2(land,x,8),zero),
           _wU_=caml_call2(symbol$2,caml_call2(land,x,16),zero),
           _wV_=caml_call2(symbol$2,caml_call2(land,x,32),zero),
           _wW_=caml_call2(symbol$2,caml_call2(land,x,64),zero);
          return [0,
                  caml_call2(symbol$2,caml_call2(land,x,128),zero),
                  _wW_,
                  _wV_,
                  _wU_,
                  _wT_,
                  _wS_,
                  _wR_,
                  _wQ_]},
       byte_of_bitflags=
        function(b7,b6,b5,b4,b3,b2,b1,b0)
         {return (b0
                  |
                  b1
                  <<
                  1
                  |
                  b2
                  <<
                  2
                  |
                  b3
                  <<
                  3
                  |
                  b4
                  <<
                  4
                  |
                  b5
                  <<
                  5
                  |
                  b6
                  <<
                  6
                  |
                  b7
                  <<
                  7)
                 &
                 255},
       get_row_pixels=
        function(t,area,index,row)
         {if(area)
           var signed_index=to_int(index),index$0=signed_index + 256 | 0;
          else
           var index$0=index;
          if(8 <= row)
           {var _wO_=row - 8 | 0,_wP_=index$0 + 1 | 0;
            return caml_check_bound
                     (caml_check_bound(t[1],_wP_)[1 + _wP_],_wO_)
                    [1 + _wO_]}
          return caml_check_bound
                   (caml_check_bound(t[1],index$0)[1 + index$0],row)
                  [1 + row]},
       accepts$2=
        function(t,addr)
         {var _wN_=caml_call2(symbol$6,t[2],addr);
          return _wN_?caml_call2(symbol$6,addr,t[3]):_wN_},
       create$0=
        function(start_addr,end_addr)
         {var
           bytes=
            create
             (caml_call2
               (symbol$3,caml_call2(symbol$4,end_addr,start_addr),one$0));
          return [0,bytes,start_addr,end_addr]},
       accepts$3=
        function(t,addr)
         {var _wM_=caml_call2(symbol$6,t[2],addr);
          return _wM_?caml_call2(symbol$6,addr,t[3]):_wM_},
       read_byte=
        function(t,addr)
         {var offset=caml_call2(symbol$4,addr,t[2]);
          return caml_ba_get_1(t[1],offset)},
       write_byte=
        function(t,addr,data)
         {var offset=caml_call2(symbol$4,addr,t[2]);
          return caml_ba_set_1(t[1],offset,data)},
       accepts$4=
        function(t,addr)
         {var _wL_=caml_call2(symbol$6,t[3],addr);
          return _wL_?caml_call2(symbol$6,addr,t[4]):_wL_},
       create$1=
        function(addr,type,opt,param)
         {if(opt)var sth=opt[1],default$0=sth;else var default$0=zero;
          return 87 === type
                  ?[0,addr,default$0,0,1]
                  :18373 <= type?[0,addr,default$0,1,1]:[0,addr,default$0,1,0]},
       accepts$5=function(t,addr){return caml_call2(symbol$5,addr,t[1])},
       read_byte$0=
        function(t,addr)
         {return t[3]?accepts$5(t,addr)?t[2]:failwith(_b6_):failwith(_b7_)},
       write_byte$0=
        function(t,addr,data)
         {return t[3]
                  ?accepts$5(t,addr)?(t[2] = data,0):failwith(_b8_)
                  :failwith(_b9_)},
       accepts$6=
        function(t,addr)
         {var _wK_=accepts$5(t[1],addr);return _wK_?_wK_:accepts$5(t[2],addr)},
       read_r=
        function(t,param)
         {switch(param)
           {case 0:return t[1];
            case 1:return t[2];
            case 2:return t[3];
            case 3:return t[4];
            case 4:return t[5];
            case 5:return t[6];
            case 6:return t[7];
            default:return t[8]}},
       read_rr=
        function(t,rr)
         {switch(rr)
           {case 0:
             var _wG_=t[6] & 65535;
             return caml_call2(lor$0,caml_call2(lsl$0,t[1] & 65535,8),_wG_);
            case 1:
             var _wH_=t[3] & 65535;
             return caml_call2(lor$0,caml_call2(lsl$0,t[2] & 65535,8),_wH_);
            case 2:
             var _wI_=t[5] & 65535;
             return caml_call2(lor$0,caml_call2(lsl$0,t[4] & 65535,8),_wI_);
            default:
             var _wJ_=t[8] & 65535;
             return caml_call2(lor$0,caml_call2(lsl$0,t[7] & 65535,8),_wJ_)}},
       write_r=
        function(t,r,x)
         {switch(r)
           {case 0:t[1] = x;return 0;
            case 1:t[2] = x;return 0;
            case 2:t[3] = x;return 0;
            case 3:t[4] = x;return 0;
            case 4:t[5] = x;return 0;
            case 5:t[6] = caml_call2(land,x,240);return 0;
            case 6:t[7] = x;return 0;
            default:t[8] = x;return 0}},
       write_rr=
        function(t,rr,x)
         {var high=((x & 65280) >>> 8 | 0) & 255,low=x & 255 & 255;
          switch(rr)
           {case 0:t[1] = high;t[6] = caml_call2(land,low,240);return 0;
            case 1:t[2] = high;t[3] = low;return 0;
            case 2:t[4] = high;t[5] = low;return 0;
            default:t[7] = high;t[8] = low;return 0}},
       read_flag=
        function(t,flag)
         {var _wF_=t[6];
          switch(flag)
           {case 0:return 0 !== (_wF_ & 16)?1:0;
            case 1:return 0 !== (_wF_ & 32)?1:0;
            case 2:return 0 !== (_wF_ & 64)?1:0;
            default:return 0 !== (_wF_ & 128)?1:0}},
       mask_0b00010000=16,
       mask_0b11100000=224,
       mask_0b00100000=32,
       mask_0b11010000=208,
       mask_0b01000000=64,
       mask_0b10110000=176,
       mask_0b10000000=128,
       mask_0b01110000=112,
       set_flags=
        function(t,opt,_wE_,_wD_,_wC_,param)
         {if(opt)var sth=opt[1],c=sth;else var c=read_flag(t,0);
          if(_wE_)var sth$0=_wE_[1],h=sth$0;else var h=read_flag(t,1);
          if(_wD_)var sth$1=_wD_[1],n=sth$1;else var n=read_flag(t,2);
          if(_wC_)var sth$2=_wC_[1],z=sth$2;else var z=read_flag(t,3);
          t[6]
          =
          c
           ?caml_call2(lor,t[6],mask_0b00010000)
           :caml_call2(land,t[6],mask_0b11100000);
          t[6]
          =
          h
           ?caml_call2(lor,t[6],mask_0b00100000)
           :caml_call2(land,t[6],mask_0b11010000);
          t[6]
          =
          n
           ?caml_call2(lor,t[6],mask_0b01000000)
           :caml_call2(land,t[6],mask_0b10110000);
          return z
                  ?(t[6] = caml_call2(lor,t[6],mask_0b10000000),0)
                  :(t[6] = caml_call2(land,t[6],mask_0b01110000),0)},
       create$2=
        function(addr)
         {return [0,addr,-588596599,-603547828,-126317716,-937474657]},
       lookup=
        function(t,color_id)
         {switch(color_id)
           {case 0:return t[2];
            case 1:return t[3];
            case 2:return t[4];
            default:return t[5]}},
       accepts$7=function(t,addr){return caml_call2(symbol$5,addr,t[1])},
       read_byte$1=
        function(t,addr)
         {function bits_of_color(param)
           {return -588596599 <= param
                    ?-126317716 <= param?2:0
                    :-603547828 <= param?1:3}
          if(accepts$7(t,addr))
           {var
             _wz_=bits_of_color(t[5]) << 6,
             _wA_=bits_of_color(t[4]) << 4,
             _wB_=bits_of_color(t[3]) << 2;
            return (bits_of_color(t[2]) | _wB_ | _wA_ | _wz_) & 255}
          throw [0,Invalid_argument,_ca_]},
       write_byte$1=
        function(t,addr,data)
         {function color_of_bits(param)
           {if(3 < param >>> 0)throw [0,Assert_failure,_cb_];
            switch(param)
             {case 0:return -588596599;
              case 1:return -603547828;
              case 2:return -126317716;
              default:return -937474657}}
          if(accepts$7(t,addr))
           {t[2] = color_of_bits(data & 3);
            t[3] = color_of_bits((data & 12) >>> 2 | 0);
            t[4] = color_of_bits((data & 48) >>> 4 | 0);
            t[5] = color_of_bits((data & 192) >>> 6 | 0);
            return 0}
          throw [0,Invalid_argument,_cc_]},
       write_byte$2=
        function(t,addr,data)
         {var
           offset=addr - t[2] | 0,
           sprite_index=offset / 4 | 0,
           match=offset % 4 | 0;
          if(3 < match >>> 0)throw [0,Assert_failure,_ce_];
          switch(match)
           {case 0:
             var
              _wr_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
              _ws_=
               [0,
                data - 16 | 0,
                _wr_[2],
                _wr_[3],
                _wr_[4],
                _wr_[5],
                _wr_[6],
                _wr_[7],
                _wr_[8],
                _wr_[9]];
             caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _ws_;
             return 0;
            case 1:
             var
              _wt_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
              _wu_=
               [0,
                _wt_[1],
                data - 8 | 0,
                _wt_[3],
                _wt_[4],
                _wt_[5],
                _wt_[6],
                _wt_[7],
                _wt_[8],
                _wt_[9]];
             caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _wu_;
             return 0;
            case 2:
             var
              _wv_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
              _ww_=
               [0,
                _wv_[1],
                _wv_[2],
                data,
                _wv_[4],
                _wv_[5],
                _wv_[6],
                _wv_[7],
                _wv_[8],
                _wv_[9]];
             caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _ww_;
             return 0;
            default:
             var
              match$0=bitflags_of_byte(data),
              b0=match$0[8],
              b1=match$0[7],
              b2=match$0[6],
              b3=match$0[5],
              b4=match$0[4],
              x_flip=match$0[3],
              y_flip=match$0[2],
              b7=match$0[1],
              priority=b7?486156037:-259427781,
              pallete=b4?879375796:879375795,
              tile_vram_bank=b3?-1058811691:-1058811692,
              pallete_num=b2 << 2 | b1 << 1 | b0,
              _wx_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
              _wy_=
               [0,
                _wx_[1],
                _wx_[2],
                _wx_[3],
                priority,
                y_flip,
                x_flip,
                pallete,
                tile_vram_bank,
                pallete_num];
             caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _wy_;
             return 0}},
       accepts$8=
        function(t,addr)
         {var _wq_=caml_call2(symbol$6,t[2],addr);
          return _wq_?caml_call2(symbol$6,addr,t[3]):_wq_},
       is_enabled=
        function(t,param)
         {switch(param)
           {case 0:return t[2];
            case 1:return t[3];
            case 2:return t[4];
            default:return t[5]}},
       set_gpu_mode=function(t,mode){t[7] = mode;return 0},
       accepts$9=function(t,addr){return caml_call2(symbol$5,addr,t[1])},
       get_ly=function(t){return t[3][2]},
       reset_ly=function(t){t[3][2] = 0;return 0},
       accepts$10=
        function(t,addr)
         {var
           param$0=
            [0,
             t[1][1],
             [0,t[2][1],[0,t[3][1],[0,t[4][1],[0,t[5][1],[0,t[6][1],0]]]]]],
           param=param$0;
          for(;;)
           {if(param)
             {var l=param[2],a=param[1],_wp_=caml_call2(symbol$5,addr,a);
              if(_wp_)return _wp_;
              var param=l;
              continue}
            return 0}},
       register_of_addr=
        function(t,addr)
         {if(caml_call2(symbol$5,addr,t[1][1]))return t[1];
          if(caml_call2(symbol$5,addr,t[2][1]))return t[2];
          if(caml_call2(symbol$5,addr,t[3][1]))return t[3];
          if(caml_call2(symbol$5,addr,t[4][1]))return t[4];
          if(caml_call2(symbol$5,addr,t[6][1]))return t[6];
          if(caml_call2(symbol$5,addr,t[5][1]))return t[5];
          var _wo_=caml_call1(show$0,addr);
          throw [0,Invalid_argument,caml_call1(sprintf(_ch_),_wo_)]},
       accepts$11=function(t,addr){return caml_call2(symbol$5,addr,t[1])},
       accepts$12=function(t,addr){return caml_equal(addr,t[1])},
       handle_ly_eq_lyc=
        function(t)
         {var ly=get_ly(t[9]),b=ly === t[9][4][2]?1:0;
          t[7][6] = b;
          var _wn_=b?is_enabled(t[7],0):b;
          return _wn_?request(t[10],1):_wn_},
       screen_w=160,
       screen_h=144,
       accepts$13=
        function(t,addr)
         {var _we_=accepts$1(t[2],addr);
          if(_we_)
           var _wf_=_we_;
          else
           {var _wg_=accepts$2(t[1],addr);
            if(_wg_)
             var _wf_=_wg_;
            else
             {var _wh_=accepts$8(t[3],addr);
              if(_wh_)
               var _wf_=_wh_;
              else
               {var _wi_=accepts$7(t[4],addr);
                if(_wi_)
                 var _wf_=_wi_;
                else
                 {var _wj_=accepts$7(t[5],addr);
                  if(_wj_)
                   var _wf_=_wj_;
                  else
                   {var _wk_=accepts$7(t[6],addr);
                    if(_wk_)
                     var _wf_=_wk_;
                    else
                     {var _wl_=accepts$9(t[7],addr);
                      if(_wl_)
                       var _wf_=_wl_;
                      else
                       {var _wm_=accepts$11(t[8],addr);
                        if(! _wm_)return accepts$10(t[9],addr);
                        var _wf_=_wm_}}}}}}}
          return _wf_},
       create$3=
        function(rom_bytes)
         {var x=caml_ba_get_1(rom_bytes,327);
          if(! (17 < x >>> 0))
           {var switch$0=0;
            switch(x)
             {case 0:var cartridge_type=0;break;
              case 1:var cartridge_type=1;break;
              case 2:var cartridge_type=2;break;
              case 3:var cartridge_type=3;break;
              case 5:var cartridge_type=4;break;
              case 6:var cartridge_type=5;break;
              case 15:var cartridge_type=6;break;
              case 16:var cartridge_type=7;break;
              case 17:var cartridge_type=8;break;
              default:switch$0 = 1}
            if(! switch$0)
             {var match=caml_ba_get_1(rom_bytes,328);
              if(8 < match >>> 0)throw [0,Assert_failure,_rA_];
              switch(match)
               {case 0:var rom_bank_count=2;break;
                case 1:var rom_bank_count=4;break;
                case 2:var rom_bank_count=8;break;
                case 3:var rom_bank_count=16;break;
                case 4:var rom_bank_count=32;break;
                case 5:var rom_bank_count=64;break;
                case 6:var rom_bank_count=128;break;
                case 7:var rom_bank_count=256;break;
                default:var rom_bank_count=512}
              var match$0=caml_ba_get_1(rom_bytes,329);
              if(5 < match$0 >>> 0)throw [0,Assert_failure,_rB_];
              switch(match$0)
               {case 0:var ram_bank_count=0;break;
                case 1:var ram_bank_count=1;break;
                case 2:var ram_bank_count=1;break;
                case 3:var ram_bank_count=4;break;
                case 4:var ram_bank_count=16;break;
                default:var ram_bank_count=8}
              return [0,cartridge_type,rom_bank_count,ram_bank_count]}}
          throw [0,Invalid_argument,caml_call1(sprintf(_rz_),x)]},
       create$4=
        function(rom_bytes)
         {var
           h=create$3(rom_bytes),
           rom_bank_size=h[2],
           ram_bank_size=h[3],
           ram_bytes=create(ram_bank_size * 8192 | 0);
          return [0,rom_bytes,ram_bytes,rom_bank_size,ram_bank_size,0,1,0,0]},
       ram_addr_of_addr=
        function(t,addr)
         {var _wd_=t[4];
          if(t[8] && 1 !== _wd_)
           {if(4 === _wd_)return (8192 * t[7] | 0) + (addr - 40960 | 0) | 0;
            throw [0,Invalid_argument,caml_call1(sprintf(_rE_),_wd_)]}
          return (addr - 40960 | 0) % 8192 | 0},
       read_byte$2=
        function(t,addr)
         {if(0 <= addr && ! (16383 < addr))
           {var _wb_=t[3];
            if(t[8] && 32 < _wb_)
             if(64 === _wb_)
              var zero_bank_num=(t[7] & 1) << 5;
             else
              {if(128 !== _wb_)throw [0,Assert_failure,_rC_];
               var zero_bank_num=(t[7] & 3) << 5}
            else
             var zero_bank_num=0;
            return caml_ba_get_1(t[1],(16384 * zero_bank_num | 0) + addr | 0)}
          if(16384 <= addr && ! (32767 < addr))
           {var n=t[3];
            if(32 < n)
             if(64 === n)
              var bit5=(t[7] & 1) << 5,high_bank_num=bit5 | t[6];
             else
              {if(128 !== n)throw [0,Assert_failure,_rD_];
               var bit56=(t[7] & 3) << 5,high_bank_num=bit56 | t[6]}
            else
             var high_bank_num=t[6];
            return caml_ba_get_1
                    (t[1],(16384 * high_bank_num | 0) + (addr - 16384 | 0) | 0)}
          if(40960 <= addr && ! (49151 < addr))
           {if(t[5] && 0 < t[4])
             {var _wc_=ram_addr_of_addr(t,addr);
              return caml_ba_get_1(t[2],_wc_)}
            return 255}
          throw [0,Assert_failure,_rF_]},
       write_byte$3=
        function(t,addr,data)
         {if(0 <= addr && ! (8191 < addr)){t[5] = 10 === data?1:0;return 0}
          if(8192 <= addr && ! (16383 < addr))
           {var _v__=t[3],switch$0=0;
            if(33 <= _v__)
             if(64 === _v__ || 128 === _v__)var _v$_=31;else switch$0 = 1;
            else
             if(17 <= _v__)
              if(32 <= _v__)var _v$_=31;else switch$0 = 1;
             else
              if(2 <= _v__)
               {var switcher=_v__ - 2 | 0;
                switch(switcher)
                 {case 0:var _v$_=1;break;
                  case 2:var _v$_=3;break;
                  case 6:var _v$_=7;break;
                  case 14:var _v$_=15;break;
                  default:switch$0 = 1}}
              else
               switch$0 = 1;
            if(switch$0)
             throw [0,Invalid_argument,caml_call1(sprintf(_rG_),_v__)];
            var
             rom_bank_num=data & _v$_,
             _wa_=0 === rom_bank_num?1:rom_bank_num;
            t[6] = _wa_;
            return 0}
          if(16384 <= addr && ! (24575 < addr)){t[7] = data & 3;return 0}
          if(24576 <= addr && ! (32767 < addr))
           {var _v9_=0 === (data & 1)?0:1;t[8] = _v9_;return 0}
          if(40960 <= addr && ! (49151 < addr))
           {var _v6_=t[5],_v7_=_v6_?0 < t[4]?1:0:_v6_;
            if(_v7_)
             var
              ram_addr=ram_addr_of_addr(t,addr),
              _v8_=caml_ba_set_1(t[2],ram_addr,data);
            else
             var _v8_=_v7_;
            return _v8_}
          throw [0,Assert_failure,_rH_]},
       accepts$14=
        function(param,addr)
         {var _v2_=0 <= addr?1:0,_v3_=_v2_?addr <= 32767?1:0:_v2_;
          if(_v3_)
           var _v4_=_v3_;
          else
           var _v5_=40960 <= addr?1:0,_v4_=_v5_?addr <= 49151?1:0:_v5_;
          return _v4_},
       _rI_=[0,create$4,read_byte$2,write_byte$3,accepts$14],
       create$5=function(rom_bytes){return [0,rom_bytes]},
       read_byte$3=
        function(t,addr)
         {if(0 <= addr && ! (32767 < addr))return caml_ba_get_1(t[1],addr);
          throw [0,Invalid_argument,_rJ_]},
       write_byte$4=function(param,_v1_,_v0_){return 0},
       accepts$15=
        function(param,addr)
         {var _vY_=0 <= addr?1:0,_vZ_=_vY_?addr <= 32767?1:0:_vY_;return _vZ_},
       _rK_=[0,create$5,read_byte$3,write_byte$4,accepts$15],
       read_param=
        function(param_key,default$0)
         {var uri=new url(w.location),v=uri.search,q=decode(v);
          if(0 === q.length)
           var _vW_=q;
          else
           {if(opt$0)var sth=opt$0[1],start=sth;else var start=0;
            var _vW_=q.slice(start)}
          var
           param=new usp(_vW_),
           k=caml_jsstring_of_string(param_key),
           _vV_=param.get(k),
           match=to_option(function(_vX_){return _vX_},_vV_);
          if(match){var jstr=match[1];return caml_string_of_jsstring(jstr)}
          return default$0},
       k=function(_vU_){return _vU_},
       rom_path=read_param(_sV_,_sU_),
       frames=caml_int_of_string(read_param(_sX_,_sW_)),
       _sY_=
        function(duration_ms)
         {var
           duration=duration_ms / 1000.,
           fps=frames / duration,
           msg=
            caml_call8
             (sprintf(_s3_),_s2_,rom_path,_s1_,frames,_s0_,duration,_sZ_,fps),
           _vR_=d.getElementById("bench_result"),
           param=to_option(function(_vT_){return _vT_},_vR_);
          if(param)var v=param[1],_vS_=v;else var _vS_=invalid_arg(_e_);
          var s=caml_jsstring_of_string(msg),l=[0,d.createTextNode(s),0];
          for(;;)
           {if(is_null(_vS_.firstChild))
             return iter(function(n){_vS_.appendChild(n);return 0},l);
            _vS_.removeChild(_vS_.firstChild);
            continue}},
       _sT_=
        function(result)
         {if(0 === result[0])
           {var
             response=result[1],
             _s6_=
              function(result)
               {if(0 === result[0])
                 {var
                   blob=result[1],
                   _s9_=
                    function(result)
                     {if(0 === result[0])
                       {var
                         buf=result[1],
                         rom_bytes=
                          caml_ba_from_typed_array(new (target.Uint8Array)(buf,0)),
                         type=create$3(rom_bytes)[1];
                        if(type)
                         {if(4 <= type)throw [0,Assert_failure,_rL_];
                          var cartridge$0=_rI_}
                        else
                         var cartridge$0=_rK_;
                        var
                         _un_=cartridge$0[4],
                         _uo_=cartridge$0[3],
                         _up_=cartridge$0[2],
                         read_byte$2=
                          function(t,addr)
                           {if(_un_(t[1],addr))return _up_(t[1],addr);
                            if(accepts$3(t[2],addr))return read_byte(t[2],addr);
                            if(accepts$3(t[5],addr))return read_byte(t[5],addr);
                            if(accepts$13(t[4],addr))
                             {var _vL_=t[4];
                              if(accepts$2(_vL_[1],addr))
                               {var match$0=_vL_[7][7];
                                if(1 === match$0)return 255;
                                var
                                 _vF_=_vL_[1],
                                 offset$1=caml_call2(symbol$4,addr,_vF_[2]),
                                 index=offset$1 / 16 | 0,
                                 row=(offset$1 % 16 | 0) / 2 | 0,
                                 hi_or_lo=0 === (offset$1 % 2 | 0)?17059:16161,
                                 a$0=
                                  caml_check_bound
                                    (caml_check_bound(_vF_[1],index)[1 + index],row)
                                   [1 + row],
                                 f=
                                  function(id)
                                   {if(17059 <= hi_or_lo)
                                     {if(1 !== id && ! (3 <= id))return 0;return 1}
                                    return 2 <= id?1:0},
                                 l=a$0.length - 1;
                                if(0 === l)
                                 var _vx_=[0];
                                else
                                 {var r=caml_make_vect(l,f(a$0[1])),_vk_=l - 1 | 0,_vj_=1;
                                  if(! (_vk_ < 1))
                                   {var i=_vj_;
                                    for(;;)
                                     {r[1 + i] = f(a$0[1 + i]);
                                      var _vl_=i + 1 | 0;
                                      if(_vk_ !== i){var i=_vl_;continue}
                                      break}}
                                  var _vx_=r}
                                var
                                 a=_b3_.slice(),
                                 r$0=[0,0],
                                 _vn_=a.length - 1 - 1 | 0,
                                 _vm_=0;
                                if(! (_vn_ < 0))
                                 {var i$0=_vm_;
                                  for(;;)
                                   {var i$1=a[1 + i$0],_vo_=r$0[1];
                                    r$0[1]
                                    =
                                    _vo_
                                    |
                                    caml_check_bound(_vx_,i$1)[1 + i$1]
                                    <<
                                    (7 - i$1 | 0);
                                    var _vp_=i$0 + 1 | 0;
                                    if(_vn_ !== i$0){var i$0=_vp_;continue}
                                    break}}
                                return r$0[1] & 255}
                              if(accepts$1(_vL_[2],addr))
                               {var match$1=_vL_[7][7];
                                if(1 === match$1)return 255;
                                var _vG_=_vL_[2];
                                if
                                 (caml_call2(symbol$6,_vG_[3],addr)
                                  &&
                                  caml_call2(symbol$6,addr,_vG_[4]))
                                 {var
                                   offset=caml_call2(symbol$4,addr,_vG_[3]),
                                   _vs_=offset % 32 | 0,
                                   _vt_=offset / 32 | 0;
                                  return caml_check_bound
                                           (caml_check_bound(_vG_[1],_vt_)[1 + _vt_],_vs_)
                                          [1 + _vs_]}
                                if
                                 (caml_call2(symbol$6,_vG_[5],addr)
                                  &&
                                  caml_call2(symbol$6,addr,_vG_[6]))
                                 {var
                                   offset$0=caml_call2(symbol$4,addr,_vG_[5]),
                                   _vu_=offset$0 % 32 | 0,
                                   _vv_=offset$0 / 32 | 0;
                                  return caml_check_bound
                                           (caml_check_bound(_vG_[2],_vv_)[1 + _vv_],_vu_)
                                          [1 + _vu_]}
                                var _vw_=caml_call1(show$0,addr);
                                throw [0,Invalid_argument,caml_call1(sprintf(_b1_),_vw_)]}
                              if(accepts$8(_vL_[3],addr))
                               {var match$2=_vL_[7][7];
                                if(2 <= match$2)
                                 {var
                                   _vH_=_vL_[3],
                                   offset$3=addr - _vH_[2] | 0,
                                   _vA_=offset$3 / 4 | 0,
                                   sprite=caml_check_bound(_vH_[1],_vA_)[1 + _vA_],
                                   match=offset$3 % 4 | 0;
                                  if(3 < match >>> 0)throw [0,Assert_failure,_cd_];
                                  switch(match)
                                   {case 0:return (sprite[1] + 16 | 0) & 255;
                                    case 1:return (sprite[2] + 8 | 0) & 255;
                                    case 2:return sprite[3];
                                    default:
                                     return byte_of_bitflags
                                             (486156037 === sprite[4]?1:0,
                                              sprite[5],
                                              sprite[6],
                                              879375796 === sprite[7]?1:0,
                                              -1058811691 === sprite[8]?1:0,
                                              0 !== (sprite[9] & 4)?1:0,
                                              0 !== (sprite[9] & 2)?1:0,
                                              0 !== (sprite[9] & 1)?1:0)}}
                                return 255}
                              if(accepts$7(_vL_[4],addr))return read_byte$1(_vL_[4],addr);
                              if(accepts$7(_vL_[5],addr))return read_byte$1(_vL_[5],addr);
                              if(accepts$7(_vL_[6],addr))return read_byte$1(_vL_[6],addr);
                              if(accepts$9(_vL_[7],addr))
                               {var _vI_=_vL_[7];
                                if(accepts$9(_vI_,addr))
                                 {switch(_vI_[7])
                                   {case 0:var b0=0,b1=1;break;
                                    case 1:var b0=1,b1=1;break;
                                    case 2:var b0=0,b1=0;break;
                                    default:var b0=1,b1=0}
                                  var
                                   _vB_=_vI_[6],
                                   _vC_=is_enabled(_vI_,3),
                                   _vD_=is_enabled(_vI_,2),
                                   _vE_=is_enabled(_vI_,1);
                                  return byte_of_bitflags
                                          (1,is_enabled(_vI_,0),_vE_,_vD_,_vC_,_vB_,b1,b0)}
                                throw [0,Invalid_argument,_cf_]}
                              if(accepts$11(_vL_[8],addr))
                               {var _vJ_=_vL_[8];
                                if(accepts$11(_vJ_,addr))
                                 return byte_of_bitflags
                                         (_vJ_[2],
                                          1 === _vJ_[3]?1:0,
                                          _vJ_[4],
                                          0 === _vJ_[5]?1:0,
                                          1 === _vJ_[6]?1:0,
                                          -663730172 === _vJ_[7]?1:0,
                                          _vJ_[8],
                                          _vJ_[9]);
                                throw [0,Invalid_argument,_ci_]}
                              if(accepts$10(_vL_[9],addr))
                               {var r$1=register_of_addr(_vL_[9],addr);return r$1[2] & 255}
                              var _vK_=caml_call1(show$0,addr);
                              throw [0,Invalid_argument,caml_call1(sprintf(_ck_),_vK_)]}
                            if(accepts$12(t[6],addr))
                             {var _vM_=t[6];
                              switch(_vM_[3])
                               {case 0:return 15;
                                case 1:
                                 return byte_of_bitflags
                                         (1,
                                          1,
                                          0,
                                          1,
                                          1 === _vM_[4]?1:0,
                                          1 === _vM_[5]?1:0,
                                          1 === _vM_[6]?1:0,
                                          1 === _vM_[7]?1:0);
                                default:
                                 return byte_of_bitflags
                                         (1,
                                          1,
                                          1,
                                          0,
                                          1 === _vM_[8]?1:0,
                                          1 === _vM_[9]?1:0,
                                          1 === _vM_[10]?1:0,
                                          1 === _vM_[11]?1:0)}}
                            if(accepts$4(t[3],addr))
                             {var _vN_=t[3];
                              if(accepts$4(_vN_,addr))
                               {var
                                 offset$2=caml_call2(symbol$4,addr,_vN_[3]),
                                 _vy_=caml_call2(symbol$3,_vN_[2],offset$2);
                                return read_byte(_vN_[1],_vy_)}
                              var _vz_=caml_call1(show$0,addr);
                              throw [0,Invalid_argument,caml_call1(sprintf(_b4_),_vz_)]}
                            if(accepts$6(t[7],addr))
                             {var _vO_=t[7];
                              return accepts$5(_vO_[1],addr)
                                      ?read_byte$0(_vO_[1],addr)
                                      :accepts$5(_vO_[2],addr)
                                        ?read_byte$0(_vO_[2],addr)
                                        :failwith(_b__)}
                            if(accepts(t[8],addr))
                             {var _vP_=t[8];
                              if(caml_call2(symbol$5,addr,_vP_[1][1]))
                               return byte_of_state(_vP_[1]);
                              if(caml_call2(symbol$5,addr,_vP_[2][1]))
                               return caml_call2(lor,224,byte_of_state(_vP_[2]));
                              throw [0,Assert_failure,_bW_]}
                            if(accepts$0(t[9],addr))
                             {var _vQ_=t[9];
                              if(caml_equal(addr,_vQ_[1]))return _vQ_[7] & 255;
                              if(caml_equal(addr,_vQ_[2]))return _vQ_[11] & 255;
                              if(caml_equal(addr,_vQ_[3]))return _vQ_[10] & 255;
                              if(caml_equal(addr,_vQ_[4]))
                               {var _vq_=_vQ_[8]?4:0,enable_bit=_vq_ & 255;
                                switch(_vQ_[9])
                                 {case 0:var _vr_=0;break;
                                  case 1:var _vr_=1;break;
                                  case 2:var _vr_=2;break;
                                  default:var _vr_=3}
                                return caml_call2(land,enable_bit,_vr_)}
                              throw [0,Assert_failure,_bY_]}
                            return accepts$5(t[10],addr)?read_byte$0(t[10],addr):255},
                         write_byte$3=
                          function(t,addr,data)
                           {if(_un_(t[1],addr))return _uo_(t[1],addr,data);
                            if(accepts$3(t[2],addr))return write_byte(t[2],addr,data);
                            if(accepts$3(t[5],addr))return write_byte(t[5],addr,data);
                            if(accepts$13(t[4],addr))
                             {var _vd_=t[4];
                              if(accepts$2(_vd_[1],addr))
                               {var match$3=_vd_[7][7];
                                if(1 === match$3)return 0;
                                var
                                 _u7_=_vd_[1],
                                 _uQ_=caml_call2(symbol$2,caml_call2(land,data,1),zero),
                                 _uR_=caml_call2(symbol$2,caml_call2(land,data,2),zero),
                                 _uS_=caml_call2(symbol$2,caml_call2(land,data,4),zero),
                                 _uT_=caml_call2(symbol$2,caml_call2(land,data,8),zero),
                                 _uU_=caml_call2(symbol$2,caml_call2(land,data,16),zero),
                                 _uV_=caml_call2(symbol$2,caml_call2(land,data,32),zero),
                                 _uW_=caml_call2(symbol$2,caml_call2(land,data,64),zero),
                                 data_bits=
                                  [0,
                                   caml_call2(symbol$2,caml_call2(land,data,128),zero),
                                   _uW_,
                                   _uV_,
                                   _uU_,
                                   _uT_,
                                   _uS_,
                                   _uR_,
                                   _uQ_],
                                 offset$1=caml_call2(symbol$4,addr,_u7_[2]),
                                 index=offset$1 / 16 | 0,
                                 row=(offset$1 % 16 | 0) / 2 | 0,
                                 colors_in_row=
                                  caml_check_bound
                                    (caml_check_bound(_u7_[1],index)[1 + index],row)
                                   [1 + row],
                                 hi_or_lo=0 === (offset$1 % 2 | 0)?17059:16161,
                                 f=
                                  function(i,b)
                                   {var t=caml_check_bound(colors_in_row,i)[1 + i];
                                    if(b)
                                     {if(17059 <= hi_or_lo)
                                       switch(t)
                                        {case 0:return 1;
                                         case 1:return 1;
                                         case 2:return 3;
                                         default:return 3}
                                      switch(t)
                                       {case 0:return 2;
                                        case 1:return 3;
                                        case 2:return 2;
                                        default:return 3}}
                                    if(17059 <= hi_or_lo)
                                     switch(t)
                                      {case 0:return 0;
                                       case 1:return 0;
                                       case 2:return 2;
                                       default:return 2}
                                    switch(t)
                                     {case 0:return 0;
                                      case 1:return 1;
                                      case 2:return 0;
                                      default:return 1}},
                                 l=data_bits.length - 1;
                                if(0 === l)
                                 var _uX_=[0];
                                else
                                 {var
                                   r=caml_make_vect(l,f(0,data_bits[1])),
                                   _uI_=l - 1 | 0,
                                   _uH_=1;
                                  if(! (_uI_ < 1))
                                   {var i=_uH_;
                                    for(;;)
                                     {r[1 + i] = f(i,data_bits[1 + i]);
                                      var _uJ_=i + 1 | 0;
                                      if(_uI_ !== i){var i=_uJ_;continue}
                                      break}}
                                  var _uX_=r}
                                caml_check_bound
                                  (caml_check_bound(_u7_[1],index)[1 + index],row)
                                 [1 + row]
                                =
                                _uX_;
                                return 0}
                              if(accepts$1(_vd_[2],addr))
                               {var match$4=_vd_[7][7];
                                if(1 === match$4)return 0;
                                var _u8_=_vd_[2];
                                if
                                 (caml_call2(symbol$6,_u8_[3],addr)
                                  &&
                                  caml_call2(symbol$6,addr,_u8_[4]))
                                 {var
                                   offset=caml_call2(symbol$4,addr,_u8_[3]),
                                   _uL_=offset % 32 | 0,
                                   _uM_=offset / 32 | 0;
                                  caml_check_bound
                                    (caml_check_bound(_u8_[1],_uM_)[1 + _uM_],_uL_)
                                   [1 + _uL_]
                                  =
                                  data;
                                  return 0}
                                if
                                 (caml_call2(symbol$6,_u8_[5],addr)
                                  &&
                                  caml_call2(symbol$6,addr,_u8_[6]))
                                 {var
                                   offset$0=caml_call2(symbol$4,addr,_u8_[5]),
                                   _uN_=offset$0 % 32 | 0,
                                   _uO_=offset$0 / 32 | 0;
                                  caml_check_bound
                                    (caml_check_bound(_u8_[2],_uO_)[1 + _uO_],_uN_)
                                   [1 + _uN_]
                                  =
                                  data;
                                  return 0}
                                var _uP_=caml_call1(show$0,addr);
                                throw [0,Invalid_argument,caml_call1(sprintf(_b2_),_uP_)]}
                              if(accepts$8(_vd_[3],addr))
                               {var match$5=_vd_[7][7];
                                return 2 <= match$5?write_byte$2(_vd_[3],addr,data):0}
                              if(accepts$7(_vd_[4],addr))
                               return write_byte$1(_vd_[4],addr,data);
                              if(accepts$7(_vd_[5],addr))
                               return write_byte$1(_vd_[5],addr,data);
                              if(accepts$7(_vd_[6],addr))
                               return write_byte$1(_vd_[6],addr,data);
                              if(accepts$9(_vd_[7],addr))
                               {var _u9_=_vd_[7];
                                if(accepts$9(_u9_,addr))
                                 {var
                                   match$0=bitflags_of_byte(data),
                                   b3=match$0[5],
                                   b4=match$0[4],
                                   b5=match$0[3],
                                   b6=match$0[2];
                                  _u9_[2] = b6;
                                  _u9_[3] = b5;
                                  _u9_[4] = b4;
                                  _u9_[5] = b3;
                                  return 0}
                                throw [0,Invalid_argument,_cg_]}
                              if(accepts$11(_vd_[8],addr))
                               {var lcd_enable_before=_vd_[8][2],_u__=_vd_[8];
                                if(accepts$11(_u__,addr))
                                 {var
                                   match$1=bitflags_of_byte(data),
                                   b0=match$1[8],
                                   b1=match$1[7],
                                   b2=match$1[6],
                                   b3$0=match$1[5],
                                   b4$0=match$1[4],
                                   b5$0=match$1[3],
                                   b6$0=match$1[2],
                                   b7=match$1[1];
                                  _u__[2] = b7;
                                  var _u3_=b6$0?1:0;
                                  _u__[3] = _u3_;
                                  _u__[4] = b5$0;
                                  var _u4_=b4$0?0:1;
                                  _u__[5] = _u4_;
                                  var _u5_=b3$0?1:0;
                                  _u__[6] = _u5_;
                                  var _u6_=b2?-663730172:1056320505;
                                  _u__[7] = _u6_;
                                  _u__[8] = b1;
                                  _u__[9] = b0;
                                  var lcd_enable_after=_vd_[8][2];
                                  if(lcd_enable_before)
                                   {if(! lcd_enable_after)
                                     {reset_ly(_vd_[9]);
                                      _vd_[11] = 0;
                                      _vd_[12] = 1;
                                      return set_gpu_mode(_vd_[7],2)}}
                                  else
                                   if(lcd_enable_after)
                                    {_vd_[12] = 2;_vd_[11] = 18;return handle_ly_eq_lyc(_vd_)}
                                  return 0}
                                throw [0,Invalid_argument,_cj_]}
                              if(accepts$10(_vd_[9],addr))
                               {var _u$_=_vd_[9];
                                if(caml_call2(symbol$5,addr,_u$_[3][1]))
                                 {_u$_[3][2] = 0;return 0}
                                var r$0=register_of_addr(_u$_,addr);
                                r$0[2] = data;
                                return 0}
                              var _va_=caml_call1(show$0,addr);
                              throw [0,Invalid_argument,caml_call1(sprintf(_cl_),_va_)]}
                            if(accepts$12(t[6],addr))
                             {var
                               _ve_=t[6],
                               match$2=bitflags_of_byte(data),
                               b4$1=match$2[4],
                               b5$1=match$2[3];
                              return b4$1
                                      ?b5$1?(_ve_[3] = 0,0):(_ve_[3] = 2,0)
                                      :(_ve_[3] = 1,0)}
                            if(accepts$4(t[3],addr))
                             {var _vf_=t[3];
                              if(accepts$4(_vf_,addr))
                               {var
                                 offset$2=caml_call2(symbol$4,addr,_vf_[3]),
                                 _uY_=caml_call2(symbol$3,_vf_[2],offset$2);
                                return write_byte(_vf_[1],_uY_,data)}
                              var _uZ_=caml_call1(show$0,addr);
                              throw [0,Invalid_argument,caml_call1(sprintf(_b5_),_uZ_)]}
                            if(accepts$6(t[7],addr))
                             {var _vg_=t[7];
                              if(accepts$5(_vg_[1],addr))
                               return write_byte$0(_vg_[1],addr,data);
                              if(accepts$5(_vg_[2],addr))
                               {write_byte$0(_vg_[2],addr,data);
                                var
                                 _u0_=_vg_[3],
                                 _u1_=_u0_?caml_call2(symbol$1,data,129):_u0_;
                                if(_u1_)
                                 {var _u2_=_vg_[1][2];
                                  caml_call1(fprintf(stdout,fmt),_u2_);
                                  return flush_all(0)}
                                return _u1_}
                              return failwith(_b$_)}
                            if(accepts(t[8],addr))
                             {var _vh_=t[8];
                              if(caml_equal(addr,_vh_[1][1]))
                               {_vh_[1] = state_of_byte(data,_vh_[1][1]);return 0}
                              if(caml_equal(addr,_vh_[2][1]))
                               {_vh_[2] = state_of_byte(data,_vh_[2][1]);return 0}
                              throw [0,Assert_failure,_bX_]}
                            if(accepts$0(t[9],addr))
                             {var _vi_=t[9];
                              if(caml_equal(addr,_vi_[1]))
                               {_vi_[7] = 0;_vi_[6] = 0;return 0}
                              if(caml_equal(addr,_vi_[2])){_vi_[11] = data;return 0}
                              if(caml_equal(addr,_vi_[3])){_vi_[10] = data;return 0}
                              if(caml_equal(addr,_vi_[4]))
                               {if(caml_call2(symbol$2,caml_call2(land,data,4),zero))
                                 _vi_[8] = 1;
                                var match=data & 3;
                                if(3 < match >>> 0)throw [0,Assert_failure,_bZ_];
                                switch(match)
                                 {case 0:var _uK_=0;break;
                                  case 1:var _uK_=1;break;
                                  case 2:var _uK_=2;break;
                                  default:var _uK_=3}
                                _vi_[9] = _uK_;
                                return 0}
                              throw [0,Assert_failure,_b0_]}
                            if(accepts$5(t[10],addr))
                             {write_byte$0(t[10],addr,data);
                              var source=caml_call2(lsl$0,data & 65535,8),i$0=0;
                              for(;;)
                               {var
                                 data$0=
                                  read_byte$2(t,caml_call2(symbol$3,source,i$0 & 65535)),
                                 _vb_=t[4][3];
                                write_byte$2
                                 (_vb_,caml_call2(symbol$3,_vb_[2],i$0 & 65535),data$0);
                                var _vc_=i$0 + 1 | 0;
                                if(159 !== i$0){var i$0=_vc_;continue}
                                return 0}}
                            return 0},
                         read_word=
                          function(t,addr)
                           {var lo=read_byte$2(t,addr),hi=read_byte$2(t,succ$0(addr));
                            return ((hi << 8) + lo | 0) & 65535},
                         write_word=
                          function(t,addr,data)
                           {var hi=(data >>> 8 | 0) & 255,lo=data & 255 & 255;
                            write_byte$3(t,addr,lo);
                            return write_byte$3(t,succ$0(addr),hi)},
                         cartridge=cartridge$0[1](rom_bytes),
                         wram=create$0(49152,57343),
                         shadow_ram=[0,wram,49152,57344,65023],
                         zero_page=create$0(65408,65534),
                         opt=[0,0],
                         sc=create$1(65282,18373,0,0),
                         sb=create$1(65281,18373,0,0),
                         x00=0,
                         x08=8,
                         x10=16,
                         x18=24,
                         x20=32,
                         x28=40,
                         x30=48,
                         x38=56,
                         l1=1,
                         l2=2,
                         l3=3,
                         ly_addr=65348,
                         addr$4=65345,
                         print_serial_port$0=0,
                         print_serial_port=opt?print_serial_port$0:0,
                         serial_port=[0,sb,sc,print_serial_port],
                         ic=[0,[0,65535,0,0,0,0,0],[0,65295,0,0,0,0,0]],
                         end_addr=38911,
                         start_addr=32768,
                         f=function(param){return create_matrix(8,8,0)},
                         tiles=caml_make_vect(384,f(0)),
                         i=1;
                        for(;;)
                         {tiles[1 + i] = f(i);
                          var _s$_=i + 1 | 0;
                          if(383 !== i){var i=_s$_;continue}
                          var
                           tile_data=[0,tiles,start_addr,end_addr],
                           _te_=create_matrix(32,32,zero),
                           tile_map=
                            [0,create_matrix(32,32,zero),_te_,38912,39935,39936,40959],
                           default_sprite=
                            [0,0,0,zero,-259427781,0,0,879375795,-1058811692,0],
                           sprites=caml_make_vect(40,default_sprite),
                           oam_table=[0,sprites,65024,65183],
                           lcd_stat=[0,addr$4,0,0,0,0,0,0],
                           joypad=[0,65280,ic,1,1,1,1,1,1,1,1,1],
                           lcd_position=
                            [0,
                             [0,65346,0],
                             [0,65347,0],
                             [0,ly_addr,0],
                             [0,65349,0],
                             [0,65354,0],
                             [0,65355,0]],
                           lcd_control=[0,65344,1,0,0,0,0,1056320505,0,1],
                           obp1=create$2(65353),
                           obp0=create$2(65352),
                           bgp=create$2(65351),
                           gpu=
                            [0,
                             tile_data,
                             tile_map,
                             oam_table,
                             bgp,
                             obp0,
                             obp1,
                             lcd_stat,
                             lcd_control,
                             lcd_position,
                             ic,
                             0,
                             0,
                             create_matrix(screen_h,screen_w,-588596599)];
                          handle_ly_eq_lyc(gpu);
                          var
                           timer=[0,65284,65285,65286,65287,ic,0,0,0,0,0,0],
                           dma_transfer=create$1(65350,18373,0,0),
                           bus=
                            [0,
                             cartridge,
                             wram,
                             shadow_ram,
                             gpu,
                             zero_page,
                             joypad,
                             serial_port,
                             ic,
                             timer,
                             dma_transfer],
                           registers=[0,zero,zero,zero,zero,zero,zero,zero,zero],
                           cpu=[0,registers,bus,ic,256,65534,0,0,0,4];
                          set_flags(registers,_sQ_,_sP_,_sO_,_sN_,0);
                          iter
                           (function(param)
                             {var data=param[2],reg=param[1];
                              return write_rr(registers,reg,data & 65535)},
                            _sR_);
                          iter
                           (function(param)
                             {var data=param[2],addr=param[1];
                              return write_byte$3(bus,addr & 65535,data & 255)},
                            _sS_);
                          set_gpu_mode(lcd_stat,3);
                          gpu[11] = 0;
                          var frame_count=[0,0],_uq_=performance.now();
                          for(;;)
                           {if(frame_count[1] < frames)
                             {if(cpu[8]){cpu[7] = 1;cpu[8] = 0}
                              if(cpu[6])
                               var inst_mcycles=4;
                              else
                               {var
                                 _ug_=cpu[4],
                                 _uh_=cpu[2],
                                 addr_after_pc=succ$0(_ug_),
                                 next_byte$0=
                                  function(addr_after_pc,_uG_)
                                   {function next_byte(param)
                                     {return read_byte$2(_uG_,addr_after_pc)}
                                    return next_byte},
                                 next_byte=next_byte$0(addr_after_pc,_uh_),
                                 next_word$0=
                                  function(addr_after_pc,_uF_)
                                   {function next_word(param)
                                     {return read_word(_uF_,addr_after_pc)}
                                    return next_word},
                                 next_word=next_word$0(addr_after_pc,_uh_),
                                 op=read_byte$2(_uh_,_ug_);
                                if(255 < op >>> 0)
                                 var match$3=failwith(caml_call1(sprintf(_cm_),op));
                                else
                                 {var _ur_=op;
                                  if(128 <= _ur_)
                                   if(192 <= _ur_)
                                    if(224 <= _ur_)
                                     switch(_ur_)
                                      {case 224:
                                        var match$3=[0,l2,_qP_,[0,[7,next_byte(0)],_qO_]];break;
                                       case 225:var match$3=[0,l1,_qR_,_qQ_];break;
                                       case 226:var match$3=[0,l1,_qT_,_qS_];break;
                                       case 227:var match$3=[0,l1,_qU_,4];break;
                                       case 228:var match$3=[0,l1,_qV_,4];break;
                                       case 229:var match$3=[0,l1,_qX_,_qW_];break;
                                       case 230:
                                        var match$3=[0,l2,_qZ_,[8,_qY_,[0,next_byte(0)]]];break;
                                       case 231:var match$3=[0,l1,_q0_,[32,x20]];break;
                                       case 232:var match$3=[0,l2,_q1_,[4,next_byte(0)]];break;
                                       case 233:var match$3=[0,l1,_q3_,_q2_];break;
                                       case 234:
                                        var match$3=[0,l3,_q5_,[0,[2,next_word(0)],_q4_]];break;
                                       case 235:var match$3=[0,l1,_q6_,4];break;
                                       case 236:var match$3=[0,l1,_q7_,4];break;
                                       case 237:var match$3=[0,l1,_q8_,4];break;
                                       case 238:
                                        var match$3=[0,l2,_q__,[10,_q9_,[0,next_byte(0)]]];break;
                                       case 239:var match$3=[0,l1,_q$_,[32,x28]];break;
                                       case 240:
                                        var match$3=[0,l2,_rb_,[0,_ra_,[7,next_byte(0)]]];break;
                                       case 241:var match$3=[0,l1,_rd_,_rc_];break;
                                       case 242:var match$3=[0,l1,_rf_,_re_];break;
                                       case 243:var match$3=[0,l1,_rg_,7];break;
                                       case 244:var match$3=[0,l1,_rh_,4];break;
                                       case 245:var match$3=[0,l1,_rj_,_ri_];break;
                                       case 246:
                                        var match$3=[0,l2,_rl_,[9,_rk_,[0,next_byte(0)]]];break;
                                       case 247:var match$3=[0,l1,_rm_,[32,x30]];break;
                                       case 248:
                                        var match$3=[0,l2,_ro_,[1,_rn_,[8,next_byte(0)]]];break;
                                       case 249:var match$3=[0,l1,_rq_,_rp_];break;
                                       case 250:
                                        var match$3=[0,l3,_rs_,[0,_rr_,[2,next_word(0)]]];break;
                                       case 251:var match$3=[0,l1,_rt_,8];break;
                                       case 252:var match$3=[0,l1,_ru_,4];break;
                                       case 253:var match$3=[0,l1,_rv_,4];break;
                                       case 254:
                                        var match$3=[0,l2,_rx_,[11,_rw_,[0,next_byte(0)]]];break;
                                       default:var match$3=[0,l1,_ry_,[32,x38]]}
                                    else
                                     switch(_ur_)
                                      {case 192:var match$3=[0,l1,_h8_,_h7_];break;
                                       case 193:var match$3=[0,l1,_h__,_h9_];break;
                                       case 194:
                                        var match$3=[0,l3,_h$_,[29,1,[1,next_word(0)]]];break;
                                       case 195:
                                        var match$3=[0,l3,_ia_,[29,0,[1,next_word(0)]]];break;
                                       case 196:var match$3=[0,l3,_ib_,[31,1,next_word(0)]];break;
                                       case 197:var match$3=[0,l1,_id_,_ic_];break;
                                       case 198:
                                        var match$3=[0,l2,_if_,[2,_ie_,[0,next_byte(0)]]];break;
                                       case 199:var match$3=[0,l1,_ig_,[32,x00]];break;
                                       case 200:var match$3=[0,l1,_ii_,_ih_];break;
                                       case 201:var match$3=[0,l1,_ik_,_ij_];break;
                                       case 202:
                                        var match$3=[0,l3,_il_,[29,2,[1,next_word(0)]]];break;
                                       case 203:
                                        var op$0=next_byte(0);
                                        if(255 < op$0 >>> 0)
                                         var match$3=failwith(caml_call1(sprintf(_im_),op$0));
                                        else
                                         {var _us_=op$0;
                                          if(128 <= _us_)
                                           if(192 <= _us_)
                                            if(224 <= _us_)
                                             switch(_us_)
                                              {case 224:var match$3=[0,l2,_po_,_pn_];break;
                                               case 225:var match$3=[0,l2,_pq_,_pp_];break;
                                               case 226:var match$3=[0,l2,_ps_,_pr_];break;
                                               case 227:var match$3=[0,l2,_pu_,_pt_];break;
                                               case 228:var match$3=[0,l2,_pw_,_pv_];break;
                                               case 229:var match$3=[0,l2,_py_,_px_];break;
                                               case 230:var match$3=[0,l2,_pA_,_pz_];break;
                                               case 231:var match$3=[0,l2,_pC_,_pB_];break;
                                               case 232:var match$3=[0,l2,_pE_,_pD_];break;
                                               case 233:var match$3=[0,l2,_pG_,_pF_];break;
                                               case 234:var match$3=[0,l2,_pI_,_pH_];break;
                                               case 235:var match$3=[0,l2,_pK_,_pJ_];break;
                                               case 236:var match$3=[0,l2,_pM_,_pL_];break;
                                               case 237:var match$3=[0,l2,_pO_,_pN_];break;
                                               case 238:var match$3=[0,l2,_pQ_,_pP_];break;
                                               case 239:var match$3=[0,l2,_pS_,_pR_];break;
                                               case 240:var match$3=[0,l2,_pU_,_pT_];break;
                                               case 241:var match$3=[0,l2,_pW_,_pV_];break;
                                               case 242:var match$3=[0,l2,_pY_,_pX_];break;
                                               case 243:var match$3=[0,l2,_p0_,_pZ_];break;
                                               case 244:var match$3=[0,l2,_p2_,_p1_];break;
                                               case 245:var match$3=[0,l2,_p4_,_p3_];break;
                                               case 246:var match$3=[0,l2,_p6_,_p5_];break;
                                               case 247:var match$3=[0,l2,_p8_,_p7_];break;
                                               case 248:var match$3=[0,l2,_p__,_p9_];break;
                                               case 249:var match$3=[0,l2,_qa_,_p$_];break;
                                               case 250:var match$3=[0,l2,_qc_,_qb_];break;
                                               case 251:var match$3=[0,l2,_qe_,_qd_];break;
                                               case 252:var match$3=[0,l2,_qg_,_qf_];break;
                                               case 253:var match$3=[0,l2,_qi_,_qh_];break;
                                               case 254:var match$3=[0,l2,_qk_,_qj_];break;
                                               default:var match$3=[0,l2,_qm_,_ql_]}
                                            else
                                             switch(_us_)
                                              {case 192:var match$3=[0,l2,_oo_,_on_];break;
                                               case 193:var match$3=[0,l2,_oq_,_op_];break;
                                               case 194:var match$3=[0,l2,_os_,_or_];break;
                                               case 195:var match$3=[0,l2,_ou_,_ot_];break;
                                               case 196:var match$3=[0,l2,_ow_,_ov_];break;
                                               case 197:var match$3=[0,l2,_oy_,_ox_];break;
                                               case 198:var match$3=[0,l2,_oA_,_oz_];break;
                                               case 199:var match$3=[0,l2,_oC_,_oB_];break;
                                               case 200:var match$3=[0,l2,_oE_,_oD_];break;
                                               case 201:var match$3=[0,l2,_oG_,_oF_];break;
                                               case 202:var match$3=[0,l2,_oI_,_oH_];break;
                                               case 203:var match$3=[0,l2,_oK_,_oJ_];break;
                                               case 204:var match$3=[0,l2,_oM_,_oL_];break;
                                               case 205:var match$3=[0,l2,_oO_,_oN_];break;
                                               case 206:var match$3=[0,l2,_oQ_,_oP_];break;
                                               case 207:var match$3=[0,l2,_oS_,_oR_];break;
                                               case 208:var match$3=[0,l2,_oU_,_oT_];break;
                                               case 209:var match$3=[0,l2,_oW_,_oV_];break;
                                               case 210:var match$3=[0,l2,_oY_,_oX_];break;
                                               case 211:var match$3=[0,l2,_o0_,_oZ_];break;
                                               case 212:var match$3=[0,l2,_o2_,_o1_];break;
                                               case 213:var match$3=[0,l2,_o4_,_o3_];break;
                                               case 214:var match$3=[0,l2,_o6_,_o5_];break;
                                               case 215:var match$3=[0,l2,_o8_,_o7_];break;
                                               case 216:var match$3=[0,l2,_o__,_o9_];break;
                                               case 217:var match$3=[0,l2,_pa_,_o$_];break;
                                               case 218:var match$3=[0,l2,_pc_,_pb_];break;
                                               case 219:var match$3=[0,l2,_pe_,_pd_];break;
                                               case 220:var match$3=[0,l2,_pg_,_pf_];break;
                                               case 221:var match$3=[0,l2,_pi_,_ph_];break;
                                               case 222:var match$3=[0,l2,_pk_,_pj_];break;
                                               default:var match$3=[0,l2,_pm_,_pl_]}
                                           else
                                            if(160 <= _us_)
                                             switch(_us_)
                                              {case 160:var match$3=[0,l2,_no_,_nn_];break;
                                               case 161:var match$3=[0,l2,_nq_,_np_];break;
                                               case 162:var match$3=[0,l2,_ns_,_nr_];break;
                                               case 163:var match$3=[0,l2,_nu_,_nt_];break;
                                               case 164:var match$3=[0,l2,_nw_,_nv_];break;
                                               case 165:var match$3=[0,l2,_ny_,_nx_];break;
                                               case 166:var match$3=[0,l2,_nA_,_nz_];break;
                                               case 167:var match$3=[0,l2,_nC_,_nB_];break;
                                               case 168:var match$3=[0,l2,_nE_,_nD_];break;
                                               case 169:var match$3=[0,l2,_nG_,_nF_];break;
                                               case 170:var match$3=[0,l2,_nI_,_nH_];break;
                                               case 171:var match$3=[0,l2,_nK_,_nJ_];break;
                                               case 172:var match$3=[0,l2,_nM_,_nL_];break;
                                               case 173:var match$3=[0,l2,_nO_,_nN_];break;
                                               case 174:var match$3=[0,l2,_nQ_,_nP_];break;
                                               case 175:var match$3=[0,l2,_nS_,_nR_];break;
                                               case 176:var match$3=[0,l2,_nU_,_nT_];break;
                                               case 177:var match$3=[0,l2,_nW_,_nV_];break;
                                               case 178:var match$3=[0,l2,_nY_,_nX_];break;
                                               case 179:var match$3=[0,l2,_n0_,_nZ_];break;
                                               case 180:var match$3=[0,l2,_n2_,_n1_];break;
                                               case 181:var match$3=[0,l2,_n4_,_n3_];break;
                                               case 182:var match$3=[0,l2,_n6_,_n5_];break;
                                               case 183:var match$3=[0,l2,_n8_,_n7_];break;
                                               case 184:var match$3=[0,l2,_n__,_n9_];break;
                                               case 185:var match$3=[0,l2,_oa_,_n$_];break;
                                               case 186:var match$3=[0,l2,_oc_,_ob_];break;
                                               case 187:var match$3=[0,l2,_oe_,_od_];break;
                                               case 188:var match$3=[0,l2,_og_,_of_];break;
                                               case 189:var match$3=[0,l2,_oi_,_oh_];break;
                                               case 190:var match$3=[0,l2,_ok_,_oj_];break;
                                               default:var match$3=[0,l2,_om_,_ol_]}
                                            else
                                             switch(_us_)
                                              {case 128:var match$3=[0,l2,_mo_,_mn_];break;
                                               case 129:var match$3=[0,l2,_mq_,_mp_];break;
                                               case 130:var match$3=[0,l2,_ms_,_mr_];break;
                                               case 131:var match$3=[0,l2,_mu_,_mt_];break;
                                               case 132:var match$3=[0,l2,_mw_,_mv_];break;
                                               case 133:var match$3=[0,l2,_my_,_mx_];break;
                                               case 134:var match$3=[0,l2,_mA_,_mz_];break;
                                               case 135:var match$3=[0,l2,_mC_,_mB_];break;
                                               case 136:var match$3=[0,l2,_mE_,_mD_];break;
                                               case 137:var match$3=[0,l2,_mG_,_mF_];break;
                                               case 138:var match$3=[0,l2,_mI_,_mH_];break;
                                               case 139:var match$3=[0,l2,_mK_,_mJ_];break;
                                               case 140:var match$3=[0,l2,_mM_,_mL_];break;
                                               case 141:var match$3=[0,l2,_mO_,_mN_];break;
                                               case 142:var match$3=[0,l2,_mQ_,_mP_];break;
                                               case 143:var match$3=[0,l2,_mS_,_mR_];break;
                                               case 144:var match$3=[0,l2,_mU_,_mT_];break;
                                               case 145:var match$3=[0,l2,_mW_,_mV_];break;
                                               case 146:var match$3=[0,l2,_mY_,_mX_];break;
                                               case 147:var match$3=[0,l2,_m0_,_mZ_];break;
                                               case 148:var match$3=[0,l2,_m2_,_m1_];break;
                                               case 149:var match$3=[0,l2,_m4_,_m3_];break;
                                               case 150:var match$3=[0,l2,_m6_,_m5_];break;
                                               case 151:var match$3=[0,l2,_m8_,_m7_];break;
                                               case 152:var match$3=[0,l2,_m__,_m9_];break;
                                               case 153:var match$3=[0,l2,_na_,_m$_];break;
                                               case 154:var match$3=[0,l2,_nc_,_nb_];break;
                                               case 155:var match$3=[0,l2,_ne_,_nd_];break;
                                               case 156:var match$3=[0,l2,_ng_,_nf_];break;
                                               case 157:var match$3=[0,l2,_ni_,_nh_];break;
                                               case 158:var match$3=[0,l2,_nk_,_nj_];break;
                                               default:var match$3=[0,l2,_nm_,_nl_]}
                                          else
                                           if(64 <= _us_)
                                            if(96 <= _us_)
                                             switch(_us_)
                                              {case 96:var match$3=[0,l2,_lo_,_ln_];break;
                                               case 97:var match$3=[0,l2,_lq_,_lp_];break;
                                               case 98:var match$3=[0,l2,_ls_,_lr_];break;
                                               case 99:var match$3=[0,l2,_lu_,_lt_];break;
                                               case 100:var match$3=[0,l2,_lw_,_lv_];break;
                                               case 101:var match$3=[0,l2,_ly_,_lx_];break;
                                               case 102:var match$3=[0,l2,_lA_,_lz_];break;
                                               case 103:var match$3=[0,l2,_lC_,_lB_];break;
                                               case 104:var match$3=[0,l2,_lE_,_lD_];break;
                                               case 105:var match$3=[0,l2,_lG_,_lF_];break;
                                               case 106:var match$3=[0,l2,_lI_,_lH_];break;
                                               case 107:var match$3=[0,l2,_lK_,_lJ_];break;
                                               case 108:var match$3=[0,l2,_lM_,_lL_];break;
                                               case 109:var match$3=[0,l2,_lO_,_lN_];break;
                                               case 110:var match$3=[0,l2,_lQ_,_lP_];break;
                                               case 111:var match$3=[0,l2,_lS_,_lR_];break;
                                               case 112:var match$3=[0,l2,_lU_,_lT_];break;
                                               case 113:var match$3=[0,l2,_lW_,_lV_];break;
                                               case 114:var match$3=[0,l2,_lY_,_lX_];break;
                                               case 115:var match$3=[0,l2,_l0_,_lZ_];break;
                                               case 116:var match$3=[0,l2,_l2_,_l1_];break;
                                               case 117:var match$3=[0,l2,_l4_,_l3_];break;
                                               case 118:var match$3=[0,l2,_l6_,_l5_];break;
                                               case 119:var match$3=[0,l2,_l8_,_l7_];break;
                                               case 120:var match$3=[0,l2,_l__,_l9_];break;
                                               case 121:var match$3=[0,l2,_ma_,_l$_];break;
                                               case 122:var match$3=[0,l2,_mc_,_mb_];break;
                                               case 123:var match$3=[0,l2,_me_,_md_];break;
                                               case 124:var match$3=[0,l2,_mg_,_mf_];break;
                                               case 125:var match$3=[0,l2,_mi_,_mh_];break;
                                               case 126:var match$3=[0,l2,_mk_,_mj_];break;
                                               default:var match$3=[0,l2,_mm_,_ml_]}
                                            else
                                             switch(_us_)
                                              {case 64:var match$3=[0,l2,_ko_,_kn_];break;
                                               case 65:var match$3=[0,l2,_kq_,_kp_];break;
                                               case 66:var match$3=[0,l2,_ks_,_kr_];break;
                                               case 67:var match$3=[0,l2,_ku_,_kt_];break;
                                               case 68:var match$3=[0,l2,_kw_,_kv_];break;
                                               case 69:var match$3=[0,l2,_ky_,_kx_];break;
                                               case 70:var match$3=[0,l2,_kA_,_kz_];break;
                                               case 71:var match$3=[0,l2,_kC_,_kB_];break;
                                               case 72:var match$3=[0,l2,_kE_,_kD_];break;
                                               case 73:var match$3=[0,l2,_kG_,_kF_];break;
                                               case 74:var match$3=[0,l2,_kI_,_kH_];break;
                                               case 75:var match$3=[0,l2,_kK_,_kJ_];break;
                                               case 76:var match$3=[0,l2,_kM_,_kL_];break;
                                               case 77:var match$3=[0,l2,_kO_,_kN_];break;
                                               case 78:var match$3=[0,l2,_kQ_,_kP_];break;
                                               case 79:var match$3=[0,l2,_kS_,_kR_];break;
                                               case 80:var match$3=[0,l2,_kU_,_kT_];break;
                                               case 81:var match$3=[0,l2,_kW_,_kV_];break;
                                               case 82:var match$3=[0,l2,_kY_,_kX_];break;
                                               case 83:var match$3=[0,l2,_k0_,_kZ_];break;
                                               case 84:var match$3=[0,l2,_k2_,_k1_];break;
                                               case 85:var match$3=[0,l2,_k4_,_k3_];break;
                                               case 86:var match$3=[0,l2,_k6_,_k5_];break;
                                               case 87:var match$3=[0,l2,_k8_,_k7_];break;
                                               case 88:var match$3=[0,l2,_k__,_k9_];break;
                                               case 89:var match$3=[0,l2,_la_,_k$_];break;
                                               case 90:var match$3=[0,l2,_lc_,_lb_];break;
                                               case 91:var match$3=[0,l2,_le_,_ld_];break;
                                               case 92:var match$3=[0,l2,_lg_,_lf_];break;
                                               case 93:var match$3=[0,l2,_li_,_lh_];break;
                                               case 94:var match$3=[0,l2,_lk_,_lj_];break;
                                               default:var match$3=[0,l2,_lm_,_ll_]}
                                           else
                                            if(32 <= _us_)
                                             switch(_us_)
                                              {case 32:var match$3=[0,l2,_jo_,_jn_];break;
                                               case 33:var match$3=[0,l2,_jq_,_jp_];break;
                                               case 34:var match$3=[0,l2,_js_,_jr_];break;
                                               case 35:var match$3=[0,l2,_ju_,_jt_];break;
                                               case 36:var match$3=[0,l2,_jw_,_jv_];break;
                                               case 37:var match$3=[0,l2,_jy_,_jx_];break;
                                               case 38:var match$3=[0,l2,_jA_,_jz_];break;
                                               case 39:var match$3=[0,l2,_jC_,_jB_];break;
                                               case 40:var match$3=[0,l2,_jE_,_jD_];break;
                                               case 41:var match$3=[0,l2,_jG_,_jF_];break;
                                               case 42:var match$3=[0,l2,_jI_,_jH_];break;
                                               case 43:var match$3=[0,l2,_jK_,_jJ_];break;
                                               case 44:var match$3=[0,l2,_jM_,_jL_];break;
                                               case 45:var match$3=[0,l2,_jO_,_jN_];break;
                                               case 46:var match$3=[0,l2,_jQ_,_jP_];break;
                                               case 47:var match$3=[0,l2,_jS_,_jR_];break;
                                               case 48:var match$3=[0,l2,_jU_,_jT_];break;
                                               case 49:var match$3=[0,l2,_jW_,_jV_];break;
                                               case 50:var match$3=[0,l2,_jY_,_jX_];break;
                                               case 51:var match$3=[0,l2,_j0_,_jZ_];break;
                                               case 52:var match$3=[0,l2,_j2_,_j1_];break;
                                               case 53:var match$3=[0,l2,_j4_,_j3_];break;
                                               case 54:var match$3=[0,l2,_j6_,_j5_];break;
                                               case 55:var match$3=[0,l2,_j8_,_j7_];break;
                                               case 56:var match$3=[0,l2,_j__,_j9_];break;
                                               case 57:var match$3=[0,l2,_ka_,_j$_];break;
                                               case 58:var match$3=[0,l2,_kc_,_kb_];break;
                                               case 59:var match$3=[0,l2,_ke_,_kd_];break;
                                               case 60:var match$3=[0,l2,_kg_,_kf_];break;
                                               case 61:var match$3=[0,l2,_ki_,_kh_];break;
                                               case 62:var match$3=[0,l2,_kk_,_kj_];break;
                                               default:var match$3=[0,l2,_km_,_kl_]}
                                            else
                                             switch(_us_)
                                              {case 0:var match$3=[0,l2,_io_,_in_];break;
                                               case 1:var match$3=[0,l2,_iq_,_ip_];break;
                                               case 2:var match$3=[0,l2,_is_,_ir_];break;
                                               case 3:var match$3=[0,l2,_iu_,_it_];break;
                                               case 4:var match$3=[0,l2,_iw_,_iv_];break;
                                               case 5:var match$3=[0,l2,_iy_,_ix_];break;
                                               case 6:var match$3=[0,l2,_iA_,_iz_];break;
                                               case 7:var match$3=[0,l2,_iC_,_iB_];break;
                                               case 8:var match$3=[0,l2,_iE_,_iD_];break;
                                               case 9:var match$3=[0,l2,_iG_,_iF_];break;
                                               case 10:var match$3=[0,l2,_iI_,_iH_];break;
                                               case 11:var match$3=[0,l2,_iK_,_iJ_];break;
                                               case 12:var match$3=[0,l2,_iM_,_iL_];break;
                                               case 13:var match$3=[0,l2,_iO_,_iN_];break;
                                               case 14:var match$3=[0,l2,_iQ_,_iP_];break;
                                               case 15:var match$3=[0,l2,_iS_,_iR_];break;
                                               case 16:var match$3=[0,l2,_iU_,_iT_];break;
                                               case 17:var match$3=[0,l2,_iW_,_iV_];break;
                                               case 18:var match$3=[0,l2,_iY_,_iX_];break;
                                               case 19:var match$3=[0,l2,_i0_,_iZ_];break;
                                               case 20:var match$3=[0,l2,_i2_,_i1_];break;
                                               case 21:var match$3=[0,l2,_i4_,_i3_];break;
                                               case 22:var match$3=[0,l2,_i6_,_i5_];break;
                                               case 23:var match$3=[0,l2,_i8_,_i7_];break;
                                               case 24:var match$3=[0,l2,_i__,_i9_];break;
                                               case 25:var match$3=[0,l2,_ja_,_i$_];break;
                                               case 26:var match$3=[0,l2,_jc_,_jb_];break;
                                               case 27:var match$3=[0,l2,_je_,_jd_];break;
                                               case 28:var match$3=[0,l2,_jg_,_jf_];break;
                                               case 29:var match$3=[0,l2,_ji_,_jh_];break;
                                               case 30:var match$3=[0,l2,_jk_,_jj_];break;
                                               default:var match$3=[0,l2,_jm_,_jl_]}}
                                        break;
                                       case 204:var match$3=[0,l3,_qn_,[31,2,next_word(0)]];break;
                                       case 205:var match$3=[0,l3,_qo_,[31,0,next_word(0)]];break;
                                       case 206:
                                        var match$3=[0,l2,_qq_,[5,_qp_,[0,next_byte(0)]]];break;
                                       case 207:var match$3=[0,l1,_qr_,[32,x08]];break;
                                       case 208:var match$3=[0,l1,_qt_,_qs_];break;
                                       case 209:var match$3=[0,l1,_qv_,_qu_];break;
                                       case 210:
                                        var match$3=[0,l3,_qw_,[29,3,[1,next_word(0)]]];break;
                                       case 211:var match$3=[0,l1,_qx_,4];break;
                                       case 212:var match$3=[0,l3,_qy_,[31,3,next_word(0)]];break;
                                       case 213:var match$3=[0,l1,_qA_,_qz_];break;
                                       case 214:
                                        var match$3=[0,l2,_qC_,[6,_qB_,[0,next_byte(0)]]];break;
                                       case 215:var match$3=[0,l1,_qD_,[32,x10]];break;
                                       case 216:var match$3=[0,l1,_qF_,_qE_];break;
                                       case 217:var match$3=[0,l1,_qG_,13];break;
                                       case 218:
                                        var match$3=[0,l3,_qH_,[29,4,[1,next_word(0)]]];break;
                                       case 219:var match$3=[0,l1,_qI_,4];break;
                                       case 220:var match$3=[0,l3,_qJ_,[31,4,next_word(0)]];break;
                                       case 221:var match$3=[0,l1,_qK_,4];break;
                                       case 222:
                                        var match$3=[0,l2,_qM_,[7,_qL_,[0,next_byte(0)]]];break;
                                       default:var match$3=[0,l1,_qN_,[32,x18]]}
                                   else
                                    if(160 <= _ur_)
                                     switch(_ur_)
                                      {case 160:var match$3=[0,l1,_g8_,_g7_];break;
                                       case 161:var match$3=[0,l1,_g__,_g9_];break;
                                       case 162:var match$3=[0,l1,_ha_,_g$_];break;
                                       case 163:var match$3=[0,l1,_hc_,_hb_];break;
                                       case 164:var match$3=[0,l1,_he_,_hd_];break;
                                       case 165:var match$3=[0,l1,_hg_,_hf_];break;
                                       case 166:var match$3=[0,l1,_hi_,_hh_];break;
                                       case 167:var match$3=[0,l1,_hk_,_hj_];break;
                                       case 168:var match$3=[0,l1,_hm_,_hl_];break;
                                       case 169:var match$3=[0,l1,_ho_,_hn_];break;
                                       case 170:var match$3=[0,l1,_hq_,_hp_];break;
                                       case 171:var match$3=[0,l1,_hs_,_hr_];break;
                                       case 172:var match$3=[0,l1,_hu_,_ht_];break;
                                       case 173:var match$3=[0,l1,_hw_,_hv_];break;
                                       case 174:var match$3=[0,l1,_hy_,_hx_];break;
                                       case 175:var match$3=[0,l1,_hA_,_hz_];break;
                                       case 176:var match$3=[0,l1,_hC_,_hB_];break;
                                       case 177:var match$3=[0,l1,_hE_,_hD_];break;
                                       case 178:var match$3=[0,l1,_hG_,_hF_];break;
                                       case 179:var match$3=[0,l1,_hI_,_hH_];break;
                                       case 180:var match$3=[0,l1,_hK_,_hJ_];break;
                                       case 181:var match$3=[0,l1,_hM_,_hL_];break;
                                       case 182:var match$3=[0,l1,_hO_,_hN_];break;
                                       case 183:var match$3=[0,l1,_hQ_,_hP_];break;
                                       case 184:var match$3=[0,l1,_hS_,_hR_];break;
                                       case 185:var match$3=[0,l1,_hU_,_hT_];break;
                                       case 186:var match$3=[0,l1,_hW_,_hV_];break;
                                       case 187:var match$3=[0,l1,_hY_,_hX_];break;
                                       case 188:var match$3=[0,l1,_h0_,_hZ_];break;
                                       case 189:var match$3=[0,l1,_h2_,_h1_];break;
                                       case 190:var match$3=[0,l1,_h4_,_h3_];break;
                                       default:var match$3=[0,l1,_h6_,_h5_]}
                                    else
                                     switch(_ur_)
                                      {case 128:var match$3=[0,l1,_f8_,_f7_];break;
                                       case 129:var match$3=[0,l1,_f__,_f9_];break;
                                       case 130:var match$3=[0,l1,_ga_,_f$_];break;
                                       case 131:var match$3=[0,l1,_gc_,_gb_];break;
                                       case 132:var match$3=[0,l1,_ge_,_gd_];break;
                                       case 133:var match$3=[0,l1,_gg_,_gf_];break;
                                       case 134:var match$3=[0,l1,_gi_,_gh_];break;
                                       case 135:var match$3=[0,l1,_gk_,_gj_];break;
                                       case 136:var match$3=[0,l1,_gm_,_gl_];break;
                                       case 137:var match$3=[0,l1,_go_,_gn_];break;
                                       case 138:var match$3=[0,l1,_gq_,_gp_];break;
                                       case 139:var match$3=[0,l1,_gs_,_gr_];break;
                                       case 140:var match$3=[0,l1,_gu_,_gt_];break;
                                       case 141:var match$3=[0,l1,_gw_,_gv_];break;
                                       case 142:var match$3=[0,l1,_gy_,_gx_];break;
                                       case 143:var match$3=[0,l1,_gA_,_gz_];break;
                                       case 144:var match$3=[0,l1,_gC_,_gB_];break;
                                       case 145:var match$3=[0,l1,_gE_,_gD_];break;
                                       case 146:var match$3=[0,l1,_gG_,_gF_];break;
                                       case 147:var match$3=[0,l1,_gI_,_gH_];break;
                                       case 148:var match$3=[0,l1,_gK_,_gJ_];break;
                                       case 149:var match$3=[0,l1,_gM_,_gL_];break;
                                       case 150:var match$3=[0,l1,_gO_,_gN_];break;
                                       case 151:var match$3=[0,l1,_gQ_,_gP_];break;
                                       case 152:var match$3=[0,l1,_gS_,_gR_];break;
                                       case 153:var match$3=[0,l1,_gU_,_gT_];break;
                                       case 154:var match$3=[0,l1,_gW_,_gV_];break;
                                       case 155:var match$3=[0,l1,_gY_,_gX_];break;
                                       case 156:var match$3=[0,l1,_g0_,_gZ_];break;
                                       case 157:var match$3=[0,l1,_g2_,_g1_];break;
                                       case 158:var match$3=[0,l1,_g4_,_g3_];break;
                                       default:var match$3=[0,l1,_g6_,_g5_]}
                                  else
                                   if(64 <= _ur_)
                                    if(96 <= _ur_)
                                     switch(_ur_)
                                      {case 96:var match$3=[0,l1,_e9_,_e8_];break;
                                       case 97:var match$3=[0,l1,_e$_,_e__];break;
                                       case 98:var match$3=[0,l1,_fb_,_fa_];break;
                                       case 99:var match$3=[0,l1,_fd_,_fc_];break;
                                       case 100:var match$3=[0,l1,_ff_,_fe_];break;
                                       case 101:var match$3=[0,l1,_fh_,_fg_];break;
                                       case 102:var match$3=[0,l1,_fj_,_fi_];break;
                                       case 103:var match$3=[0,l1,_fl_,_fk_];break;
                                       case 104:var match$3=[0,l1,_fn_,_fm_];break;
                                       case 105:var match$3=[0,l1,_fp_,_fo_];break;
                                       case 106:var match$3=[0,l1,_fr_,_fq_];break;
                                       case 107:var match$3=[0,l1,_ft_,_fs_];break;
                                       case 108:var match$3=[0,l1,_fv_,_fu_];break;
                                       case 109:var match$3=[0,l1,_fx_,_fw_];break;
                                       case 110:var match$3=[0,l1,_fz_,_fy_];break;
                                       case 111:var match$3=[0,l1,_fB_,_fA_];break;
                                       case 112:var match$3=[0,l1,_fD_,_fC_];break;
                                       case 113:var match$3=[0,l1,_fF_,_fE_];break;
                                       case 114:var match$3=[0,l1,_fH_,_fG_];break;
                                       case 115:var match$3=[0,l1,_fJ_,_fI_];break;
                                       case 116:var match$3=[0,l1,_fL_,_fK_];break;
                                       case 117:var match$3=[0,l1,_fN_,_fM_];break;
                                       case 118:var match$3=[0,l1,_fO_,5];break;
                                       case 119:var match$3=[0,l1,_fQ_,_fP_];break;
                                       case 120:var match$3=[0,l1,_fS_,_fR_];break;
                                       case 121:var match$3=[0,l1,_fU_,_fT_];break;
                                       case 122:var match$3=[0,l1,_fW_,_fV_];break;
                                       case 123:var match$3=[0,l1,_fY_,_fX_];break;
                                       case 124:var match$3=[0,l1,_f0_,_fZ_];break;
                                       case 125:var match$3=[0,l1,_f2_,_f1_];break;
                                       case 126:var match$3=[0,l1,_f4_,_f3_];break;
                                       default:var match$3=[0,l1,_f6_,_f5_]}
                                    else
                                     switch(_ur_)
                                      {case 64:var match$3=[0,l1,_d9_,_d8_];break;
                                       case 65:var match$3=[0,l1,_d$_,_d__];break;
                                       case 66:var match$3=[0,l1,_eb_,_ea_];break;
                                       case 67:var match$3=[0,l1,_ed_,_ec_];break;
                                       case 68:var match$3=[0,l1,_ef_,_ee_];break;
                                       case 69:var match$3=[0,l1,_eh_,_eg_];break;
                                       case 70:var match$3=[0,l1,_ej_,_ei_];break;
                                       case 71:var match$3=[0,l1,_el_,_ek_];break;
                                       case 72:var match$3=[0,l1,_en_,_em_];break;
                                       case 73:var match$3=[0,l1,_ep_,_eo_];break;
                                       case 74:var match$3=[0,l1,_er_,_eq_];break;
                                       case 75:var match$3=[0,l1,_et_,_es_];break;
                                       case 76:var match$3=[0,l1,_ev_,_eu_];break;
                                       case 77:var match$3=[0,l1,_ex_,_ew_];break;
                                       case 78:var match$3=[0,l1,_ez_,_ey_];break;
                                       case 79:var match$3=[0,l1,_eB_,_eA_];break;
                                       case 80:var match$3=[0,l1,_eD_,_eC_];break;
                                       case 81:var match$3=[0,l1,_eF_,_eE_];break;
                                       case 82:var match$3=[0,l1,_eH_,_eG_];break;
                                       case 83:var match$3=[0,l1,_eJ_,_eI_];break;
                                       case 84:var match$3=[0,l1,_eL_,_eK_];break;
                                       case 85:var match$3=[0,l1,_eN_,_eM_];break;
                                       case 86:var match$3=[0,l1,_eP_,_eO_];break;
                                       case 87:var match$3=[0,l1,_eR_,_eQ_];break;
                                       case 88:var match$3=[0,l1,_eT_,_eS_];break;
                                       case 89:var match$3=[0,l1,_eV_,_eU_];break;
                                       case 90:var match$3=[0,l1,_eX_,_eW_];break;
                                       case 91:var match$3=[0,l1,_eZ_,_eY_];break;
                                       case 92:var match$3=[0,l1,_e1_,_e0_];break;
                                       case 93:var match$3=[0,l1,_e3_,_e2_];break;
                                       case 94:var match$3=[0,l1,_e5_,_e4_];break;
                                       default:var match$3=[0,l1,_e7_,_e6_]}
                                   else
                                    if(32 <= _ur_)
                                     switch(_ur_)
                                      {case 32:var match$3=[0,l2,_df_,[30,1,next_byte(0)]];break;
                                       case 33:
                                        var match$3=[0,l3,_dh_,[1,_dg_,[1,next_word(0)]]];break;
                                       case 34:var match$3=[0,l1,_dj_,_di_];break;
                                       case 35:var match$3=[0,l1,_dl_,_dk_];break;
                                       case 36:var match$3=[0,l1,_dn_,_dm_];break;
                                       case 37:var match$3=[0,l1,_dp_,_do_];break;
                                       case 38:
                                        var match$3=[0,l2,_dr_,[0,_dq_,[0,next_byte(0)]]];break;
                                       case 39:var match$3=[0,l1,_ds_,0];break;
                                       case 40:var match$3=[0,l2,_dt_,[30,2,next_byte(0)]];break;
                                       case 41:var match$3=[0,l1,_dv_,_du_];break;
                                       case 42:var match$3=[0,l1,_dx_,_dw_];break;
                                       case 43:var match$3=[0,l1,_dz_,_dy_];break;
                                       case 44:var match$3=[0,l1,_dB_,_dA_];break;
                                       case 45:var match$3=[0,l1,_dD_,_dC_];break;
                                       case 46:
                                        var match$3=[0,l2,_dF_,[0,_dE_,[0,next_byte(0)]]];break;
                                       case 47:var match$3=[0,l1,_dG_,1];break;
                                       case 48:var match$3=[0,l2,_dH_,[30,3,next_byte(0)]];break;
                                       case 49:
                                        var match$3=[0,l3,_dI_,[1,3,[1,next_word(0)]]];break;
                                       case 50:var match$3=[0,l1,_dK_,_dJ_];break;
                                       case 51:var match$3=[0,l1,_dM_,_dL_];break;
                                       case 52:var match$3=[0,l1,_dO_,_dN_];break;
                                       case 53:var match$3=[0,l1,_dQ_,_dP_];break;
                                       case 54:
                                        var match$3=[0,l2,_dS_,[0,_dR_,[0,next_byte(0)]]];break;
                                       case 55:var match$3=[0,l1,_dT_,3];break;
                                       case 56:var match$3=[0,l2,_dU_,[30,4,next_byte(0)]];break;
                                       case 57:var match$3=[0,l1,_dW_,_dV_];break;
                                       case 58:var match$3=[0,l1,_dY_,_dX_];break;
                                       case 59:var match$3=[0,l1,_d0_,_dZ_];break;
                                       case 60:var match$3=[0,l1,_d2_,_d1_];break;
                                       case 61:var match$3=[0,l1,_d4_,_d3_];break;
                                       case 62:
                                        var match$3=[0,l2,_d6_,[0,_d5_,[0,next_byte(0)]]];break;
                                       default:var match$3=[0,l1,_d7_,2]}
                                    else
                                     switch(_ur_)
                                      {case 0:var match$3=[0,l1,_cn_,4];break;
                                       case 1:
                                        var match$3=[0,l3,_cp_,[1,_co_,[1,next_word(0)]]];break;
                                       case 2:var match$3=[0,l1,_cr_,_cq_];break;
                                       case 3:var match$3=[0,l1,_ct_,_cs_];break;
                                       case 4:var match$3=[0,l1,_cv_,_cu_];break;
                                       case 5:var match$3=[0,l1,_cx_,_cw_];break;
                                       case 6:
                                        var match$3=[0,l2,_cz_,[0,_cy_,[0,next_byte(0)]]];break;
                                       case 7:var match$3=[0,l1,_cA_,9];break;
                                       case 8:var match$3=[0,l3,_cB_,[1,[3,next_word(0)],3]];break;
                                       case 9:var match$3=[0,l1,_cD_,_cC_];break;
                                       case 10:var match$3=[0,l1,_cF_,_cE_];break;
                                       case 11:var match$3=[0,l1,_cH_,_cG_];break;
                                       case 12:var match$3=[0,l1,_cJ_,_cI_];break;
                                       case 13:var match$3=[0,l1,_cL_,_cK_];break;
                                       case 14:
                                        var match$3=[0,l2,_cN_,[0,_cM_,[0,next_byte(0)]]];break;
                                       case 15:var match$3=[0,l1,_cO_,11];break;
                                       case 16:next_byte(0);var match$3=[0,l2,_cP_,6];break;
                                       case 17:
                                        var match$3=[0,l3,_cR_,[1,_cQ_,[1,next_word(0)]]];break;
                                       case 18:var match$3=[0,l1,_cT_,_cS_];break;
                                       case 19:var match$3=[0,l1,_cV_,_cU_];break;
                                       case 20:var match$3=[0,l1,_cX_,_cW_];break;
                                       case 21:var match$3=[0,l1,_cZ_,_cY_];break;
                                       case 22:
                                        var match$3=[0,l2,_c1_,[0,_c0_,[0,next_byte(0)]]];break;
                                       case 23:var match$3=[0,l1,_c2_,10];break;
                                       case 24:var match$3=[0,l2,_c3_,[30,0,next_byte(0)]];break;
                                       case 25:var match$3=[0,l1,_c5_,_c4_];break;
                                       case 26:var match$3=[0,l1,_c7_,_c6_];break;
                                       case 27:var match$3=[0,l1,_c9_,_c8_];break;
                                       case 28:var match$3=[0,l1,_c$_,_c__];break;
                                       case 29:var match$3=[0,l1,_db_,_da_];break;
                                       case 30:
                                        var match$3=[0,l2,_dd_,[0,_dc_,[0,next_byte(0)]]];break;
                                       default:var match$3=[0,l1,_de_,12]}}
                                var inst=match$3[3],mcycles=match$3[2],len$1=match$3[1];
                                cpu[4] = caml_call2(symbol$3,cpu[4],len$1);
                                var
                                 _ui_=mcycles[1],
                                 _uj_=mcycles[2],
                                 _tB_=cpu[1],
                                 set_flags$1=
                                  function(_uz_)
                                   {function set_flags$0(_uA_,_uB_,_uC_,_uD_,_uE_)
                                     {return set_flags(_uz_,_uA_,_uB_,_uC_,_uD_,_uE_)}
                                    return set_flags$0},
                                 set_flags$0=set_flags$1(_tB_),
                                 read$0=
                                  function(set_flags)
                                   {function read(arg)
                                     {if(typeof arg === "number")
                                       switch(arg)
                                        {case 0:
                                          var
                                           c=read_r(cpu[1],2),
                                           addr=caml_call2(symbol$3,65280,c & 65535);
                                          return read_byte$2(cpu[2],addr);
                                         case 1:
                                          var addr$0=read_rr(cpu[1],3),_uw_=succ$0(addr$0);
                                          write_rr(cpu[1],3,_uw_);
                                          return read_byte$2(cpu[2],addr$0);
                                         case 2:
                                          var addr$1=read_rr(cpu[1],3),_ux_=pred$0(addr$1);
                                          write_rr(cpu[1],3,_ux_);
                                          return read_byte$2(cpu[2],addr$1);
                                         default:return cpu[5]}
                                      else
                                       switch(arg[0])
                                        {case 0:var n=arg[1];return n;
                                         case 1:var n$0=arg[1];return n$0;
                                         case 2:var addr$2=arg[1];return read_byte$2(cpu[2],addr$2);
                                         case 3:var addr$3=arg[1];return read_word(cpu[2],addr$3);
                                         case 4:var r=arg[1];return read_r(cpu[1],r);
                                         case 5:var rr=arg[1];return read_rr(cpu[1],rr);
                                         case 6:
                                          var rr$0=arg[1],addr$4=read_rr(cpu[1],rr$0);
                                          return read_byte$2(cpu[2],addr$4);
                                         case 7:
                                          var
                                           n$1=arg[1],
                                           addr$5=caml_call2(symbol$3,65280,n$1 & 65535);
                                          return read_byte$2(cpu[2],addr$5);
                                         default:
                                          var n$2=arg[1],_uy_=cpu[5],n$3=to_int(n$2);
                                          set_flags
                                           ([0,255 < ((_uy_ & 255) + (n$3 & 255) | 0)?1:0],
                                            [0,15 < ((_uy_ & 15) + (n$3 & 15) | 0)?1:0],
                                            _rN_,
                                            _rM_,
                                            0);
                                          return (_uy_ + n$3 | 0) & 65535}}
                                    return read},
                                 read=read$0(set_flags$0),
                                 symbol$7=
                                  function(x,y)
                                   {if(typeof x === "number")
                                     switch(x)
                                      {case 0:
                                        var
                                         c=read_r(cpu[1],2),
                                         addr=caml_call2(symbol$3,65280,c & 65535);
                                        return write_byte$3(cpu[2],addr,y);
                                       case 1:
                                        var addr$0=read_rr(cpu[1],3);
                                        write_byte$3(cpu[2],addr$0,y);
                                        var _uu_=succ$0(addr$0);
                                        return write_rr(cpu[1],3,_uu_);
                                       case 2:
                                        var addr$1=read_rr(cpu[1],3);
                                        write_byte$3(cpu[2],addr$1,y);
                                        var _uv_=pred$0(addr$1);
                                        return write_rr(cpu[1],3,_uv_);
                                       default:cpu[5] = y;return 0}
                                    else
                                     switch(x[0])
                                      {case 0:return failwith(sprintf(_rO_));
                                       case 1:return failwith(sprintf(_rP_));
                                       case 2:var addr$2=x[1];return write_byte$3(cpu[2],addr$2,y);
                                       case 3:var addr$3=x[1];return write_word(cpu[2],addr$3,y);
                                       case 4:var r=x[1];return write_r(cpu[1],r,y);
                                       case 5:var rr=x[1];return write_rr(cpu[1],rr,y);
                                       case 6:
                                        var rr$0=x[1],addr$4=read_rr(cpu[1],rr$0);
                                        return write_byte$3(cpu[2],addr$4,y);
                                       case 7:
                                        var n=x[1],addr$5=caml_call2(symbol$3,65280,n & 65535);
                                        return write_byte$3(cpu[2],addr$5,y);
                                       default:return failwith(sprintf(_rQ_))}},
                                 check_condition=
                                  function(t,param)
                                   {switch(param)
                                     {case 0:return 1;
                                      case 1:return 1 - read_flag(t[1],3);
                                      case 2:return read_flag(t[1],3);
                                      case 3:return 1 - read_flag(t[1],0);
                                      default:return read_flag(t[1],0)}};
                                if(typeof inst === "number")
                                 switch(inst)
                                  {case 0:
                                    var
                                     n_flag=read_flag(cpu[1],2),
                                     c_flag=read_flag(cpu[1],0),
                                     h_flag=read_flag(cpu[1],1),
                                     a=[0,read_r(cpu[1],0)];
                                    if(n_flag)
                                     {if(c_flag)a[1] = caml_call2(symbol$0,a[1],96);
                                      if(h_flag)a[1] = caml_call2(symbol$0,a[1],6)}
                                    else
                                     {var c_flag$0=c_flag || caml_greaterthan(a[1],153);
                                      if(c_flag$0)
                                       {a[1] = caml_call2(symbol,a[1],96);
                                        set_flags$0(_rS_,0,0,0,0)}
                                      var
                                       h_flag$0=
                                        h_flag || caml_greaterthan(caml_call2(land,a[1],15),9);
                                      if(h_flag$0)a[1] = caml_call2(symbol,a[1],6)}
                                    set_flags$0(0,_rR_,0,[0,caml_call2(symbol$1,a[1],zero)],0);
                                    write_r(cpu[1],0,a[1]);
                                    var next_pc=0;
                                    break;
                                   case 1:
                                    set_flags$0(0,_rU_,_rT_,0,0);
                                    var n=read_r(cpu[1],0),_tC_=caml_call2(lxor,n,max_int);
                                    write_r(cpu[1],0,_tC_);
                                    var next_pc=0;
                                    break;
                                   case 2:
                                    var c=read_flag(cpu[1],0);
                                    set_flags$0([0,1 - c],_rW_,_rV_,0,0);
                                    var next_pc=0;
                                    break;
                                   case 3:set_flags$0(_rZ_,_rY_,_rX_,0,0);var next_pc=0;break;
                                   case 4:var next_pc=0;break;
                                   case 5:cpu[6] = 1;var next_pc=0;break;
                                   case 6:throw [0,Assert_failure,_r0_];
                                   case 7:cpu[8] = 0;cpu[7] = 0;var next_pc=0;break;
                                   case 8:cpu[8] = 1;var next_pc=0;break;
                                   case 9:
                                    var
                                     a$0=read_r(cpu[1],0),
                                     c$0=caml_call2(symbol$2,caml_call2(land,a$0,128),zero),
                                     _tD_=c$0?one:zero,
                                     n$0=caml_call2(lor,caml_call2(lsl,a$0,1),_tD_);
                                    write_r(cpu[1],0,n$0);
                                    set_flags$0([0,c$0],_r3_,_r2_,_r1_,0);
                                    var next_pc=0;
                                    break;
                                   case 10:
                                    var
                                     a$1=read_r(cpu[1],0),
                                     old_c=read_flag(cpu[1],0),
                                     _tE_=old_c?one:zero,
                                     n$1=caml_call2(lor,caml_call2(lsl,a$1,1),_tE_);
                                    write_r(cpu[1],0,n$1);
                                    var
                                     new_c=
                                      caml_call2(symbol$2,caml_call2(land,a$1,128),zero);
                                    set_flags$0([0,new_c],_r6_,_r5_,_r4_,0);
                                    var next_pc=0;
                                    break;
                                   case 11:
                                    var
                                     a$2=read_r(cpu[1],0),
                                     c$1=caml_call2(symbol$2,caml_call2(land,a$2,1),zero),
                                     _tF_=c$1?128:zero,
                                     n$2=caml_call2(lor,caml_call2(lsr,a$2,1),_tF_);
                                    write_r(cpu[1],0,n$2);
                                    set_flags$0([0,c$1],_r9_,_r8_,_r7_,0);
                                    var next_pc=0;
                                    break;
                                   case 12:
                                    var
                                     a$3=read_r(cpu[1],0),
                                     old_c$0=read_flag(cpu[1],0),
                                     _tG_=old_c$0?128:zero,
                                     n$3=caml_call2(lor,caml_call2(lsr,a$3,1),_tG_);
                                    write_r(cpu[1],0,n$3);
                                    var
                                     new_c$0=
                                      caml_call2(symbol$2,caml_call2(land,a$3,1),zero);
                                    set_flags$0([0,new_c$0],_sa_,_r$_,_r__,0);
                                    var next_pc=0;
                                    break;
                                   default:
                                    var addr$0=read_word(cpu[2],cpu[5]);
                                    cpu[5] = caml_call2(symbol$3,cpu[5],2);
                                    cpu[7] = 1;
                                    var next_pc=[0,addr$0]}
                                else
                                 switch(inst[0])
                                  {case 0:
                                    var y$0=inst[2],x$0=inst[1];
                                    symbol$7(x$0,read(y$0));
                                    var next_pc=0;
                                    break;
                                   case 1:
                                    var y$1=inst[2],x$1=inst[1];
                                    symbol$7(x$1,read(y$1));
                                    var next_pc=0;
                                    break;
                                   case 2:
                                    var
                                     y$2=inst[2],
                                     x$2=inst[1],
                                     y$3=read(y$2),
                                     x$3=read(x$2),
                                     n$4=caml_call2(symbol,x$3,y$3),
                                     _tH_=[0,caml_equal(n$4,zero)],
                                     _tI_=caml_call2(land,y$3,15),
                                     _tJ_=
                                      [0,
                                       caml_greaterthan
                                        (caml_call2(symbol,caml_call2(land,x$3,15),_tI_),15)];
                                    set_flags$0
                                     ([0,caml_greaterthan(x$3,caml_call2(symbol$0,255,y$3))],
                                      _tJ_,
                                      _sb_,
                                      _tH_,
                                      0);
                                    symbol$7(x$2,n$4);
                                    var next_pc=0;
                                    break;
                                   case 3:
                                    var
                                     y$4=inst[2],
                                     x$4=inst[1],
                                     y$5=read(y$4),
                                     x$5=read(x$4),
                                     n$5=caml_call2(symbol$3,x$5,y$5),
                                     _tK_=caml_call2(land$0,y$5,4095),
                                     _tL_=
                                      [0,
                                       caml_greaterthan
                                        (caml_call2(symbol$3,caml_call2(land$0,x$5,4095),_tK_),4095)];
                                    set_flags$0
                                     ([0,caml_greaterthan(x$5,caml_call2(symbol$4,65535,y$5))],
                                      _tL_,
                                      _sc_,
                                      0,
                                      0);
                                    symbol$7(x$4,n$5);
                                    var next_pc=0;
                                    break;
                                   case 4:
                                    var y$6=inst[1],x$6=read(3),y$7=to_int(y$6);
                                    set_flags$0
                                     ([0,255 < ((x$6 & 255) + (y$7 & 255) | 0)?1:0],
                                      [0,15 < ((x$6 & 15) + (y$7 & 15) | 0)?1:0],
                                      _se_,
                                      _sd_,
                                      0);
                                    symbol$7(3,(x$6 + y$7 | 0) & 65535);
                                    var next_pc=0;
                                    break;
                                   case 5:
                                    var
                                     y$8=inst[2],
                                     x$7=inst[1],
                                     c$2=read_flag(cpu[1],0)?one:zero,
                                     y$9=read(y$8),
                                     x$8=read(x$7),
                                     n$6=caml_call2(symbol,caml_call2(symbol,x$8,y$9),c$2),
                                     _tM_=[0,caml_equal(n$6,zero)],
                                     _tN_=caml_call2(land,y$9,15);
                                    set_flags$0
                                     ([0,255 < ((x$8 + y$9 | 0) + c$2 | 0)?1:0],
                                      [0,
                                       caml_greaterthan
                                        (caml_call2
                                          (symbol,caml_call2(symbol,caml_call2(land,x$8,15),_tN_),c$2),
                                         15)],
                                      _sf_,
                                      _tM_,
                                      0);
                                    symbol$7(x$7,n$6);
                                    var next_pc=0;
                                    break;
                                   case 6:
                                    var
                                     y$10=inst[2],
                                     x$9=inst[1],
                                     y$11=read(y$10),
                                     x$10=read(x$9),
                                     n$7=caml_call2(symbol$0,x$10,y$11),
                                     _tO_=[0,caml_equal(n$7,zero)],
                                     _tP_=caml_call2(land,y$11,15);
                                    set_flags$0
                                     ([0,x$10 < y$11?1:0],
                                      [0,caml_lessthan(caml_call2(land,x$10,15),_tP_)],
                                      _sg_,
                                      _tO_,
                                      0);
                                    symbol$7(x$9,n$7);
                                    var next_pc=0;
                                    break;
                                   case 7:
                                    var
                                     y$12=inst[2],
                                     x$11=inst[1],
                                     c$3=read_flag(cpu[1],0)?one:zero,
                                     y$13=read(y$12),
                                     x$12=read(x$11),
                                     n$8=caml_call2(symbol$0,x$12,caml_call2(symbol,y$13,c$3)),
                                     _tQ_=[0,caml_equal(n$8,zero)],
                                     _tR_=caml_call2(symbol,caml_call2(land,y$13,15),c$3);
                                    set_flags$0
                                     ([0,x$12 < (y$13 + c$3 | 0)?1:0],
                                      [0,caml_lessthan(caml_call2(land,x$12,15),_tR_)],
                                      _sh_,
                                      _tQ_,
                                      0);
                                    symbol$7(x$11,n$8);
                                    var next_pc=0;
                                    break;
                                   case 8:
                                    var
                                     y$14=inst[2],
                                     x$13=inst[1],
                                     _tS_=read(y$14),
                                     n$9=caml_call2(land,read(x$13),_tS_);
                                    set_flags$0(_sk_,_sj_,_si_,[0,caml_equal(n$9,zero)],0);
                                    symbol$7(x$13,n$9);
                                    var next_pc=0;
                                    break;
                                   case 9:
                                    var
                                     y$15=inst[2],
                                     x$14=inst[1],
                                     _tT_=read(y$15),
                                     n$10=caml_call2(lor,read(x$14),_tT_);
                                    set_flags$0(_sn_,_sm_,_sl_,[0,caml_equal(n$10,zero)],0);
                                    symbol$7(x$14,n$10);
                                    var next_pc=0;
                                    break;
                                   case 10:
                                    var
                                     y$16=inst[2],
                                     x$15=inst[1],
                                     _tU_=read(y$16),
                                     n$11=caml_call2(lxor,read(x$15),_tU_);
                                    set_flags$0(_sq_,_sp_,_so_,[0,caml_equal(n$11,zero)],0);
                                    symbol$7(x$15,n$11);
                                    var next_pc=0;
                                    break;
                                   case 11:
                                    var
                                     y$17=inst[2],
                                     x$16=inst[1],
                                     y$18=read(y$17),
                                     x$17=read(x$16),
                                     n$12=caml_call2(symbol$0,x$17,y$18),
                                     _tV_=[0,caml_equal(n$12,zero)],
                                     _tW_=caml_call2(land,y$18,15);
                                    set_flags$0
                                     ([0,x$17 < y$18?1:0],
                                      [0,caml_lessthan(caml_call2(land,x$17,15),_tW_)],
                                      _sr_,
                                      _tV_,
                                      0);
                                    var next_pc=0;
                                    break;
                                   case 12:
                                    var
                                     x$18=inst[1],
                                     x$19=read(x$18),
                                     n$13=succ(x$19),
                                     _tX_=[0,caml_equal(n$13,zero)];
                                    set_flags$0
                                     (0,
                                      [0,caml_call2(symbol$1,caml_call2(land,x$19,15),15)],
                                      _ss_,
                                      _tX_,
                                      0);
                                    symbol$7(x$18,n$13);
                                    var next_pc=0;
                                    break;
                                   case 13:
                                    var x$20=inst[1];
                                    symbol$7(x$20,succ$0(read(x$20)));
                                    var next_pc=0;
                                    break;
                                   case 14:
                                    var
                                     x$21=inst[1],
                                     x$22=read(x$21),
                                     n$14=pred(x$22),
                                     _tY_=[0,caml_equal(n$14,zero)];
                                    set_flags$0
                                     (0,
                                      [0,caml_call2(symbol$1,caml_call2(land,x$22,15),0)],
                                      _st_,
                                      _tY_,
                                      0);
                                    symbol$7(x$21,n$14);
                                    var next_pc=0;
                                    break;
                                   case 15:
                                    var x$23=inst[1];
                                    symbol$7(x$23,pred$0(read(x$23)));
                                    var next_pc=0;
                                    break;
                                   case 16:
                                    var
                                     x$24=inst[1],
                                     x$25=read(x$24),
                                     _tZ_=caml_call2(lsr,x$25,4),
                                     n$15=caml_call2(lor,caml_call2(lsl,x$25,4),_tZ_);
                                    set_flags$0(_sw_,_sv_,_su_,[0,caml_equal(n$15,zero)],0);
                                    symbol$7(x$24,n$15);
                                    var next_pc=0;
                                    break;
                                   case 17:
                                    var
                                     x$26=inst[1],
                                     x$27=read(x$26),
                                     c$4=caml_call2(symbol$2,caml_call2(land,x$27,128),zero),
                                     _t0_=c$4?one:zero,
                                     n$16=caml_call2(lor,caml_call2(lsl,x$27,1),_t0_);
                                    symbol$7(x$26,n$16);
                                    set_flags$0
                                     ([0,c$4],_sy_,_sx_,[0,caml_call2(symbol$1,n$16,zero)],0);
                                    var next_pc=0;
                                    break;
                                   case 18:
                                    var
                                     x$28=inst[1],
                                     x$29=read(x$28),
                                     old_c$1=read_flag(cpu[1],0),
                                     _t1_=old_c$1?one:zero,
                                     n$17=caml_call2(lor,caml_call2(lsl,x$29,1),_t1_);
                                    symbol$7(x$28,n$17);
                                    var
                                     new_c$1=
                                      caml_call2(symbol$2,caml_call2(land,x$29,128),zero);
                                    set_flags$0
                                     ([0,new_c$1],_sA_,_sz_,[0,caml_call2(symbol$1,n$17,zero)],0);
                                    var next_pc=0;
                                    break;
                                   case 19:
                                    var
                                     x$30=inst[1],
                                     x$31=read(x$30),
                                     c$5=caml_call2(symbol$2,caml_call2(land,x$31,1),zero),
                                     _t2_=c$5?128:zero,
                                     n$18=caml_call2(lor,caml_call2(lsr,x$31,1),_t2_);
                                    symbol$7(x$30,n$18);
                                    set_flags$0
                                     ([0,c$5],_sC_,_sB_,[0,caml_call2(symbol$1,n$18,zero)],0);
                                    var next_pc=0;
                                    break;
                                   case 20:
                                    var
                                     x$32=inst[1],
                                     x$33=read(x$32),
                                     old_c$2=read_flag(cpu[1],0),
                                     _t3_=old_c$2?128:zero,
                                     n$19=caml_call2(lor,caml_call2(lsr,x$33,1),_t3_);
                                    symbol$7(x$32,n$19);
                                    var _t4_=[0,caml_call2(symbol$1,n$19,zero)];
                                    set_flags$0
                                     ([0,caml_call2(symbol$2,caml_call2(land,x$33,1),zero)],
                                      _sE_,
                                      _sD_,
                                      _t4_,
                                      0);
                                    var next_pc=0;
                                    break;
                                   case 21:
                                    var
                                     x$34=inst[1],
                                     x$35=read(x$34),
                                     n$20=caml_call2(lsl,x$35,1);
                                    symbol$7(x$34,n$20);
                                    var _t5_=[0,caml_call2(symbol$1,n$20,zero)];
                                    set_flags$0
                                     ([0,caml_call2(symbol$2,caml_call2(land,x$35,128),zero)],
                                      _sG_,
                                      _sF_,
                                      _t5_,
                                      0);
                                    var next_pc=0;
                                    break;
                                   case 22:
                                    var
                                     x$36=inst[1],
                                     x$37=read(x$36),
                                     _t6_=caml_call2(land,x$37,128),
                                     n$21=caml_call2(lor,caml_call2(lsr,x$37,1),_t6_);
                                    symbol$7(x$36,n$21);
                                    var _t7_=[0,caml_call2(symbol$1,n$21,zero)];
                                    set_flags$0
                                     ([0,caml_call2(symbol$2,caml_call2(land,x$37,1),zero)],
                                      _sI_,
                                      _sH_,
                                      _t7_,
                                      0);
                                    var next_pc=0;
                                    break;
                                   case 23:
                                    var
                                     x$38=inst[1],
                                     x$39=read(x$38),
                                     n$22=caml_call2(lsr,x$39,1);
                                    symbol$7(x$38,n$22);
                                    var _t8_=[0,caml_call2(symbol$1,n$22,zero)];
                                    set_flags$0
                                     ([0,caml_call2(symbol$2,caml_call2(land,x$39,1),zero)],
                                      _sK_,
                                      _sJ_,
                                      _t8_,
                                      0);
                                    var next_pc=0;
                                    break;
                                   case 24:
                                    var
                                     x$40=inst[2],
                                     n$23=inst[1],
                                     _t9_=caml_call2(lsl,one,n$23),
                                     b=caml_call2(symbol$1,caml_call2(land,read(x$40),_t9_),zero);
                                    set_flags$0(0,_sM_,_sL_,[0,b],0);
                                    var next_pc=0;
                                    break;
                                   case 25:
                                    var x$41=inst[2],n$24=inst[1],_t__=caml_call2(lsl,one,n$24);
                                    symbol$7(x$41,caml_call2(lor,read(x$41),_t__));
                                    var next_pc=0;
                                    break;
                                   case 26:
                                    var
                                     x$42=inst[2],
                                     n$25=inst[1],
                                     mask=caml_call2(lxor,caml_call2(lsl,one,n$25),255);
                                    symbol$7(x$42,caml_call2(land,read(x$42),mask));
                                    var next_pc=0;
                                    break;
                                   case 27:
                                    var rr=inst[1];
                                    cpu[5] = caml_call2(symbol$4,cpu[5],2);
                                    var _t$_=read_rr(cpu[1],rr);
                                    write_word(cpu[2],cpu[5],_t$_);
                                    var next_pc=0;
                                    break;
                                   case 28:
                                    var rr$0=inst[1],_ua_=read_word(cpu[2],cpu[5]);
                                    write_rr(cpu[1],rr$0,_ua_);
                                    cpu[5] = caml_call2(symbol$3,cpu[5],2);
                                    var next_pc=0;
                                    break;
                                   case 29:
                                    var
                                     x$43=inst[2],
                                     c$6=inst[1],
                                     _ub_=check_condition(cpu,c$6)?[0,read(x$43)]:0,
                                     next_pc=_ub_;
                                    break;
                                   case 30:
                                    var x$44=inst[2],c$7=inst[1];
                                    if(check_condition(cpu,c$7))
                                     var
                                      _uc_=to_int(x$44),
                                      addr$1=(cpu[4] + _uc_ | 0) & 65535,
                                      _ud_=[0,addr$1];
                                    else
                                     var _ud_=0;
                                    var next_pc=_ud_;
                                    break;
                                   case 31:
                                    var
                                     x$45=inst[2],
                                     c$8=inst[1],
                                     _ue_=
                                      check_condition(cpu,c$8)
                                       ?(cpu[5]
                                         =
                                         caml_call2(symbol$4,cpu[5],2),
                                         write_word(cpu[2],cpu[5],cpu[4]),
                                         [0,x$45])
                                       :0,
                                     next_pc=_ue_;
                                    break;
                                   case 32:
                                    var x$46=inst[1];
                                    cpu[5] = caml_call2(symbol$4,cpu[5],2);
                                    write_word(cpu[2],cpu[5],cpu[4]);
                                    var next_pc=[0,x$46];
                                    break;
                                   default:
                                    var c$9=inst[1];
                                    if(check_condition(cpu,c$9))
                                     {var addr$2=read_word(cpu[2],cpu[5]);
                                      cpu[5] = caml_call2(symbol$3,cpu[5],2);
                                      var _uf_=[0,addr$2]}
                                    else
                                     var _uf_=0;
                                    var next_pc=_uf_}
                                cpu[9] = inst;
                                if(next_pc)
                                 {var addr=next_pc[1];cpu[4] = addr;var _uk_=_uj_}
                                else
                                 var _uk_=_ui_;
                                var inst_mcycles=_uk_}
                              var _ul_=cpu[3],switch$0=0;
                              if(_ul_[1][2] && _ul_[2][2])
                               var match$4=_bR_;
                              else
                               switch$0 = 1;
                              if(switch$0)
                               {var switch$1=0;
                                if(_ul_[1][3] && _ul_[2][3])
                                 var match$4=_bS_;
                                else
                                 switch$1 = 1;
                                if(switch$1)
                                 {var switch$2=0;
                                  if(_ul_[1][4] && _ul_[2][4])
                                   var match$4=_bT_;
                                  else
                                   switch$2 = 1;
                                  if(switch$2)
                                   {var switch$3=0;
                                    if(_ul_[1][5] && _ul_[2][5])
                                     var match$4=_bU_;
                                    else
                                     switch$3 = 1;
                                    if(switch$3)
                                     {var switch$4=0;
                                      if(_ul_[1][6] && _ul_[2][6])
                                       var match$4=_bV_;
                                      else
                                       switch$4 = 1;
                                      if(switch$4)var match$4=0}}}}
                              if(match$4)
                               {var type$0=match$4[1];
                                cpu[6] = 0;
                                if(cpu[7])
                                 {cpu[7] = 0;
                                  var _um_=cpu[3];
                                  _um_[2] = update(_um_[2],type$0,0);
                                  switch(type$0)
                                   {case 0:var addr$3=64;break;
                                    case 1:var addr$3=72;break;
                                    case 2:var addr$3=80;break;
                                    case 3:var addr$3=88;break;
                                    default:var addr$3=96}
                                  cpu[5] = caml_call2(symbol$4,cpu[5],2);
                                  write_word(cpu[2],cpu[5],cpu[4]);
                                  cpu[4] = addr$3;
                                  var interrupt_mcycles=5}
                                else
                                 var interrupt_mcycles=0}
                              else
                               var interrupt_mcycles=0;
                              var
                               mcycles$0=inst_mcycles + interrupt_mcycles | 0,
                               before_mcycle_count=timer[6],
                               after_mcycle_count=before_mcycle_count + mcycles$0 | 0;
                              timer[6] = after_mcycle_count % 65536 | 0;
                              var
                               quotient_diff=
                                (after_mcycle_count / 64 | 0)
                                -
                                (before_mcycle_count / 64 | 0)
                                |
                                0;
                              timer[7] = (timer[7] + quotient_diff | 0) % 256 | 0;
                              if(timer[8])
                               {switch(timer[9])
                                 {case 0:var divider=256;break;
                                  case 1:var divider=4;break;
                                  case 2:var divider=16;break;
                                  default:var divider=64}
                                var
                                 _td_=caml_div(before_mcycle_count,divider),
                                 quotient_diff$0=
                                  caml_div(after_mcycle_count,divider)
                                  -
                                  _td_
                                  |
                                  0,
                                 before_tima_counter=timer[11];
                                timer[11] = (timer[11] + quotient_diff$0 | 0) % 256 | 0;
                                var after_tima_counter=timer[11];
                                if(after_tima_counter < before_tima_counter)
                                 {request(timer[5],2);timer[11] = timer[10]}}
                              var
                               incr_ly=
                                function(t)
                                 {var _ut_=t[9];
                                  _ut_[3][2] = _ut_[3][2] + 1 | 0;
                                  return get_ly(t[9])};
                              switch(gpu[12])
                               {case 0:
                                 gpu[11] = gpu[11] + mcycles$0 | 0;
                                 var match$2=gpu[7][7];
                                 switch(match$2)
                                  {case 0:
                                    if(20 <= gpu[11])
                                     {gpu[11] = gpu[11] % 20 | 0;set_gpu_mode(gpu[7],1)}
                                    var match$5=0;
                                    break;
                                   case 1:
                                    if(43 <= gpu[11])
                                     {gpu[11] = gpu[11] % 43 | 0;
                                      set_gpu_mode(gpu[7],2);
                                      if(is_enabled(gpu[7],3))request(gpu[10],1);
                                      var ly=get_ly(gpu[9]);
                                      if(gpu[8][9])
                                       {var
                                         tile_data_area=gpu[8][5],
                                         y=(gpu[9][1][2] + ly | 0) % 256 | 0,
                                         bg_tile_map_area=gpu[8][6],
                                         row_in_tile=y % 8 | 0,
                                         lx=[0,0],
                                         _tf_=gpu[9][2][2];
                                        for(;;)
                                         {if(lx[1] < 160)
                                           {var
                                             x=(_tf_ + lx[1] | 0) % 256 | 0,
                                             col_in_tile=x % 8 | 0,
                                             tile_index=get_tile_index(gpu[2],bg_tile_map_area,y,x),
                                             tile_pixel_row=
                                              get_row_pixels(gpu[1],tile_data_area,tile_index,row_in_tile),
                                             len=
                                              0 < col_in_tile
                                               ?8 - col_in_tile | 0
                                               :8 <= (160 - lx[1] | 0)?8:160 - lx[1] | 0,
                                             _ti_=len - 1 | 0,
                                             _th_=0;
                                            if(! (_ti_ < 0))
                                             {var i$1=_th_;
                                              for(;;)
                                               {var
                                                 _tj_=col_in_tile + i$1 | 0,
                                                 _tk_=caml_check_bound(tile_pixel_row,_tj_)[1 + _tj_],
                                                 color=lookup(gpu[4],_tk_),
                                                 _tl_=lx[1] + i$1 | 0;
                                                caml_check_bound(caml_check_bound(gpu[13],ly)[1 + ly],_tl_)
                                                 [1 + _tl_]
                                                =
                                                color;
                                                var _tm_=i$1 + 1 | 0;
                                                if(_ti_ !== i$1){var i$1=_tm_;continue}
                                                break}}
                                            lx[1] = lx[1] + len | 0;
                                            continue}
                                          if(gpu[8][4])
                                           {var
                                             _tg_=gpu[9][5][2],
                                             wx=gpu[9][6][2] - 7 | 0,
                                             _tn_=_tg_ <= ly?1:0;
                                            if(_tn_)
                                             var
                                              _to_=ly <= (_tg_ + 256 | 0)?1:0,
                                              _tp_=_to_?wx <= 160?1:0:_to_;
                                            else
                                             var _tp_=_tn_;
                                            if(_tp_)
                                             {var
                                               window_tile_map_area=gpu[8][3],
                                               y_in_w=abs$0(ly - _tg_ | 0),
                                               row_in_tile$0=y_in_w % 8 | 0,
                                               wx$0=0 <= wx?wx:0,
                                               lx$0=[0,wx$0];
                                              for(;;)
                                               {if(lx$0[1] < 160)
                                                 {var
                                                   x_in_w=abs$0(lx$0[1] - wx | 0),
                                                   tile_index$0=
                                                    get_tile_index(gpu[2],window_tile_map_area,y_in_w,x_in_w),
                                                   tile_pixel_row$0=
                                                    get_row_pixels
                                                     (gpu[1],tile_data_area,tile_index$0,row_in_tile$0),
                                                   len$0=8 <= (160 - lx$0[1] | 0)?8:160 - lx$0[1] | 0,
                                                   _tr_=len$0 - 1 | 0,
                                                   _tq_=0;
                                                  if(! (_tr_ < 0))
                                                   {var i$2=_tq_;
                                                    for(;;)
                                                     {var
                                                       _ts_=caml_check_bound(tile_pixel_row$0,i$2)[1 + i$2],
                                                       color$0=lookup(gpu[4],_ts_),
                                                       _tt_=lx$0[1] + i$2 | 0;
                                                      caml_check_bound(caml_check_bound(gpu[13],ly)[1 + ly],_tt_)
                                                       [1 + _tt_]
                                                      =
                                                      color$0;
                                                      var _tu_=i$2 + 1 | 0;
                                                      if(_tr_ !== i$2){var i$2=_tu_;continue}
                                                      break}}
                                                  lx$0[1] = lx$0[1] + len$0 | 0;
                                                  continue}
                                                break}}}
                                          break}}
                                      if(gpu[8][8])
                                       {var
                                         match=gpu[8][7],
                                         y_sprite_size=1056320505 <= match?8:16,
                                         _tv_=gpu[3][1],
                                         _tb_=_tv_.length - 1 - 1 | 0,
                                         _ta_=0;
                                        if(! (_tb_ < 0))
                                         {var i$0=_ta_;
                                          for(;;)
                                           {var
                                             sprite=_tv_[1 + i$0],
                                             _tw_=sprite[1] <= ly?1:0,
                                             _tx_=
                                              _tw_
                                               ?ly <= ((sprite[1] + y_sprite_size | 0) - 1 | 0)?1:0
                                               :_tw_;
                                            if(_tx_)
                                             {var
                                               row$0=ly - sprite[1] | 0,
                                               pallete=879375796 <= sprite[7]?gpu[6]:gpu[5],
                                               col=0;
                                              for(;;)
                                               {var lx$1=sprite[2] + col | 0,switch$5=0;
                                                if(0 <= lx$1 && ! (160 <= lx$1))
                                                 {var
                                                   _tz_=sprite[6]?7 - col | 0:col,
                                                   _tA_=sprite[5]?(y_sprite_size - row$0 | 0) - 1 | 0:row$0,
                                                   row=get_row_pixels(gpu[1],0,sprite[3],_tA_),
                                                   color_id=caml_check_bound(row,_tz_)[1 + _tz_];
                                                  if(color_id)
                                                   {var
                                                     match$0=sprite[4],
                                                     match$1=
                                                      caml_check_bound(caml_check_bound(gpu[13],ly)[1 + ly],lx$1)
                                                       [1 + lx$1],
                                                     switch$6=0;
                                                    if(486156037 <= match$0)
                                                     {var switch$7=0;
                                                      if
                                                       (-937474657
                                                        !==
                                                        match$1
                                                        &&
                                                        -603547828
                                                        !==
                                                        match$1
                                                        &&
                                                        -126317716
                                                        !==
                                                        match$1)
                                                       switch$7 = 1;
                                                      if(! switch$7)switch$6 = 1}
                                                    if(! switch$6)
                                                     {var color$1=lookup(pallete,color_id);
                                                      caml_check_bound(caml_check_bound(gpu[13],ly)[1 + ly],lx$1)
                                                       [1 + lx$1]
                                                      =
                                                      color$1}}
                                                  switch$5 = 1}
                                                var _ty_=col + 1 | 0;
                                                if(7 !== col){var col=_ty_;continue}
                                                break}}
                                            var _tc_=i$0 + 1 | 0;
                                            if(_tb_ !== i$0){var i$0=_tc_;continue}
                                            break}}}}
                                    var match$5=0;
                                    break;
                                   case 2:
                                    if(51 <= gpu[11])
                                     {gpu[11] = gpu[11] % 51 | 0;
                                      var ly$0=incr_ly(gpu);
                                      handle_ly_eq_lyc(gpu);
                                      if(ly$0 === 144)
                                       {set_gpu_mode(gpu[7],3);
                                        if(is_enabled(gpu[7],2))request(gpu[10],1);
                                        request(gpu[10],0)}
                                      else
                                       {set_gpu_mode(gpu[7],0);
                                        if(is_enabled(gpu[7],1))request(gpu[10],1)}}
                                    var match$5=0;
                                    break;
                                   default:
                                    if(gpu[11] < 114)
                                     var match$5=0;
                                    else
                                     {gpu[11] = gpu[11] % 114 | 0;
                                      var ly$1=incr_ly(gpu);
                                      handle_ly_eq_lyc(gpu);
                                      if(154 <= ly$1)
                                       {reset_ly(gpu[9]);
                                        handle_ly_eq_lyc(gpu);
                                        set_gpu_mode(gpu[7],0);
                                        if(is_enabled(gpu[7],1))request(gpu[10],1);
                                        var match$5=[0,gpu[13]]}
                                      else
                                       var match$5=0}}
                                 break;
                                case 1:var match$5=0;break;
                                default:
                                 gpu[11] = gpu[11] + mcycles$0 | 0;
                                 if(51 <= gpu[11])
                                  {gpu[11] = gpu[11] % 51 | 0;
                                   gpu[12] = 0;
                                   handle_ly_eq_lyc(gpu);
                                   set_gpu_mode(gpu[7],0);
                                   if(is_enabled(gpu[7],1))request(gpu[10],1)}
                                 var match$5=0}
                              if(match$5)frame_count[1]++;
                              continue}
                            return performance.now() - _uq_}}}
                      var e=result[1];
                      log([0,e.message,0]);
                      return 0.},
                   _s8_=blob.arrayBuffer();
                  return let$0
                          (of_promise(function(_s__){return _s__},_s8_),_s9_)}
                var e=result[1];
                log([0,e.message,0]);
                return return$0(0.)},
             _s5_=response.blob();
            return bind(of_promise(function(_s7_){return _s7_},_s5_),_s6_)}
          var e=result[1];
          log([0,e.message,0]);
          return return$0(0.)},
       url$0=caml_jsstring_of_string(rom_path),
       init={},
       _bO_=fetch(url$0,init),
       f=let$0(bind(of_promise(function(_s4_){return _s4_},_bO_),_sT_),_sY_),
       p=f.fut;
      p.then(k);
      do_at_exit(0);
      return}}
  (function(){return this}()));
