// Generated by js_of_ocaml 3.11.0+git-75b46cb
(function(joo_global_object)
   {"use strict";
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_kind_of_typed_array(ta)
     {var g=joo_global_object,kind;
      if(ta instanceof g.Float32Array)
       kind = 0;
      else
       if(ta instanceof g.Float64Array)
        kind = 1;
       else
        if(ta instanceof g.Int8Array)
         kind = 2;
        else
         if(ta instanceof g.Uint8Array)
          kind = 3;
         else
          if(ta instanceof g.Int16Array)
           kind = 4;
          else
           if(ta instanceof g.Uint16Array)
            kind = 5;
           else
            if(ta instanceof g.Int32Array)
             kind = 6;
            else
             if(ta instanceof g.Uint32Array)
              kind = 6;
             else
              caml_invalid_argument
               ("caml_ba_kind_of_typed_array: unsupported kind");
      return kind}
    function caml_ba_from_typed_array(ta)
     {var kind=caml_ba_kind_of_typed_array(ta);
      return caml_ba_create_unsafe(kind,0,[ta.length],ta)}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_ba_set_1(ba,i0,v){ba.set(ba.offset(i0),v);return 0}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    function make_path_is_absolute()
     {function posix(path)
       {if(path.charAt(0) === "/")return ["",path.substring(1)];return}
      function win32(path)
       {var
         splitDeviceRe=
          /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
         result=splitDeviceRe.exec(path),
         device=result[1] || "",
         isUnc=Boolean(device && device.charAt(1) !== ":");
        if(Boolean(result[2] || isUnc))
         {var root=result[1] || "",sep=result[2] || "";
          return [root,path.substring(root.length + sep.length)]}
        return}
      return joo_global_object.process && joo_global_object.process.platform
              ?joo_global_object.process.platform === "win32"?win32:posix
              :posix}
    var path_is_absolute=make_path_is_absolute();
    function caml_trailing_slash(name)
     {return name.slice(- 1) !== "/"?name + "/":name}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    caml_current_dir = caml_trailing_slash(caml_current_dir);
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(! path_is_absolute(name))name = caml_current_dir + name;
      var comp0=path_is_absolute(name),comp=comp0[1].split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         default:ncomp.push(comp[i]);break}
      ncomp.unshift(comp0[0]);
      ncomp.orig = name;
      return ncomp}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    var
     unix_error=
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    function make_unix_err_args(code,syscall,path,errno)
     {var variant=unix_error.indexOf(code);
      if(variant < 0){if(errno == null)errno = - 9999;variant = [0,errno]}
      var
       args=
        [variant,
         caml_string_of_jsstring(syscall || ""),
         caml_string_of_jsstring(path || "")];
      return args}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_raise_with_args(tag,args){throw [0,tag].concat(args)}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.create_dir_if_needed
    =
    function(name)
     {var comp=name.split("/"),res="";
      for(var i=0;i < comp.length - 1;i++)
       {res += comp[i] + "/";
        if(this.content[res])continue;
        this.content[res] = Symbol("directory")}};
    MlFakeDevice.prototype.slash
    =
    function(name){return /\/$/.test(name)?name:name + "/"};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         {this.create_dir_if_needed(name);
          this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=this.slash(name);
      if(this.content[name_slash])return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {var unix_error=raise_unix && caml_named_value("Unix.Unix_error");
      if(this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("EEXIST","mkdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": File exists");
      var parent=/^(.*)\/[^/]+/.exec(name);
      parent = parent && parent[1] || "";
      if(! this.exists(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": No such file or directory");
      if(! this.is_dir(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": Not a directory");
      this.create_dir_if_needed(this.slash(name))};
    MlFakeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       name_slash=name == ""?"":this.slash(name),
       r=new RegExp("^" + name_slash + "([^/]+)");
      if(! this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": Not a directory");
      for(var n in this.content)
       if(n.match(r))
        if(unix_error)
         caml_raise_with_args
          (unix_error,make_unix_err_args("ENOTEMPTY","rmdir",this.nm(name)));
        else
         caml_raise_sys_error(this.nm(name) + ": Directory not empty");
      delete this.content[name_slash]};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var name_slash=name == ""?"":this.slash(name);
      if(! this.exists(name))
       caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))caml_raise_sys_error(name + ": Not a directory");
      var r=new RegExp("^" + name_slash + "([^/]+)"),seen={},a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {if(name == "")return true;
      var name_slash=this.slash(name);
      return this.content[name_slash]?1:0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {var file;
      if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))file = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       file = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        file = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         file = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           file = new MlFakeFile(bytes)}
      if(file)
       {this.create_dir_if_needed(name);this.content[name] = file}
      else
       caml_raise_sys_error
        (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try {return this.fs.existsSync(this.nm(name))?1:0}catch(err){return 0}};
    MlNodeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {try
       {this.fs.mkdirSync(this.nm(name),{mode:mode});return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {try
       {this.fs.rmdirSync(this.nm(name));return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readdir
    =
    function(name,raise_unix)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name,raise_unix)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name));
        return b}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.open
    =
    function(name,f,raise_unix)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rename
    =
    function(o,n,raise_unix)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.stat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.statSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.lstat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.lstatSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.symlink
    =
    function(to_dir,target,path,raise_unix)
     {try
       {this.fs.symlinkSync(this.nm(target),this.nm(path),to_dir?"dir":"file");
        return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readlink
    =
    function(name,raise_unix)
     {try
       {var link=this.fs.readlinkSync(this.nm(name),"utf8");
        return caml_string_of_jsstring(link)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.raise_nodejs_error
    =
    function(err,raise_unix)
     {var unix_error=caml_named_value("Unix.Unix_error");
      if(raise_unix && unix_error)
       {var args=make_unix_err_args(err.code,err.syscall,err.path,err.errno);
        caml_raise_with_args(unix_error,args)}
      else
       caml_raise_sys_error(err.toString())};
    MlNodeDevice.prototype.stats_from_js
    =
    function(js_stats)
     {var file_kind;
      if(js_stats.isFile())
       file_kind = 0;
      else
       if(js_stats.isDirectory())
        file_kind = 1;
       else
        if(js_stats.isCharacterDevice())
         file_kind = 2;
        else
         if(js_stats.isBlockDevice())
          file_kind = 3;
         else
          if(js_stats.isSymbolicLink())
           file_kind = 4;
          else
           if(js_stats.isFIFO())
            file_kind = 5;
           else
            if(js_stats.isSocket())file_kind = 6;
      return [0,
              js_stats.dev,
              js_stats.ino,
              file_kind,
              js_stats.mode,
              js_stats.nlink,
              js_stats.uid,
              js_stats.gid,
              js_stats.rdev,
              js_stats.size,
              js_stats.atimeMs,
              js_stats.mtimeMs,
              js_stats.ctimeMs]};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    function caml_get_root(path)
     {var x=path_is_absolute(path);if(! x)return;return x[0] + "/"}
    var
     caml_root=
      caml_get_root(caml_current_dir)
      ||
      caml_failwith("unable to compute caml_root");
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=caml_trailing_slash(name),
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      if(! res)
       {var root=caml_get_root(name);
        if(root && root.match(/^[a-zA-Z]:\/$/))
         {var m={path:root,device:new MlNodeDevice(root)};
          jsoo_mount_point.push(m);
          res
          =
          {path:m.path,
           device:m.device,
           rest:name.substring(m.path.length,name.length)}}}
      if(res)return res;
      caml_raise_sys_error("no device found for " + name_slash)}
    function caml_create_file(name,content)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       content=
        typeof content == "string"?caml_string_of_jsbytes(content):content,
       root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_gc_major(){return 0}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_meth_call(o,f,args)
     {return o[caml_jsstring_of_string(f)].apply(o,caml_js_from_array(args))}
    function caml_js_new(c,a)
     {switch(a.length)
       {case 1:return new c();
        case 2:return new c(a[1]);
        case 3:return new c(a[1],a[2]);
        case 4:return new c(a[1],a[2],a[3]);
        case 5:return new c(a[1],a[2],a[3],a[4]);
        case 6:return new c(a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return new c(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      function F(){return c.apply(this,caml_js_from_array(a))}
      F.prototype = c.prototype;
      return new F()}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_ml_debug_info_status(){return 0}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var refill=null;
      if(fd == 0 && fs_node_supported())
       {var fs=require("fs");
        refill
        =
        function(){return caml_string_of_jsstring(fs.readFileSync(0,"utf8"))}}
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:refill};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_sys_const_naked_pointers_checked(_unit){return 0}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_is_special_exception(exn)
     {switch(exn[2]){case - 8:case - 11:case - 12:return 1;default:return 0}}
    function caml_format_exception(exn)
     {var r="";
      if(exn[0] == 0)
       {r += exn[1][1];
        if
         (exn.length
          ==
          3
          &&
          exn[2][0]
          ==
          0
          &&
          caml_is_special_exception(exn[1]))
         var bucket=exn[2],start=1;
        else
         var start=2,bucket=exn;
        r += "(";
        for(var i=start;i < bucket.length;i++)
         {if(i > start)r += ", ";
          var v=bucket[i];
          if(typeof v == "number")
           r += v.toString();
          else
           if(v instanceof MlBytes)
            r += '"' + v.toString() + '"';
           else
            if(typeof v == "string")
             r += '"' + v.toString() + '"';
            else
             r += "_"}
        r += ")"}
      else
       if(exn[0] == 248)r += exn[1];
      return r}
    function caml_fatal_uncaught_exception(err)
     {if(err instanceof Array && (err[0] == 0 || err[0] == 248))
       {var handler=caml_named_value("Printexc.handle_uncaught_exception");
        if(handler)
         handler(err,false);
        else
         {var
           msg=caml_format_exception(err),
           at_exit=caml_named_value("Pervasives.do_at_exit");
          if(at_exit)at_exit(0);
          joo_global_object.console.error
           ("Fatal error: exception " + msg + "\n")}}
      else
       throw err}
    function caml_setup_uncaught_exception_handler()
     {var g=joo_global_object;
      if(g.process && g.process.on)
       g.process.on
        ("uncaughtException",
         function(err,origin)
          {caml_fatal_uncaught_exception(err);g.process.exit(2)});
      else
       if(g.addEventListener)
        g.addEventListener
         ("error",
          function(event)
           {if(event.error)caml_fatal_uncaught_exception(event.error)})}
    caml_setup_uncaught_exception_handler();
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {return f.length == 10
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     partial$0=
      [8,
       [0,0,0],
       0,
       0,
       [12,
        10,
        [2,
         [0,1,8],
         [11,caml_string_of_jsbytes(": "),[8,[0,0,0],0,0,[12,10,0]]]]]];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _d_=caml_string_of_jsbytes("%.12g"),
     _c_=caml_string_of_jsbytes("."),
     _a_=caml_string_of_jsbytes("true"),
     _b_=caml_string_of_jsbytes("false"),
     _g_=caml_string_of_jsbytes("option is None"),
     _i_=caml_string_of_jsbytes("\\\\"),
     _j_=caml_string_of_jsbytes("\\'"),
     _k_=caml_string_of_jsbytes("\\b"),
     _l_=caml_string_of_jsbytes("\\t"),
     _m_=caml_string_of_jsbytes("\\n"),
     _n_=caml_string_of_jsbytes("\\r"),
     _q_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _p_=caml_string_of_jsbytes("Bytes.blit"),
     _o_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _r_=caml_string_of_jsbytes("Array.init"),
     _u_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _t_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _s_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _D_=caml_string_of_jsbytes("%c"),
     _E_=caml_string_of_jsbytes("%s"),
     _F_=caml_string_of_jsbytes("%i"),
     _G_=caml_string_of_jsbytes("%li"),
     _H_=caml_string_of_jsbytes("%ni"),
     _I_=caml_string_of_jsbytes("%Li"),
     _J_=caml_string_of_jsbytes("%f"),
     _K_=caml_string_of_jsbytes("%B"),
     _L_=caml_string_of_jsbytes("%{"),
     _M_=caml_string_of_jsbytes("%}"),
     _N_=caml_string_of_jsbytes("%("),
     _O_=caml_string_of_jsbytes("%)"),
     _P_=caml_string_of_jsbytes("%a"),
     _Q_=caml_string_of_jsbytes("%t"),
     _R_=caml_string_of_jsbytes("%?"),
     _S_=caml_string_of_jsbytes("%r"),
     _T_=caml_string_of_jsbytes("%_r"),
     _U_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _X_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _Y_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _Z_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     ___=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _V_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _W_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _be_=caml_string_of_jsbytes("%u"),
     _bc_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _bd_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bf_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bg_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _bh_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bi_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bj_=caml_string_of_jsbytes("@{"),
     _bk_=caml_string_of_jsbytes("@["),
     _bl_=caml_string_of_jsbytes("@{"),
     _bm_=caml_string_of_jsbytes("@["),
     _bb_=caml_string_of_jsbytes("nan"),
     _a$_=caml_string_of_jsbytes("neg_infinity"),
     _ba_=caml_string_of_jsbytes("infinity"),
     _a__=caml_string_of_jsbytes("."),
     _a9_=[0,103],
     _aX_=caml_string_of_jsbytes("%+nd"),
     _aY_=caml_string_of_jsbytes("% nd"),
     _a0_=caml_string_of_jsbytes("%+ni"),
     _a1_=caml_string_of_jsbytes("% ni"),
     _a2_=caml_string_of_jsbytes("%nx"),
     _a3_=caml_string_of_jsbytes("%#nx"),
     _a4_=caml_string_of_jsbytes("%nX"),
     _a5_=caml_string_of_jsbytes("%#nX"),
     _a6_=caml_string_of_jsbytes("%no"),
     _a7_=caml_string_of_jsbytes("%#no"),
     _aW_=caml_string_of_jsbytes("%nd"),
     _aZ_=caml_string_of_jsbytes("%ni"),
     _a8_=caml_string_of_jsbytes("%nu"),
     _aK_=caml_string_of_jsbytes("%+ld"),
     _aL_=caml_string_of_jsbytes("% ld"),
     _aN_=caml_string_of_jsbytes("%+li"),
     _aO_=caml_string_of_jsbytes("% li"),
     _aP_=caml_string_of_jsbytes("%lx"),
     _aQ_=caml_string_of_jsbytes("%#lx"),
     _aR_=caml_string_of_jsbytes("%lX"),
     _aS_=caml_string_of_jsbytes("%#lX"),
     _aT_=caml_string_of_jsbytes("%lo"),
     _aU_=caml_string_of_jsbytes("%#lo"),
     _aJ_=caml_string_of_jsbytes("%ld"),
     _aM_=caml_string_of_jsbytes("%li"),
     _aV_=caml_string_of_jsbytes("%lu"),
     _ax_=caml_string_of_jsbytes("%+Ld"),
     _ay_=caml_string_of_jsbytes("% Ld"),
     _aA_=caml_string_of_jsbytes("%+Li"),
     _aB_=caml_string_of_jsbytes("% Li"),
     _aC_=caml_string_of_jsbytes("%Lx"),
     _aD_=caml_string_of_jsbytes("%#Lx"),
     _aE_=caml_string_of_jsbytes("%LX"),
     _aF_=caml_string_of_jsbytes("%#LX"),
     _aG_=caml_string_of_jsbytes("%Lo"),
     _aH_=caml_string_of_jsbytes("%#Lo"),
     _aw_=caml_string_of_jsbytes("%Ld"),
     _az_=caml_string_of_jsbytes("%Li"),
     _aI_=caml_string_of_jsbytes("%Lu"),
     _ak_=caml_string_of_jsbytes("%+d"),
     _al_=caml_string_of_jsbytes("% d"),
     _an_=caml_string_of_jsbytes("%+i"),
     _ao_=caml_string_of_jsbytes("% i"),
     _ap_=caml_string_of_jsbytes("%x"),
     _aq_=caml_string_of_jsbytes("%#x"),
     _ar_=caml_string_of_jsbytes("%X"),
     _as_=caml_string_of_jsbytes("%#X"),
     _at_=caml_string_of_jsbytes("%o"),
     _au_=caml_string_of_jsbytes("%#o"),
     _aj_=caml_string_of_jsbytes("%d"),
     _am_=caml_string_of_jsbytes("%i"),
     _av_=caml_string_of_jsbytes("%u"),
     _v_=caml_string_of_jsbytes("@]"),
     _w_=caml_string_of_jsbytes("@}"),
     _x_=caml_string_of_jsbytes("@?"),
     _y_=caml_string_of_jsbytes("@\n"),
     _z_=caml_string_of_jsbytes("@."),
     _A_=caml_string_of_jsbytes("@@"),
     _B_=caml_string_of_jsbytes("@%"),
     _C_=caml_string_of_jsbytes("@"),
     _ai_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _bq_=caml_string_of_jsbytes(""),
     _br_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bO_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bP_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Fatal error in uncaught exception handler: exception "),
        [2,0,[12,10,0]]],
       caml_string_of_jsbytes
        ("Fatal error in uncaught exception handler: exception %s\n")],
     _bN_=
      caml_string_of_jsbytes
       ("Fatal error: out of memory in uncaught exception handler"),
     _bM_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bJ_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bK_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bB_=caml_string_of_jsbytes("Raised at"),
     _bC_=caml_string_of_jsbytes("Re-raised at"),
     _bD_=caml_string_of_jsbytes("Raised by primitive operation at"),
     _bE_=caml_string_of_jsbytes("Called from"),
     _bF_=caml_string_of_jsbytes(" (inlined)"),
     _bH_=caml_string_of_jsbytes(""),
     _bG_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _bI_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _bw_=caml_string_of_jsbytes("Out of memory"),
     _bx_=caml_string_of_jsbytes("Stack overflow"),
     _by_=caml_string_of_jsbytes("Pattern matching failed"),
     _bz_=caml_string_of_jsbytes("Assertion failed"),
     _bA_=caml_string_of_jsbytes("Undefined recursive module"),
     _bs_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bt_=caml_string_of_jsbytes(""),
     _bu_=caml_string_of_jsbytes(""),
     _bv_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bp_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bn_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bo_=caml_string_of_jsbytes("_"),
     _bL_=
      [0,
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file not found)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],
     _bR_=caml_string_of_jsbytes("Fun.Finally_raised: "),
     _bQ_=caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     _bS_=caml_string_of_jsbytes("slice"),
     _bU_=caml_string_of_jsbytes("jsError"),
     _bT_=caml_string_of_jsbytes("Jv.Error"),
     _bY_=caml_string_of_jsbytes("log"),
     _bV_=[0,1],
     _bZ_=[0,[12,36,[4,8,[0,2,2],0,0]],caml_string_of_jsbytes("$%02X")],
     _b0_=[0,[12,36,[4,8,[0,2,4],0,0]],caml_string_of_jsbytes("$%04X")],
     _b9_=
      [0,
       caml_string_of_jsbytes
        ("lib/interrupt_controller/interrupt_controller.ml"),
       107,
       4],
     _b8_=
      [0,
       caml_string_of_jsbytes
        ("lib/interrupt_controller/interrupt_controller.ml"),
       77,
       4],
     _b3_=[0,0],
     _b4_=[0,1],
     _b5_=[0,2],
     _b6_=[0,3],
     _b7_=[0,4],
     _b$_=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),92,11],
     _ca_=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),106,9],
     _b__=[0,caml_string_of_jsbytes("lib/timer/timer.ml"),82,9],
     _cc_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _cb_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _cd_=[0,0,1,2,3,4,5,6,7],
     _cf_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _ce_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _cj_=caml_string_of_jsbytes("cannot write"),
     _ci_=caml_string_of_jsbytes("invalid addr"),
     _ch_=caml_string_of_jsbytes("cannot read"),
     _cg_=caml_string_of_jsbytes("invalid addr"),
     _cl_=[0,[0,0],caml_string_of_jsbytes("%c")],
     _cm_=caml_string_of_jsbytes("invalid addr"),
     _ck_=caml_string_of_jsbytes("invalid addr"),
     _cn_=caml_string_of_jsbytes("Address out of bounds"),
     _cq_=
      [0,
       [11,
        caml_string_of_jsbytes("A:"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" F:"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes(" BC:"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" DE:"),
              [2,0,[11,caml_string_of_jsbytes(" HL:"),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes("A:%s F:%s BC:%s DE:%s HL:%s")],
     _cp_=[0,[0,[0,[0,[0,0]]]],caml_string_of_jsbytes("%c%c%c%c")],
     _cs_=[0,caml_string_of_jsbytes("lib/gpu/pallete.ml"),53,14],
     _ct_=caml_string_of_jsbytes("Address out of bounds"),
     _cr_=caml_string_of_jsbytes("Address out of bounds"),
     _cv_=[0,caml_string_of_jsbytes("lib/gpu/oam_table.ml"),89,9],
     _cu_=[0,caml_string_of_jsbytes("lib/gpu/oam_table.ml"),67,9],
     _cw_=
      [0,
       [11,caml_string_of_jsbytes("Unknown rom type : 0x"),[4,6,0,0,0]],
       caml_string_of_jsbytes("Unknown rom type : 0x%x")],
     _cx_=
      [0,caml_string_of_jsbytes("lib/cartridge/cartridge_header.ml"),33,11],
     _cy_=
      [0,caml_string_of_jsbytes("lib/cartridge/cartridge_header.ml"),43,11],
     _cE_=[0,caml_string_of_jsbytes("lib/cartridge/mbc1.ml"),114,9],
     _cD_=
      [0,
       [11,caml_string_of_jsbytes("Unexpected rom size: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Unexpected rom size: %d")],
     _cC_=[0,caml_string_of_jsbytes("lib/cartridge/mbc1.ml"),84,9],
     _cB_=
      [0,
       [11,caml_string_of_jsbytes("Unexpected ram size: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Unexpected ram size: %d")],
     _cA_=[0,caml_string_of_jsbytes("lib/cartridge/mbc1.ml"),51,9],
     _cz_=[0,caml_string_of_jsbytes("lib/cartridge/mbc1.ml"),39,13],
     _cH_=caml_string_of_jsbytes("Address out of bounds"),
     _cG_=caml_string_of_jsbytes("Address out of bounds"),
     _cI_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _cK_=caml_string_of_jsbytes("Address out of bounds"),
     _cJ_=caml_string_of_jsbytes("Address out of bounds"),
     _cM_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _cL_=
      [0,
       [11,caml_string_of_jsbytes("Address out of range: "),[2,0,0]],
       caml_string_of_jsbytes("Address out of range: %s")],
     _cN_=
      [0,
       [11,
        caml_string_of_jsbytes("Unrecognized opcode: 0x"),
        [4,6,[0,2,2],0,0]],
       caml_string_of_jsbytes("Unrecognized opcode: 0x%02x")],
     _cO_=[0,1,1],
     _cP_=[5,1],
     _cQ_=[0,3,3],
     _cR_=[0,[6,1],[4,0]],
     _cS_=[0,2,2],
     _cT_=[13,[5,1]],
     _cU_=[0,2,2],
     _cV_=[12,[4,1]],
     _cW_=[0,1,1],
     _cX_=[14,[4,1]],
     _cY_=[0,1,1],
     _cZ_=[4,1],
     _c0_=[0,2,2],
     _c1_=[0,1,1],
     _c2_=[0,5,5],
     _c3_=[3,[5,3],[5,1]],
     _c4_=[0,2,2],
     _c5_=[0,[4,0],[6,1]],
     _c6_=[0,2,2],
     _c7_=[15,[5,1]],
     _c8_=[0,2,2],
     _c9_=[12,[4,2]],
     _c__=[0,1,1],
     _c$_=[14,[4,2]],
     _da_=[0,1,1],
     _db_=[4,2],
     _dc_=[0,2,2],
     _dd_=[0,1,1],
     _de_=[0,1,1],
     _df_=[5,2],
     _dg_=[0,3,3],
     _dh_=[0,[6,2],[4,0]],
     _di_=[0,2,2],
     _dj_=[13,[5,2]],
     _dk_=[0,2,2],
     _dl_=[12,[4,3]],
     _dm_=[0,1,1],
     _dn_=[14,[4,3]],
     _do_=[0,1,1],
     _dp_=[4,3],
     _dq_=[0,2,2],
     _dr_=[0,1,1],
     _ds_=[0,3,3],
     _dt_=[3,[5,3],[5,2]],
     _du_=[0,2,2],
     _dv_=[0,[4,0],[6,2]],
     _dw_=[0,2,2],
     _dx_=[15,[5,2]],
     _dy_=[0,2,2],
     _dz_=[12,[4,4]],
     _dA_=[0,1,1],
     _dB_=[14,[4,4]],
     _dC_=[0,1,1],
     _dD_=[4,4],
     _dE_=[0,2,2],
     _dF_=[0,1,1],
     _dG_=[0,2,3],
     _dH_=[5,3],
     _dI_=[0,3,3],
     _dJ_=[0,1,[4,0]],
     _dK_=[0,2,2],
     _dL_=[13,[5,3]],
     _dM_=[0,2,2],
     _dN_=[12,[4,6]],
     _dO_=[0,1,1],
     _dP_=[14,[4,6]],
     _dQ_=[0,1,1],
     _dR_=[4,6],
     _dS_=[0,2,2],
     _dT_=[0,1,1],
     _dU_=[0,2,3],
     _dV_=[3,[5,3],[5,3]],
     _dW_=[0,2,2],
     _dX_=[0,[4,0],1],
     _dY_=[0,2,2],
     _dZ_=[15,[5,3]],
     _d0_=[0,2,2],
     _d1_=[12,[4,7]],
     _d2_=[0,1,1],
     _d3_=[14,[4,7]],
     _d4_=[0,1,1],
     _d5_=[4,7],
     _d6_=[0,2,2],
     _d7_=[0,1,1],
     _d8_=[0,2,3],
     _d9_=[0,3,3],
     _d__=[0,2,[4,0]],
     _d$_=[0,2,2],
     _ea_=[13,3],
     _eb_=[0,2,2],
     _ec_=[12,[6,3]],
     _ed_=[0,3,3],
     _ee_=[14,[6,3]],
     _ef_=[0,3,3],
     _eg_=[6,3],
     _eh_=[0,3,3],
     _ei_=[0,1,1],
     _ej_=[0,2,3],
     _ek_=[3,[5,3],3],
     _el_=[0,2,2],
     _em_=[0,[4,0],2],
     _en_=[0,2,2],
     _eo_=[15,3],
     _ep_=[0,2,2],
     _eq_=[12,[4,0]],
     _er_=[0,1,1],
     _es_=[14,[4,0]],
     _et_=[0,1,1],
     _eu_=[4,0],
     _ev_=[0,2,2],
     _ew_=[0,1,1],
     _ex_=[0,[4,1],[4,1]],
     _ey_=[0,1,1],
     _ez_=[0,[4,1],[4,2]],
     _eA_=[0,1,1],
     _eB_=[0,[4,1],[4,3]],
     _eC_=[0,1,1],
     _eD_=[0,[4,1],[4,4]],
     _eE_=[0,1,1],
     _eF_=[0,[4,1],[4,6]],
     _eG_=[0,1,1],
     _eH_=[0,[4,1],[4,7]],
     _eI_=[0,1,1],
     _eJ_=[0,[4,1],[6,3]],
     _eK_=[0,2,2],
     _eL_=[0,[4,1],[4,0]],
     _eM_=[0,1,1],
     _eN_=[0,[4,2],[4,1]],
     _eO_=[0,1,1],
     _eP_=[0,[4,2],[4,2]],
     _eQ_=[0,1,1],
     _eR_=[0,[4,2],[4,3]],
     _eS_=[0,1,1],
     _eT_=[0,[4,2],[4,4]],
     _eU_=[0,1,1],
     _eV_=[0,[4,2],[4,6]],
     _eW_=[0,1,1],
     _eX_=[0,[4,2],[4,7]],
     _eY_=[0,1,1],
     _eZ_=[0,[4,2],[6,3]],
     _e0_=[0,2,2],
     _e1_=[0,[4,2],[4,0]],
     _e2_=[0,1,1],
     _e3_=[0,[4,3],[4,1]],
     _e4_=[0,1,1],
     _e5_=[0,[4,3],[4,2]],
     _e6_=[0,1,1],
     _e7_=[0,[4,3],[4,3]],
     _e8_=[0,1,1],
     _e9_=[0,[4,3],[4,4]],
     _e__=[0,1,1],
     _e$_=[0,[4,3],[4,6]],
     _fa_=[0,1,1],
     _fb_=[0,[4,3],[4,7]],
     _fc_=[0,1,1],
     _fd_=[0,[4,3],[6,3]],
     _fe_=[0,2,2],
     _ff_=[0,[4,3],[4,0]],
     _fg_=[0,1,1],
     _fh_=[0,[4,4],[4,1]],
     _fi_=[0,1,1],
     _fj_=[0,[4,4],[4,2]],
     _fk_=[0,1,1],
     _fl_=[0,[4,4],[4,3]],
     _fm_=[0,1,1],
     _fn_=[0,[4,4],[4,4]],
     _fo_=[0,1,1],
     _fp_=[0,[4,4],[4,6]],
     _fq_=[0,1,1],
     _fr_=[0,[4,4],[4,7]],
     _fs_=[0,1,1],
     _ft_=[0,[4,4],[6,3]],
     _fu_=[0,2,2],
     _fv_=[0,[4,4],[4,0]],
     _fw_=[0,1,1],
     _fx_=[0,[4,6],[4,1]],
     _fy_=[0,1,1],
     _fz_=[0,[4,6],[4,2]],
     _fA_=[0,1,1],
     _fB_=[0,[4,6],[4,3]],
     _fC_=[0,1,1],
     _fD_=[0,[4,6],[4,4]],
     _fE_=[0,1,1],
     _fF_=[0,[4,6],[4,6]],
     _fG_=[0,1,1],
     _fH_=[0,[4,6],[4,7]],
     _fI_=[0,1,1],
     _fJ_=[0,[4,6],[6,3]],
     _fK_=[0,2,2],
     _fL_=[0,[4,6],[4,0]],
     _fM_=[0,1,1],
     _fN_=[0,[4,7],[4,1]],
     _fO_=[0,1,1],
     _fP_=[0,[4,7],[4,2]],
     _fQ_=[0,1,1],
     _fR_=[0,[4,7],[4,3]],
     _fS_=[0,1,1],
     _fT_=[0,[4,7],[4,4]],
     _fU_=[0,1,1],
     _fV_=[0,[4,7],[4,6]],
     _fW_=[0,1,1],
     _fX_=[0,[4,7],[4,7]],
     _fY_=[0,1,1],
     _fZ_=[0,[4,7],[6,3]],
     _f0_=[0,2,2],
     _f1_=[0,[4,7],[4,0]],
     _f2_=[0,1,1],
     _f3_=[0,[6,3],[4,1]],
     _f4_=[0,2,2],
     _f5_=[0,[6,3],[4,2]],
     _f6_=[0,2,2],
     _f7_=[0,[6,3],[4,3]],
     _f8_=[0,2,2],
     _f9_=[0,[6,3],[4,4]],
     _f__=[0,2,2],
     _f$_=[0,[6,3],[4,6]],
     _ga_=[0,2,2],
     _gb_=[0,[6,3],[4,7]],
     _gc_=[0,2,2],
     _gd_=[0,1,1],
     _ge_=[0,[6,3],[4,0]],
     _gf_=[0,2,2],
     _gg_=[0,[4,0],[4,1]],
     _gh_=[0,1,1],
     _gi_=[0,[4,0],[4,2]],
     _gj_=[0,1,1],
     _gk_=[0,[4,0],[4,3]],
     _gl_=[0,1,1],
     _gm_=[0,[4,0],[4,4]],
     _gn_=[0,1,1],
     _go_=[0,[4,0],[4,6]],
     _gp_=[0,1,1],
     _gq_=[0,[4,0],[4,7]],
     _gr_=[0,1,1],
     _gs_=[0,[4,0],[6,3]],
     _gt_=[0,2,2],
     _gu_=[0,[4,0],[4,0]],
     _gv_=[0,1,1],
     _gw_=[2,[4,0],[4,1]],
     _gx_=[0,1,1],
     _gy_=[2,[4,0],[4,2]],
     _gz_=[0,1,1],
     _gA_=[2,[4,0],[4,3]],
     _gB_=[0,1,1],
     _gC_=[2,[4,0],[4,4]],
     _gD_=[0,1,1],
     _gE_=[2,[4,0],[4,6]],
     _gF_=[0,1,1],
     _gG_=[2,[4,0],[4,7]],
     _gH_=[0,1,1],
     _gI_=[2,[4,0],[6,3]],
     _gJ_=[0,2,2],
     _gK_=[2,[4,0],[4,0]],
     _gL_=[0,1,1],
     _gM_=[5,[4,0],[4,1]],
     _gN_=[0,1,1],
     _gO_=[5,[4,0],[4,2]],
     _gP_=[0,1,1],
     _gQ_=[5,[4,0],[4,3]],
     _gR_=[0,1,1],
     _gS_=[5,[4,0],[4,4]],
     _gT_=[0,1,1],
     _gU_=[5,[4,0],[4,6]],
     _gV_=[0,1,1],
     _gW_=[5,[4,0],[4,7]],
     _gX_=[0,1,1],
     _gY_=[5,[4,0],[6,3]],
     _gZ_=[0,2,2],
     _g0_=[5,[4,0],[4,0]],
     _g1_=[0,1,1],
     _g2_=[6,[4,0],[4,1]],
     _g3_=[0,1,1],
     _g4_=[6,[4,0],[4,2]],
     _g5_=[0,1,1],
     _g6_=[6,[4,0],[4,3]],
     _g7_=[0,1,1],
     _g8_=[6,[4,0],[4,4]],
     _g9_=[0,1,1],
     _g__=[6,[4,0],[4,6]],
     _g$_=[0,1,1],
     _ha_=[6,[4,0],[4,7]],
     _hb_=[0,1,1],
     _hc_=[6,[4,0],[6,3]],
     _hd_=[0,2,2],
     _he_=[6,[4,0],[4,0]],
     _hf_=[0,1,1],
     _hg_=[7,[4,0],[4,1]],
     _hh_=[0,1,1],
     _hi_=[7,[4,0],[4,2]],
     _hj_=[0,1,1],
     _hk_=[7,[4,0],[4,3]],
     _hl_=[0,1,1],
     _hm_=[7,[4,0],[4,4]],
     _hn_=[0,1,1],
     _ho_=[7,[4,0],[4,6]],
     _hp_=[0,1,1],
     _hq_=[7,[4,0],[4,7]],
     _hr_=[0,1,1],
     _hs_=[7,[4,0],[6,3]],
     _ht_=[0,2,2],
     _hu_=[7,[4,0],[4,0]],
     _hv_=[0,1,1],
     _hw_=[8,[4,0],[4,1]],
     _hx_=[0,1,1],
     _hy_=[8,[4,0],[4,2]],
     _hz_=[0,1,1],
     _hA_=[8,[4,0],[4,3]],
     _hB_=[0,1,1],
     _hC_=[8,[4,0],[4,4]],
     _hD_=[0,1,1],
     _hE_=[8,[4,0],[4,6]],
     _hF_=[0,1,1],
     _hG_=[8,[4,0],[4,7]],
     _hH_=[0,1,1],
     _hI_=[8,[4,0],[6,3]],
     _hJ_=[0,2,2],
     _hK_=[8,[4,0],[4,0]],
     _hL_=[0,1,1],
     _hM_=[10,[4,0],[4,1]],
     _hN_=[0,1,1],
     _hO_=[10,[4,0],[4,2]],
     _hP_=[0,1,1],
     _hQ_=[10,[4,0],[4,3]],
     _hR_=[0,1,1],
     _hS_=[10,[4,0],[4,4]],
     _hT_=[0,1,1],
     _hU_=[10,[4,0],[4,6]],
     _hV_=[0,1,1],
     _hW_=[10,[4,0],[4,7]],
     _hX_=[0,1,1],
     _hY_=[10,[4,0],[6,3]],
     _hZ_=[0,2,2],
     _h0_=[10,[4,0],[4,0]],
     _h1_=[0,1,1],
     _h2_=[9,[4,0],[4,1]],
     _h3_=[0,1,1],
     _h4_=[9,[4,0],[4,2]],
     _h5_=[0,1,1],
     _h6_=[9,[4,0],[4,3]],
     _h7_=[0,1,1],
     _h8_=[9,[4,0],[4,4]],
     _h9_=[0,1,1],
     _h__=[9,[4,0],[4,6]],
     _h$_=[0,1,1],
     _ia_=[9,[4,0],[4,7]],
     _ib_=[0,1,1],
     _ic_=[9,[4,0],[6,3]],
     _id_=[0,2,2],
     _ie_=[9,[4,0],[4,0]],
     _if_=[0,1,1],
     _ig_=[11,[4,0],[4,1]],
     _ih_=[0,1,1],
     _ii_=[11,[4,0],[4,2]],
     _ij_=[0,1,1],
     _ik_=[11,[4,0],[4,3]],
     _il_=[0,1,1],
     _im_=[11,[4,0],[4,4]],
     _in_=[0,1,1],
     _io_=[11,[4,0],[4,6]],
     _ip_=[0,1,1],
     _iq_=[11,[4,0],[4,7]],
     _ir_=[0,1,1],
     _is_=[11,[4,0],[6,3]],
     _it_=[0,2,2],
     _iu_=[11,[4,0],[4,0]],
     _iv_=[0,1,1],
     _iw_=[33,1],
     _ix_=[0,2,5],
     _iy_=[28,1],
     _iz_=[0,3,3],
     _iA_=[0,3,4],
     _iB_=[0,4,4],
     _iC_=[0,3,6],
     _iD_=[27,1],
     _iE_=[0,4,4],
     _iF_=[4,0],
     _iG_=[0,2,2],
     _iH_=[0,4,4],
     _iI_=[33,2],
     _iJ_=[0,2,5],
     _iK_=[33,0],
     _iL_=[0,4,4],
     _iM_=[0,3,4],
     _iN_=
      [0,
       [11,
        caml_string_of_jsbytes("Unrecognized opcode after 0xCB: 0x"),
        [4,6,[0,2,2],0,0]],
       caml_string_of_jsbytes("Unrecognized opcode after 0xCB: 0x%02x")],
     _iO_=[17,[4,1]],
     _iP_=[0,2,2],
     _iQ_=[17,[4,2]],
     _iR_=[0,2,2],
     _iS_=[17,[4,3]],
     _iT_=[0,2,2],
     _iU_=[17,[4,4]],
     _iV_=[0,2,2],
     _iW_=[17,[4,6]],
     _iX_=[0,2,2],
     _iY_=[17,[4,7]],
     _iZ_=[0,2,2],
     _i0_=[17,[6,3]],
     _i1_=[0,4,4],
     _i2_=[17,[4,0]],
     _i3_=[0,2,2],
     _i4_=[19,[4,1]],
     _i5_=[0,2,2],
     _i6_=[19,[4,2]],
     _i7_=[0,2,2],
     _i8_=[19,[4,3]],
     _i9_=[0,2,2],
     _i__=[19,[4,4]],
     _i$_=[0,2,2],
     _ja_=[19,[4,6]],
     _jb_=[0,2,2],
     _jc_=[19,[4,7]],
     _jd_=[0,2,2],
     _je_=[19,[6,3]],
     _jf_=[0,4,4],
     _jg_=[19,[4,0]],
     _jh_=[0,2,2],
     _ji_=[18,[4,1]],
     _jj_=[0,2,2],
     _jk_=[18,[4,2]],
     _jl_=[0,2,2],
     _jm_=[18,[4,3]],
     _jn_=[0,2,2],
     _jo_=[18,[4,4]],
     _jp_=[0,2,2],
     _jq_=[18,[4,6]],
     _jr_=[0,2,2],
     _js_=[18,[4,7]],
     _jt_=[0,2,2],
     _ju_=[18,[6,3]],
     _jv_=[0,4,4],
     _jw_=[18,[4,0]],
     _jx_=[0,2,2],
     _jy_=[20,[4,1]],
     _jz_=[0,2,2],
     _jA_=[20,[4,2]],
     _jB_=[0,2,2],
     _jC_=[20,[4,3]],
     _jD_=[0,2,2],
     _jE_=[20,[4,4]],
     _jF_=[0,2,2],
     _jG_=[20,[4,6]],
     _jH_=[0,2,2],
     _jI_=[20,[4,7]],
     _jJ_=[0,2,2],
     _jK_=[20,[6,3]],
     _jL_=[0,4,4],
     _jM_=[20,[4,0]],
     _jN_=[0,2,2],
     _jO_=[21,[4,1]],
     _jP_=[0,2,2],
     _jQ_=[21,[4,2]],
     _jR_=[0,2,2],
     _jS_=[21,[4,3]],
     _jT_=[0,2,2],
     _jU_=[21,[4,4]],
     _jV_=[0,2,2],
     _jW_=[21,[4,6]],
     _jX_=[0,2,2],
     _jY_=[21,[4,7]],
     _jZ_=[0,2,2],
     _j0_=[21,[6,3]],
     _j1_=[0,4,4],
     _j2_=[21,[4,0]],
     _j3_=[0,2,2],
     _j4_=[22,[4,1]],
     _j5_=[0,2,2],
     _j6_=[22,[4,2]],
     _j7_=[0,2,2],
     _j8_=[22,[4,3]],
     _j9_=[0,2,2],
     _j__=[22,[4,4]],
     _j$_=[0,2,2],
     _ka_=[22,[4,6]],
     _kb_=[0,2,2],
     _kc_=[22,[4,7]],
     _kd_=[0,2,2],
     _ke_=[22,[6,3]],
     _kf_=[0,4,4],
     _kg_=[22,[4,0]],
     _kh_=[0,2,2],
     _ki_=[16,[4,1]],
     _kj_=[0,2,2],
     _kk_=[16,[4,2]],
     _kl_=[0,2,2],
     _km_=[16,[4,3]],
     _kn_=[0,2,2],
     _ko_=[16,[4,4]],
     _kp_=[0,2,2],
     _kq_=[16,[4,6]],
     _kr_=[0,2,2],
     _ks_=[16,[4,7]],
     _kt_=[0,2,2],
     _ku_=[16,[6,3]],
     _kv_=[0,4,4],
     _kw_=[16,[4,0]],
     _kx_=[0,2,2],
     _ky_=[23,[4,1]],
     _kz_=[0,2,2],
     _kA_=[23,[4,2]],
     _kB_=[0,2,2],
     _kC_=[23,[4,3]],
     _kD_=[0,2,2],
     _kE_=[23,[4,4]],
     _kF_=[0,2,2],
     _kG_=[23,[4,6]],
     _kH_=[0,2,2],
     _kI_=[23,[4,7]],
     _kJ_=[0,2,2],
     _kK_=[23,[6,3]],
     _kL_=[0,4,4],
     _kM_=[23,[4,0]],
     _kN_=[0,2,2],
     _kO_=[24,0,[4,1]],
     _kP_=[0,2,2],
     _kQ_=[24,0,[4,2]],
     _kR_=[0,2,2],
     _kS_=[24,0,[4,3]],
     _kT_=[0,2,2],
     _kU_=[24,0,[4,4]],
     _kV_=[0,2,2],
     _kW_=[24,0,[4,6]],
     _kX_=[0,2,2],
     _kY_=[24,0,[4,7]],
     _kZ_=[0,2,2],
     _k0_=[24,0,[6,3]],
     _k1_=[0,3,3],
     _k2_=[24,0,[4,0]],
     _k3_=[0,2,2],
     _k4_=[24,1,[4,1]],
     _k5_=[0,2,2],
     _k6_=[24,1,[4,2]],
     _k7_=[0,2,2],
     _k8_=[24,1,[4,3]],
     _k9_=[0,2,2],
     _k__=[24,1,[4,4]],
     _k$_=[0,2,2],
     _la_=[24,1,[4,6]],
     _lb_=[0,2,2],
     _lc_=[24,1,[4,7]],
     _ld_=[0,2,2],
     _le_=[24,1,[6,3]],
     _lf_=[0,3,3],
     _lg_=[24,1,[4,0]],
     _lh_=[0,2,2],
     _li_=[24,2,[4,1]],
     _lj_=[0,2,2],
     _lk_=[24,2,[4,2]],
     _ll_=[0,2,2],
     _lm_=[24,2,[4,3]],
     _ln_=[0,2,2],
     _lo_=[24,2,[4,4]],
     _lp_=[0,2,2],
     _lq_=[24,2,[4,6]],
     _lr_=[0,2,2],
     _ls_=[24,2,[4,7]],
     _lt_=[0,2,2],
     _lu_=[24,2,[6,3]],
     _lv_=[0,3,3],
     _lw_=[24,2,[4,0]],
     _lx_=[0,2,2],
     _ly_=[24,3,[4,1]],
     _lz_=[0,2,2],
     _lA_=[24,3,[4,2]],
     _lB_=[0,2,2],
     _lC_=[24,3,[4,3]],
     _lD_=[0,2,2],
     _lE_=[24,3,[4,4]],
     _lF_=[0,2,2],
     _lG_=[24,3,[4,6]],
     _lH_=[0,2,2],
     _lI_=[24,3,[4,7]],
     _lJ_=[0,2,2],
     _lK_=[24,3,[6,3]],
     _lL_=[0,3,3],
     _lM_=[24,3,[4,0]],
     _lN_=[0,2,2],
     _lO_=[24,4,[4,1]],
     _lP_=[0,2,2],
     _lQ_=[24,4,[4,2]],
     _lR_=[0,2,2],
     _lS_=[24,4,[4,3]],
     _lT_=[0,2,2],
     _lU_=[24,4,[4,4]],
     _lV_=[0,2,2],
     _lW_=[24,4,[4,6]],
     _lX_=[0,2,2],
     _lY_=[24,4,[4,7]],
     _lZ_=[0,2,2],
     _l0_=[24,4,[6,3]],
     _l1_=[0,3,3],
     _l2_=[24,4,[4,0]],
     _l3_=[0,2,2],
     _l4_=[24,5,[4,1]],
     _l5_=[0,2,2],
     _l6_=[24,5,[4,2]],
     _l7_=[0,2,2],
     _l8_=[24,5,[4,3]],
     _l9_=[0,2,2],
     _l__=[24,5,[4,4]],
     _l$_=[0,2,2],
     _ma_=[24,5,[4,6]],
     _mb_=[0,2,2],
     _mc_=[24,5,[4,7]],
     _md_=[0,2,2],
     _me_=[24,5,[6,3]],
     _mf_=[0,3,3],
     _mg_=[24,5,[4,0]],
     _mh_=[0,2,2],
     _mi_=[24,6,[4,1]],
     _mj_=[0,2,2],
     _mk_=[24,6,[4,2]],
     _ml_=[0,2,2],
     _mm_=[24,6,[4,3]],
     _mn_=[0,2,2],
     _mo_=[24,6,[4,4]],
     _mp_=[0,2,2],
     _mq_=[24,6,[4,6]],
     _mr_=[0,2,2],
     _ms_=[24,6,[4,7]],
     _mt_=[0,2,2],
     _mu_=[24,6,[6,3]],
     _mv_=[0,3,3],
     _mw_=[24,6,[4,0]],
     _mx_=[0,2,2],
     _my_=[24,7,[4,1]],
     _mz_=[0,2,2],
     _mA_=[24,7,[4,2]],
     _mB_=[0,2,2],
     _mC_=[24,7,[4,3]],
     _mD_=[0,2,2],
     _mE_=[24,7,[4,4]],
     _mF_=[0,2,2],
     _mG_=[24,7,[4,6]],
     _mH_=[0,2,2],
     _mI_=[24,7,[4,7]],
     _mJ_=[0,2,2],
     _mK_=[24,7,[6,3]],
     _mL_=[0,3,3],
     _mM_=[24,7,[4,0]],
     _mN_=[0,2,2],
     _mO_=[26,0,[4,1]],
     _mP_=[0,2,2],
     _mQ_=[26,0,[4,2]],
     _mR_=[0,2,2],
     _mS_=[26,0,[4,3]],
     _mT_=[0,2,2],
     _mU_=[26,0,[4,4]],
     _mV_=[0,2,2],
     _mW_=[26,0,[4,6]],
     _mX_=[0,2,2],
     _mY_=[26,0,[4,7]],
     _mZ_=[0,2,2],
     _m0_=[26,0,[6,3]],
     _m1_=[0,4,4],
     _m2_=[26,0,[4,0]],
     _m3_=[0,2,2],
     _m4_=[26,1,[4,1]],
     _m5_=[0,2,2],
     _m6_=[26,1,[4,2]],
     _m7_=[0,2,2],
     _m8_=[26,1,[4,3]],
     _m9_=[0,2,2],
     _m__=[26,1,[4,4]],
     _m$_=[0,2,2],
     _na_=[26,1,[4,6]],
     _nb_=[0,2,2],
     _nc_=[26,1,[4,7]],
     _nd_=[0,2,2],
     _ne_=[26,1,[6,3]],
     _nf_=[0,4,4],
     _ng_=[26,1,[4,0]],
     _nh_=[0,2,2],
     _ni_=[26,2,[4,1]],
     _nj_=[0,2,2],
     _nk_=[26,2,[4,2]],
     _nl_=[0,2,2],
     _nm_=[26,2,[4,3]],
     _nn_=[0,2,2],
     _no_=[26,2,[4,4]],
     _np_=[0,2,2],
     _nq_=[26,2,[4,6]],
     _nr_=[0,2,2],
     _ns_=[26,2,[4,7]],
     _nt_=[0,2,2],
     _nu_=[26,2,[6,3]],
     _nv_=[0,4,4],
     _nw_=[26,2,[4,0]],
     _nx_=[0,2,2],
     _ny_=[26,3,[4,1]],
     _nz_=[0,2,2],
     _nA_=[26,3,[4,2]],
     _nB_=[0,2,2],
     _nC_=[26,3,[4,3]],
     _nD_=[0,2,2],
     _nE_=[26,3,[4,4]],
     _nF_=[0,2,2],
     _nG_=[26,3,[4,6]],
     _nH_=[0,2,2],
     _nI_=[26,3,[4,7]],
     _nJ_=[0,2,2],
     _nK_=[26,3,[6,3]],
     _nL_=[0,4,4],
     _nM_=[26,3,[4,0]],
     _nN_=[0,2,2],
     _nO_=[26,4,[4,1]],
     _nP_=[0,2,2],
     _nQ_=[26,4,[4,2]],
     _nR_=[0,2,2],
     _nS_=[26,4,[4,3]],
     _nT_=[0,2,2],
     _nU_=[26,4,[4,4]],
     _nV_=[0,2,2],
     _nW_=[26,4,[4,6]],
     _nX_=[0,2,2],
     _nY_=[26,4,[4,7]],
     _nZ_=[0,2,2],
     _n0_=[26,4,[6,3]],
     _n1_=[0,4,4],
     _n2_=[26,4,[4,0]],
     _n3_=[0,2,2],
     _n4_=[26,5,[4,1]],
     _n5_=[0,2,2],
     _n6_=[26,5,[4,2]],
     _n7_=[0,2,2],
     _n8_=[26,5,[4,3]],
     _n9_=[0,2,2],
     _n__=[26,5,[4,4]],
     _n$_=[0,2,2],
     _oa_=[26,5,[4,6]],
     _ob_=[0,2,2],
     _oc_=[26,5,[4,7]],
     _od_=[0,2,2],
     _oe_=[26,5,[6,3]],
     _of_=[0,4,4],
     _og_=[26,5,[4,0]],
     _oh_=[0,2,2],
     _oi_=[26,6,[4,1]],
     _oj_=[0,2,2],
     _ok_=[26,6,[4,2]],
     _ol_=[0,2,2],
     _om_=[26,6,[4,3]],
     _on_=[0,2,2],
     _oo_=[26,6,[4,4]],
     _op_=[0,2,2],
     _oq_=[26,6,[4,6]],
     _or_=[0,2,2],
     _os_=[26,6,[4,7]],
     _ot_=[0,2,2],
     _ou_=[26,6,[6,3]],
     _ov_=[0,4,4],
     _ow_=[26,6,[4,0]],
     _ox_=[0,2,2],
     _oy_=[26,7,[4,1]],
     _oz_=[0,2,2],
     _oA_=[26,7,[4,2]],
     _oB_=[0,2,2],
     _oC_=[26,7,[4,3]],
     _oD_=[0,2,2],
     _oE_=[26,7,[4,4]],
     _oF_=[0,2,2],
     _oG_=[26,7,[4,6]],
     _oH_=[0,2,2],
     _oI_=[26,7,[4,7]],
     _oJ_=[0,2,2],
     _oK_=[26,7,[6,3]],
     _oL_=[0,4,4],
     _oM_=[26,7,[4,0]],
     _oN_=[0,2,2],
     _oO_=[25,0,[4,1]],
     _oP_=[0,2,2],
     _oQ_=[25,0,[4,2]],
     _oR_=[0,2,2],
     _oS_=[25,0,[4,3]],
     _oT_=[0,2,2],
     _oU_=[25,0,[4,4]],
     _oV_=[0,2,2],
     _oW_=[25,0,[4,6]],
     _oX_=[0,2,2],
     _oY_=[25,0,[4,7]],
     _oZ_=[0,2,2],
     _o0_=[25,0,[6,3]],
     _o1_=[0,4,4],
     _o2_=[25,0,[4,0]],
     _o3_=[0,2,2],
     _o4_=[25,1,[4,1]],
     _o5_=[0,2,2],
     _o6_=[25,1,[4,2]],
     _o7_=[0,2,2],
     _o8_=[25,1,[4,3]],
     _o9_=[0,2,2],
     _o__=[25,1,[4,4]],
     _o$_=[0,2,2],
     _pa_=[25,1,[4,6]],
     _pb_=[0,2,2],
     _pc_=[25,1,[4,7]],
     _pd_=[0,2,2],
     _pe_=[25,1,[6,3]],
     _pf_=[0,4,4],
     _pg_=[25,1,[4,0]],
     _ph_=[0,2,2],
     _pi_=[25,2,[4,1]],
     _pj_=[0,2,2],
     _pk_=[25,2,[4,2]],
     _pl_=[0,2,2],
     _pm_=[25,2,[4,3]],
     _pn_=[0,2,2],
     _po_=[25,2,[4,4]],
     _pp_=[0,2,2],
     _pq_=[25,2,[4,6]],
     _pr_=[0,2,2],
     _ps_=[25,2,[4,7]],
     _pt_=[0,2,2],
     _pu_=[25,2,[6,3]],
     _pv_=[0,4,4],
     _pw_=[25,2,[4,0]],
     _px_=[0,2,2],
     _py_=[25,3,[4,1]],
     _pz_=[0,2,2],
     _pA_=[25,3,[4,2]],
     _pB_=[0,2,2],
     _pC_=[25,3,[4,3]],
     _pD_=[0,2,2],
     _pE_=[25,3,[4,4]],
     _pF_=[0,2,2],
     _pG_=[25,3,[4,6]],
     _pH_=[0,2,2],
     _pI_=[25,3,[4,7]],
     _pJ_=[0,2,2],
     _pK_=[25,3,[6,3]],
     _pL_=[0,4,4],
     _pM_=[25,3,[4,0]],
     _pN_=[0,2,2],
     _pO_=[25,4,[4,1]],
     _pP_=[0,2,2],
     _pQ_=[25,4,[4,2]],
     _pR_=[0,2,2],
     _pS_=[25,4,[4,3]],
     _pT_=[0,2,2],
     _pU_=[25,4,[4,4]],
     _pV_=[0,2,2],
     _pW_=[25,4,[4,6]],
     _pX_=[0,2,2],
     _pY_=[25,4,[4,7]],
     _pZ_=[0,2,2],
     _p0_=[25,4,[6,3]],
     _p1_=[0,4,4],
     _p2_=[25,4,[4,0]],
     _p3_=[0,2,2],
     _p4_=[25,5,[4,1]],
     _p5_=[0,2,2],
     _p6_=[25,5,[4,2]],
     _p7_=[0,2,2],
     _p8_=[25,5,[4,3]],
     _p9_=[0,2,2],
     _p__=[25,5,[4,4]],
     _p$_=[0,2,2],
     _qa_=[25,5,[4,6]],
     _qb_=[0,2,2],
     _qc_=[25,5,[4,7]],
     _qd_=[0,2,2],
     _qe_=[25,5,[6,3]],
     _qf_=[0,4,4],
     _qg_=[25,5,[4,0]],
     _qh_=[0,2,2],
     _qi_=[25,6,[4,1]],
     _qj_=[0,2,2],
     _qk_=[25,6,[4,2]],
     _ql_=[0,2,2],
     _qm_=[25,6,[4,3]],
     _qn_=[0,2,2],
     _qo_=[25,6,[4,4]],
     _qp_=[0,2,2],
     _qq_=[25,6,[4,6]],
     _qr_=[0,2,2],
     _qs_=[25,6,[4,7]],
     _qt_=[0,2,2],
     _qu_=[25,6,[6,3]],
     _qv_=[0,4,4],
     _qw_=[25,6,[4,0]],
     _qx_=[0,2,2],
     _qy_=[25,7,[4,1]],
     _qz_=[0,2,2],
     _qA_=[25,7,[4,2]],
     _qB_=[0,2,2],
     _qC_=[25,7,[4,3]],
     _qD_=[0,2,2],
     _qE_=[25,7,[4,4]],
     _qF_=[0,2,2],
     _qG_=[25,7,[4,6]],
     _qH_=[0,2,2],
     _qI_=[25,7,[4,7]],
     _qJ_=[0,2,2],
     _qK_=[25,7,[6,3]],
     _qL_=[0,4,4],
     _qM_=[25,7,[4,0]],
     _qN_=[0,2,2],
     _qO_=[0,3,6],
     _qP_=[0,6,6],
     _qQ_=[4,0],
     _qR_=[0,2,2],
     _qS_=[0,4,4],
     _qT_=[33,3],
     _qU_=[0,2,5],
     _qV_=[28,2],
     _qW_=[0,3,3],
     _qX_=[0,3,4],
     _qY_=[0,1,1],
     _qZ_=[0,3,6],
     _q0_=[27,2],
     _q1_=[0,4,4],
     _q2_=[4,0],
     _q3_=[0,2,2],
     _q4_=[0,4,4],
     _q5_=[33,4],
     _q6_=[0,2,5],
     _q7_=[0,4,4],
     _q8_=[0,3,4],
     _q9_=[0,1,1],
     _q__=[0,3,6],
     _q$_=[0,1,1],
     _ra_=[4,0],
     _rb_=[0,2,2],
     _rc_=[0,4,4],
     _rd_=[4,0],
     _re_=[0,3,3],
     _rf_=[28,3],
     _rg_=[0,3,3],
     _rh_=[0,0,[4,0]],
     _ri_=[0,2,2],
     _rj_=[0,1,1],
     _rk_=[0,1,1],
     _rl_=[27,3],
     _rm_=[0,4,4],
     _rn_=[4,0],
     _ro_=[0,2,2],
     _rp_=[0,4,4],
     _rq_=[0,4,4],
     _rr_=[29,0,[5,3]],
     _rs_=[0,1,1],
     _rt_=[4,0],
     _ru_=[0,4,4],
     _rv_=[0,1,1],
     _rw_=[0,1,1],
     _rx_=[0,1,1],
     _ry_=[4,0],
     _rz_=[0,2,2],
     _rA_=[0,4,4],
     _rB_=[4,0],
     _rC_=[0,3,3],
     _rD_=[28,0],
     _rE_=[0,3,3],
     _rF_=[0,[4,0],0],
     _rG_=[0,2,2],
     _rH_=[0,1,1],
     _rI_=[0,1,1],
     _rJ_=[27,0],
     _rK_=[0,4,4],
     _rL_=[4,0],
     _rM_=[0,2,2],
     _rN_=[0,4,4],
     _rO_=[5,3],
     _rP_=[0,3,3],
     _rQ_=[1,3,[5,3]],
     _rR_=[0,2,2],
     _rS_=[4,0],
     _rT_=[0,4,4],
     _rU_=[0,1,1],
     _rV_=[0,1,1],
     _rW_=[0,1,1],
     _rX_=[4,0],
     _rY_=[0,2,2],
     _rZ_=[0,4,4],
     _r1_=
      [0,caml_string_of_jsbytes("lib/cartridge/detect_cartridge.ml"),11,31],
     _s1_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" SP:"),
         [2,0,[11,caml_string_of_jsbytes(" PC:"),[2,0,0]]]]],
       caml_string_of_jsbytes("%s SP:%s PC:%s")],
     _r4_=
      [0,
       [11,caml_string_of_jsbytes("Invalid arugment"),0],
       caml_string_of_jsbytes("Invalid arugment")],
     _r2_=[0,0],
     _r3_=[0,0],
     _r6_=[0,1],
     _r5_=[0,0],
     _r7_=[0,1],
     _r8_=[0,1],
     _r9_=[0,0],
     _r__=[0,0],
     _r$_=[0,0],
     _sa_=[0,0],
     _sb_=[0,1],
     _sc_=[0,caml_string_of_jsbytes("lib/cpu/cpu.ml"),280,16],
     _sd_=[0,0],
     _se_=[0,0],
     _sf_=[0,0],
     _sg_=[0,0],
     _sh_=[0,0],
     _si_=[0,0],
     _sj_=[0,0],
     _sk_=[0,0],
     _sl_=[0,0],
     _sm_=[0,0],
     _sn_=[0,0],
     _so_=[0,0],
     _sp_=[0,0],
     _sq_=[0,0],
     _sr_=[0,0],
     _ss_=[0,0],
     _st_=[0,0],
     _su_=[0,1],
     _sv_=[0,1],
     _sw_=[0,0],
     _sx_=[0,1],
     _sy_=[0,0],
     _sz_=[0,0],
     _sA_=[0,0],
     _sB_=[0,0],
     _sC_=[0,0],
     _sD_=[0,0],
     _sE_=[0,0],
     _sF_=[0,1],
     _sG_=[0,0],
     _sH_=[0,1],
     _sI_=[0,0],
     _sJ_=[0,0],
     _sK_=[0,0],
     _sL_=[0,0],
     _sM_=[0,0],
     _sN_=[0,0],
     _sO_=[0,0],
     _sP_=[0,0],
     _sQ_=[0,0],
     _sR_=[0,0],
     _sS_=[0,0],
     _sT_=[0,0],
     _sU_=[0,0],
     _sV_=[0,0],
     _sW_=[0,0],
     _sX_=[0,0],
     _sY_=[0,0],
     _sZ_=[0,0],
     _s0_=[0,1],
     _s3_=[0,1],
     _s4_=[0,0],
     _s5_=[0,1],
     _s6_=[0,1],
     _s7_=[0,[0,0,432],[0,[0,1,19],[0,[0,2,216],[0,[0,3,333],0]]]],
     _s8_=
      caml_list_of_js_array
       ([[0,65280,207],
         [0,65281,0],
         [0,65282,126],
         [0,65284,171],
         [0,65285,0],
         [0,65286,0],
         [0,65287,248],
         [0,65295,225],
         [0,65344,145],
         [0,65346,0],
         [0,65347,0],
         [0,65348,0],
         [0,65349,0],
         [0,65350,255],
         [0,65351,252],
         [0,65354,0],
         [0,65355,0],
         [0,65535,0]]),
     _tc_=caml_string_of_jsbytes("FPS"),
     _td_=caml_string_of_jsbytes("Duration"),
     _te_=caml_string_of_jsbytes("Frames"),
     _tf_=caml_string_of_jsbytes("ROM path"),
     _tg_=
      [0,
       [2,
        [0,1,8],
        [11,
         caml_string_of_jsbytes(": "),
         [2,
          0,
          [12,
           10,
           [2,
            [0,1,8],
            [11,
             caml_string_of_jsbytes(": "),
             [4,
              0,
              0,
              0,
              [12,10,[2,[0,1,8],[11,caml_string_of_jsbytes(": "),partial$0]]]]]]]]]],
       caml_string_of_jsbytes("%8s: %s\n%8s: %d\n%8s: %f\n%8s: %f\n")],
     _th_=caml_string_of_jsbytes("bench_result"),
     _s__=caml_string_of_jsbytes("tobu.gb"),
     _s$_=caml_string_of_jsbytes("rom_path"),
     _ta_=caml_string_of_jsbytes("1500"),
     _tb_=caml_string_of_jsbytes("frames");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function make(v){return [0,v]}
    function get(r){return r[1]}
    function compare_and_set(r,seen,v)
     {var cur=r[1];return cur === seen?(r[1] = v,1):0}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function abs(x){return 0 <= x?x:- x | 0}
    function cat(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s);
      function loop(i)
       {var i$0=i;
        for(;;)
         {if(l <= i$0)return cat(s,_c_);
          var match=caml_string_get(s,i$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
          return s}}
      return loop(0)}
    function string_of_float(f)
     {return valid_float_lexem(caml_format_float(_d_,f))}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_CG_)
             {_CG_ = caml_wrap_exception(_CG_);
              if(_CG_[1] !== Sys_error)throw _CG_;
              var _CF_=_CG_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    var exit_function=make(flush_all);
    function at_exit(f)
     {for(;;)
       {var
         f_yet_to_run=make(1),
         old_exit=get(exit_function),
         new_exit$0=
          function(f_yet_to_run,old_exit)
           {function new_exit(param)
             {if(compare_and_set(f_yet_to_run,1,0))caml_call1(f,0);
              return caml_call1(old_exit,0)}
            return new_exit},
         new_exit=new_exit$0(f_yet_to_run,old_exit),
         success=compare_and_set(exit_function,old_exit,new_exit),
         _CE_=1 - success;
        if(_CE_)continue;
        return _CE_}}
    function do_at_exit(param){return caml_call1(get(exit_function),0)}
    caml_register_named_value
     (caml_string_of_jsbytes("Pervasives.do_at_exit"),do_at_exit);
    if(caml_sys_const_naked_pointers_checked(0))
     at_exit(function(_CD_){return caml_gc_major(_CD_)});
    function _e_(_CC_,_CB_){return caml_ml_output_char(_CC_,_CB_)}
    function _f_(_CA_){return caml_ml_flush(_CA_)}
    function get$0(param)
     {if(param){var v=param[1];return v}return invalid_arg(_g_)}
    function _h_(_Cz_){return _Cz_}
    function escaped(c)
     {var switch$0=0;
      if(40 <= c)
       {if(92 === c)return _i_;if(! (127 <= c))switch$0 = 1}
      else
       if(32 <= c)
        {if(39 <= c)return _j_;switch$0 = 1}
       else
        if(! (14 <= c))
         switch(c)
          {case 8:return _k_;
           case 9:return _l_;
           case 10:return _m_;
           case 13:return _n_
           }
      if(switch$0)
       {var s$0=caml_create_bytes(1);
        caml_bytes_unsafe_set(s$0,0,c);
        return caml_string_of_bytes(s$0)}
      var s=caml_create_bytes(4);
      caml_bytes_unsafe_set(s,0,92);
      caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
      return caml_string_of_bytes(s)}
    function uppercase_ascii(c)
     {var switcher=c - 97 | 0;return 25 < switcher >>> 0?c:c - 32 | 0}
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    typeof match === "number";
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_Cy_=caml_call1(p,a);
          if(_Cy_)return _Cy_;
          var param$0=l;
          continue}
        return 0}}
    function abs$0(x){return 0 <= x?x:- x | 0}
    function compare(_Cx_,_Cw_){return caml_int_compare(_Cx_,_Cw_)}
    function max(x,y){return y <= x?x:y}
    function to_string(x){return caml_string_of_jsbytes("" + x)}
    function make$0(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(_o_)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_p_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_q_)}
    function escaped$0(s)
     {var n=[0,0],_Cp_=caml_ml_bytes_length(s) - 1 | 0,_Co_=0;
      if(! (_Cp_ < 0))
       {var i$0=_Co_;
        for(;;)
         {var match=caml_bytes_unsafe_get(s,i$0),switch$0=0;
          if(32 <= match)
           {var _Ct_=match - 34 | 0,switch$1=0;
            if(58 < _Ct_ >>> 0)
             {if(93 <= _Ct_)switch$1 = 1}
            else
             if(56 < (_Ct_ - 1 | 0) >>> 0){switch$0 = 1;switch$1 = 1}
            if(! switch$1){var _Cu_=1;switch$0 = 2}}
          else
           if(11 <= match)
            {if(13 === match)switch$0 = 1}
           else
            if(8 <= match)switch$0 = 1;
          switch(switch$0){case 0:var _Cu_=4;break;case 1:var _Cu_=2;break}
          n[1] = n[1] + _Cu_ | 0;
          var _Cv_=i$0 + 1 | 0;
          if(_Cp_ !== i$0){var i$0=_Cv_;continue}
          break}}
      if(n[1] === caml_ml_bytes_length(s))return copy(s);
      var s$0=caml_create_bytes(n[1]);
      n[1] = 0;
      var _Cr_=caml_ml_bytes_length(s) - 1 | 0,_Cq_=0;
      if(! (_Cr_ < 0))
       {var i=_Cq_;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i),switch$2=0;
          if(35 <= c)
           if(92 === c)
            switch$2 = 2;
           else
            if(127 <= c)switch$2 = 1;else switch$2 = 3;
          else
           if(32 <= c)
            if(34 <= c)switch$2 = 2;else switch$2 = 3;
           else
            if(14 <= c)
             switch$2 = 1;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                break;
               default:switch$2 = 1}
          switch(switch$2)
           {case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0);
             break;
            case 2:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _Cs_=i + 1 | 0;
          if(_Cr_ !== i){var i=_Cs_;continue}
          break}}
      return s$0}
    function map(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_Cm_=l - 1 | 0,_Cl_=0;
      if(! (_Cm_ < 0))
       {var i=_Cl_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _Cn_=i + 1 | 0;
          if(_Cm_ !== i){var i=_Cn_;continue}
          break}}
      return r}
    function uppercase_ascii$0(s){return map(uppercase_ascii,s)}
    function bos(_Ck_){return caml_bytes_of_string(_Ck_)}
    function bts(_Cj_){return caml_string_of_bytes(_Cj_)}
    function make$1(n,c){return bts(make$0(n,c))}
    function escaped$1(s)
     {function escape_if_needed(s,n,i)
       {var i$0=i;
        for(;;)
         {if(n <= i$0)return s;
          var
           match=caml_string_unsafe_get(s,i$0),
           _Ci_=match - 32 | 0,
           switch$0=0;
          if(59 < _Ci_ >>> 0)
           {if(33 < (_Ci_ - 61 | 0) >>> 0)switch$0 = 1}
          else
           if(2 === _Ci_)switch$0 = 1;
          if(switch$0)return bts(escaped$0(bos(s)));
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      return escape_if_needed(s,caml_ml_string_length(s),0)}
    function uppercase_ascii$1(s){return bts(uppercase_ascii$0(bos(s)))}
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    function init(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_Cg_=l - 1 | 0,_Cf_=1;
        if(! (_Cg_ < 1))
         {var i=_Cf_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _Ch_=i + 1 | 0;
            if(_Cg_ !== i){var i=_Ch_;continue}
            break}}
        return res}
      return invalid_arg(_r_)}
    function create_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_Cd_=sx - 1 | 0,_Cc_=0;
      if(! (_Cd_ < 0))
       {var x=_Cc_;
        for(;;)
         {res[1 + x] = caml_make_vect(sy,init);
          var _Ce_=x + 1 | 0;
          if(_Cd_ !== x){var x=_Ce_;continue}
          break}}
      return res}
    function iter$0(f,a)
     {var _Ca_=a.length - 1 - 1 | 0,_B$_=0;
      if(! (_Ca_ < 0))
       {var i=_B$_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _Cb_=i + 1 | 0;
          if(_Ca_ !== i){var i=_Cb_;continue}
          break}}
      return 0}
    function map$0(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_B9_=l - 1 | 0,_B8_=1;
      if(! (_B9_ < 1))
       {var i=_B8_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _B__=i + 1 | 0;
          if(_B9_ !== i){var i=_B__;continue}
          break}}
      return r}
    function mapi(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call2(f,0,a[1])),_B6_=l - 1 | 0,_B5_=1;
      if(! (_B6_ < 1))
       {var i=_B5_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _B7_=i + 1 | 0;
          if(_B6_ !== i){var i=_B7_;continue}
          break}}
      return r}
    function fold_left(f,x,a)
     {var r=[0,x],_B3_=a.length - 1 - 1 | 0,_B2_=0;
      if(! (_B3_ < 0))
       {var i=_B2_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _B4_=i + 1 | 0;
          if(_B3_ !== i){var i=_B4_;continue}
          break}}
      return r[1]}
    caml_fresh_oo_id(0);
    function create(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_u_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_s_]}
        throw [0,Assert_failure,_t_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _B0_=len < min_len?1:0;
      if(_B0_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _B1_=0}
      else
       var _B1_=_B0_;
      return _B1_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_fconv(opt,fconv)
     {if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:return 102;
        case 1:return 101;
        case 2:return 69;
        case 3:return 103;
        case 4:return 71;
        case 5:return cF;
        case 6:return 104;
        case 7:return 72;
        default:return 70}}
    function bprint_fconv_flag(buf,fconv)
     {switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      return 8 <= fconv[2]?buffer_add_char(buf,35):0}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _v_;
         case 1:return _w_;
         case 2:return _x_;
         case 3:return _y_;
         case 4:return _z_;
         case 5:return _A_;
         default:return _B_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return cat(_C_,make$1(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_D_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_H_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_I_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_J_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_K_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_L_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_M_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_N_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_O_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_T_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _BC_=function(param){return 0},
         _BD_=function(param){return 0},
         _BE_=function(param){return 0};
        return [0,function(param){return 0},_BE_,_BD_,_BC_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _BF_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_BF_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _BG_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _BG_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _BH_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _BH_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _BI_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _BI_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _BJ_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _BJ_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _BK_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _BK_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _BL_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _BL_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _BM_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _BM_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _BN_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _BN_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _BO_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _BP_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _BQ_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _BQ_,
                  _BP_,
                  _BO_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _BR_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _BR_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _BS_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _BS_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _BT_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _BT_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _BU_=function(param){caml_call1(de$12,0);return 0},
           _BV_=function(param){caml_call1(ed$12,0);return 0},
           _BW_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _BW_,
                  _BV_,
                  _BU_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _BX_=function(param){caml_call1(de$13,0);return 0},
           _BY_=function(param){caml_call1(ed$13,0);return 0},
           _BZ_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _BZ_,
                  _BY_,
                  _BX_]}}
    function trans(ty1,ty2)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof ty2 === "number")
        return 0;
       else
        switch(ty2[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_U_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_Bj_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 0:var rest2=ty2[1];return [0,trans(_Bj_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_Bk_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 1:var rest2$0=ty2[1];return [1,trans(_Bk_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_Bl_=ty1[1];
          if(typeof ty2 === "number")
           switch$3 = 1;
          else
           switch(ty2[0])
            {case 2:var rest2$1=ty2[1];return [2,trans(_Bl_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_Bm_=ty1[1];
          if(typeof ty2 === "number")
           switch$4 = 1;
          else
           switch(ty2[0])
            {case 3:var rest2$2=ty2[1];return [3,trans(_Bm_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_Bn_=ty1[1];
          if(typeof ty2 === "number")
           switch$5 = 1;
          else
           switch(ty2[0])
            {case 4:var rest2$3=ty2[1];return [4,trans(_Bn_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_Bo_=ty1[1];
          if(typeof ty2 === "number")
           switch$6 = 1;
          else
           switch(ty2[0])
            {case 5:var rest2$4=ty2[1];return [5,trans(_Bo_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_Bp_=ty1[1];
          if(typeof ty2 === "number")
           switch$7 = 1;
          else
           switch(ty2[0])
            {case 6:var rest2$5=ty2[1];return [6,trans(_Bp_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_Bq_=ty1[1];
          if(typeof ty2 === "number")
           switch$8 = 1;
          else
           switch(ty2[0])
            {case 7:var rest2$6=ty2[1];return [7,trans(_Bq_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_Br_=ty1[2],_Bs_=ty1[1];
          if(typeof ty2 === "number")
           switch$9 = 1;
          else
           switch(ty2[0])
            {case 8:
              var rest2$7=ty2[2],ty2$0=ty2[1],_Bt_=trans(_Br_,rest2$7);
              return [8,trans(_Bs_,ty2$0),_Bt_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_ab_];
          break;
         case 9:
          var switch$10=0,_Bu_=ty1[3],_Bv_=ty1[2],_Bw_=ty1[1];
          if(typeof ty2 === "number")
           switch$10 = 1;
          else
           switch(ty2[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=ty2[3],
               ty22=ty2[2],
               ty21=ty2[1],
               ty=trans(symm(_Bv_),ty21),
               match=fmtty_rel_det(ty),
               f4=match[4],
               f2=match[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_Bw_,ty22,trans(_Bu_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_ac_];
          break;
         case 10:
          var _Bx_=ty1[1];
          if(typeof ty2 !== "number" && 10 === ty2[0])
           {var rest2$9=ty2[1];return [10,trans(_Bx_,rest2$9)]}
          throw [0,Assert_failure,_ad_];
         case 11:
          var switch$11=0,_By_=ty1[1];
          if(typeof ty2 === "number")
           switch$11 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:var rest2$10=ty2[1];return [11,trans(_By_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_ae_];
          break;
         case 12:
          var switch$12=0,_Bz_=ty1[1];
          if(typeof ty2 === "number")
           switch$12 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=ty2[1];return [12,trans(_Bz_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_af_];
          break;
         case 13:
          var switch$13=0,_BA_=ty1[1];
          if(typeof ty2 === "number")
           switch$13 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=ty2[1];return [13,trans(_BA_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_ag_];
          break;
         default:
          var switch$14=0,_BB_=ty1[1];
          if(typeof ty2 === "number")
           switch$14 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=ty2[1];return [14,trans(_BB_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_ah_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_X_];
        case 1:throw [0,Assert_failure,_Y_];
        case 2:throw [0,Assert_failure,_Z_];
        case 3:throw [0,Assert_failure,___];
        case 4:throw [0,Assert_failure,_$_];
        case 5:throw [0,Assert_failure,_V_];
        case 6:throw [0,Assert_failure,_W_];
        default:throw [0,Assert_failure,_aa_]}}
    var Type_mismatch=[248,_ai_,caml_fresh_oo_id(0)];
    function type_padding(pad,fmtty)
     {if(typeof pad === "number")
       return [0,0,fmtty];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],fmtty]}
        if(typeof fmtty !== "number" && 2 === fmtty[0])
         {var rest=fmtty[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _Bi_=match[2];
          if(typeof _Bi_ !== "number" && 2 === _Bi_[0])
           {var rest=_Bi_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,fmtty)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,fmtty)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             sub_fmtty_rest=sub_fmtty[1],
             match=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match[2],
             sub_fmtty_rest$0=match[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$0[2],
             sub_fmtty_rest$2=match$0[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$1=fmtty[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$1[2],
             sub_fmtty_rest$4=match$1[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof fmtty !== "number" && 3 === fmtty[0])
           {var
             fmtty_rest$2=fmtty[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$2[2],
             sub_fmtty_rest$6=match$2[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof fmtty !== "number" && 4 === fmtty[0])
           {var
             fmtty_rest$3=fmtty[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$3[2],
             sub_fmtty_rest$8=match$3[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof fmtty !== "number" && 5 === fmtty[0])
           {var
             fmtty_rest$4=fmtty[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$4[2],
             sub_fmtty_rest$10=match$4[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof fmtty !== "number" && 6 === fmtty[0])
           {var
             fmtty_rest$5=fmtty[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$5[2],
             sub_fmtty_rest$12=match$5[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$6=fmtty[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$6[2],
             sub_fmtty_rest$14=match$6[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$7=fmtty[2],
             sub2_fmtty=fmtty[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$7[2],
             sub_fmtty_rest$16=match$7[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[3],
             sub2_fmtty$1=fmtty[2],
             sub1_fmtty=fmtty[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _Bg_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_Bg_))
             throw Type_mismatch;
            var _Bh_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_Bh_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$8=fmtty_rel_det(sub_fmtty$0),
             f4=match$8[4],
             f2=match$8[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$9=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$9[2],
             sub_fmtty_rest$18=match$9[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$10=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$10[2],
             sub_fmtty_rest$20=match$10[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$11[2],
             sub_fmtty_rest$22=match$11[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$12[2],
             sub_fmtty_rest$24=match$12[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 14 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$13[2],
             sub_fmtty_rest$26=match$13[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _A2_=match$1[2],
           _A1_=match$1[1];
          if(typeof _A2_ !== "number" && 1 === _A2_[0])
           {var
             fmtty_rest$1=_A2_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_A1_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _A4_=match$3[2],
           _A3_=match$3[1];
          if(typeof _A4_ !== "number" && 1 === _A4_[0])
           {var
             fmtty_rest$2=_A4_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_A3_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _A6_=match$5[3],
           _A5_=match$5[1];
          if(typeof _A6_ !== "number" && 2 === _A6_[0])
           {var
             fmtty_rest$3=_A6_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_A5_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _A8_=match$7[3],
           _A7_=match$7[1];
          if(typeof _A8_ !== "number" && 3 === _A8_[0])
           {var
             fmtty_rest$4=_A8_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_A7_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _A__=match$9[3],
           _A9_=match$9[1];
          if(typeof _A__ !== "number" && 4 === _A__[0])
           {var
             fmtty_rest$5=_A__[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_A9_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _Ba_=match$11[3],
           _A$_=match$11[1];
          if(typeof _Ba_ !== "number" && 5 === _Ba_[0])
           {var
             fmtty_rest$6=_Ba_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_A$_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _Bc_=match$13[3],
           _Bb_=match$13[1];
          if(typeof _Bc_ !== "number" && 6 === _Bc_[0])
           {var
             fmtty_rest$7=_Bc_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_Bb_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _Be_=match$15[2],
           _Bd_=match$15[1];
          if(typeof _Be_ !== "number" && 7 === _Be_[0])
           {var
             fmtty_rest$8=_Be_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_Bd_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _Bf_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_Bf_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          return type_formatting_gen(formatting_gen,fmt_rest$17,fmtty);
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];return type_ignored_param(ign,rest,fmtty)
         }
      throw Type_mismatch}
    function type_formatting_gen(formatting_gen,fmt0,fmtty0)
     {if(0 === formatting_gen[0])
       {var
         match=formatting_gen[1],
         str=match[2],
         fmt1=match[1],
         match$0=type_format_gen(fmt1,fmtty0),
         fmtty2=match$0[2],
         fmt2=match$0[1],
         match$1=type_format_gen(fmt0,fmtty2),
         fmtty3=match$1[2],
         fmt3=match$1[1];
        return [0,[18,[0,[0,fmt2,str]],fmt3],fmtty3]}
      var
       match$2=formatting_gen[1],
       str$0=match$2[2],
       fmt1$0=match$2[1],
       match$3=type_format_gen(fmt1$0,fmtty0),
       fmtty2$0=match$3[2],
       fmt2$0=match$3[1],
       match$4=type_format_gen(fmt0,fmtty2$0),
       fmtty3$0=match$4[2],
       fmt3$0=match$4[1];
      return [0,[18,[1,[0,fmt2$0,str$0]],fmt3$0],fmtty3$0]}
    function type_ignored_param(ign,fmt,fmtty)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return type_ignored_param_one(ign,fmt,fmtty);
         case 1:return type_ignored_param_one(ign,fmt,fmtty);
         case 2:
          if(typeof fmtty !== "number" && 14 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             match=type_format_gen(fmt,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[23,2,fmt$0],fmtty$0]}
          throw Type_mismatch;
         default:return type_ignored_param_one(ign,fmt,fmtty)}
      else
       switch(ign[0])
        {case 0:return type_ignored_param_one(ign,fmt,fmtty);
         case 1:return type_ignored_param_one(ign,fmt,fmtty);
         case 2:return type_ignored_param_one(ign,fmt,fmtty);
         case 3:return type_ignored_param_one(ign,fmt,fmtty);
         case 4:return type_ignored_param_one(ign,fmt,fmtty);
         case 5:return type_ignored_param_one(ign,fmt,fmtty);
         case 6:return type_ignored_param_one(ign,fmt,fmtty);
         case 7:return type_ignored_param_one(ign,fmt,fmtty);
         case 8:
          var sub_fmtty=ign[2],pad_opt=ign[1];
          return type_ignored_param_one([8,pad_opt,sub_fmtty],fmt,fmtty);
         case 9:
          var
           sub_fmtty$0=ign[2],
           pad_opt$0=ign[1],
           _A0_=type_ignored_format_substituti(sub_fmtty$0,fmt,fmtty),
           match$0=_A0_[2],
           fmtty$1=match$0[2],
           fmt$1=match$0[1],
           sub_fmtty$1=_A0_[1];
          return [0,[23,[9,pad_opt$0,sub_fmtty$1],fmt$1],fmtty$1];
         case 10:return type_ignored_param_one(ign,fmt,fmtty);
         default:return type_ignored_param_one(ign,fmt,fmtty)}}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format(fmt,fmtty)
     {var _AZ_=type_format_gen(fmt,fmtty);
      if(typeof _AZ_[2] === "number"){var fmt$0=_AZ_[1];return fmt$0}
      throw Type_mismatch}
    function recast(fmt,fmtty){return type_format(fmt,erase_rel(symm(fmtty)))}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _AY_=2 === padty$0?48:32,res=make$0(width$0,_AY_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return bts(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make$0(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return bts(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make$0(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return bts(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make$0(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return bts(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped$1(str),
       l=caml_ml_string_length(str$0),
       res=make$0(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return bts(res)}
    function format_of_iconv(param)
     {switch(param)
       {case 1:return _ak_;
        case 2:return _al_;
        case 4:return _an_;
        case 5:return _ao_;
        case 6:return _ap_;
        case 7:return _aq_;
        case 8:return _ar_;
        case 9:return _as_;
        case 10:return _at_;
        case 11:return _au_;
        case 0:
        case 13:return _aj_;
        case 3:
        case 14:return _am_;
        default:return _av_}}
    function format_of_iconvL(param)
     {switch(param)
       {case 1:return _ax_;
        case 2:return _ay_;
        case 4:return _aA_;
        case 5:return _aB_;
        case 6:return _aC_;
        case 7:return _aD_;
        case 8:return _aE_;
        case 9:return _aF_;
        case 10:return _aG_;
        case 11:return _aH_;
        case 0:
        case 13:return _aw_;
        case 3:
        case 14:return _az_;
        default:return _aI_}}
    function format_of_iconvl(param)
     {switch(param)
       {case 1:return _aK_;
        case 2:return _aL_;
        case 4:return _aN_;
        case 5:return _aO_;
        case 6:return _aP_;
        case 7:return _aQ_;
        case 8:return _aR_;
        case 9:return _aS_;
        case 10:return _aT_;
        case 11:return _aU_;
        case 0:
        case 13:return _aJ_;
        case 3:
        case 14:return _aM_;
        default:return _aV_}}
    function format_of_iconvn(param)
     {switch(param)
       {case 1:return _aX_;
        case 2:return _aY_;
        case 4:return _a0_;
        case 5:return _a1_;
        case 6:return _a2_;
        case 7:return _a3_;
        case 8:return _a4_;
        case 9:return _a5_;
        case 10:return _a6_;
        case 11:return _a7_;
        case 0:
        case 13:return _aW_;
        case 3:
        case 14:return _aZ_;
        default:return _a8_}}
    function format_of_fconv(fconv,prec)
     {var
       prec$0=abs(prec),
       symb=char_of_fconv(_a9_,fconv),
       buf=buffer_create(16);
      buffer_add_char(buf,37);
      bprint_fconv_flag(buf,fconv);
      buffer_add_char(buf,46);
      buffer_add_string(buf,to_string(prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_AT_=caml_ml_string_length(s) - 1 | 0,_AS_=0;
        if(! (_AT_ < 0))
         {var i$0=_AS_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _AX_=i$0 + 1 | 0;
            if(_AT_ !== i$0){var i$0=_AX_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _AV_=caml_ml_string_length(s) - 1 | 0,
         _AU_=0;
        if(! (_AV_ < 0))
         {var i=_AU_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _AW_=i + 1 | 0;
            if(_AV_ !== i){var i=_AW_;continue}
            break}}
        return bts(buf)}
      return s}
    function convert_int(iconv,n)
     {return transform_int_alt
              (iconv,caml_format_int(format_of_iconv(iconv),n))}
    function convert_int32(iconv,n)
     {return transform_int_alt
              (iconv,caml_format_int(format_of_iconvl(iconv),n))}
    function convert_nativeint(iconv,n)
     {return transform_int_alt
              (iconv,caml_format_int(format_of_iconvn(iconv),n))}
    function convert_int64(iconv,n)
     {return transform_int_alt
              (iconv,caml_int64_format(format_of_iconvL(iconv),n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function add_dot_if_needed(str)
       {var len=caml_ml_string_length(str);
        function is_valid(i)
         {var i$0=i;
          for(;;)
           {if(i$0 === len)return 0;
            var match=caml_string_get(str,i$0),_AR_=match - 46 | 0,switch$0=0;
            if(23 < _AR_ >>> 0)
             {if(55 === _AR_)switch$0 = 1}
            else
             if(21 < (_AR_ - 1 | 0) >>> 0)switch$0 = 1;
            if(switch$0)return 1;
            var i$1=i$0 + 1 | 0,i$0=i$1;
            continue}}
        return is_valid(0)?str:cat(str,_a__)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_a$_:_ba_:4 <= match?_bb_:str}
      switch(fconv[2])
       {case 5:
         var str=caml_format_float(format_of_fconv(fconv,prec),x);
         return caml_special_val(add_dot_if_needed(str));
        case 6:return hex(0);
        case 7:return uppercase_ascii$1(hex(0));
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function format_caml_char(c)
     {var
       str=escaped(c),
       l=caml_ml_string_length(str),
       res=make$0(l + 2 | 0,39);
      caml_blit_string(str,0,res,1,l);
      return bts(res)}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var new_acc=[4,acc$0,format_caml_char(c)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           return make_float_padding_precision
                   (k$0,acc$0,rest$7,pad$5,prec$3,fconv);
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _AP_=fmt$0[1];
           if(0 === _AP_[0])
            {var
              rest$13=fmt$0[2],
              match=_AP_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_AP_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bc_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bd_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_be_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param(counter$1,k$0,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param,[0,k$0,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _AQ_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_AQ_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_AQ_])}}
    function make_ignored_param(counter,k,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:throw [0,Assert_failure,_bf_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,acc,fmtty,fmt)}
          return caml_trampoline_return(make_from_fmtty$0,[0,k,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_AO_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bg_];
         default:throw [0,Assert_failure,_bh_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _AN_=[8,acc,_bi_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_AN_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_AN_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _AM_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_AM_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_AM_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,prec,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _AJ_=pad[2],_AK_=pad[1];
          if(typeof prec === "number")
           return prec
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_AK_,_AJ_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_AK_,_AJ_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=prec[1];
          return function(x)
           {var
             str=
              fix_padding
               (_AK_,_AJ_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _AL_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_AL_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_AL_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=prec[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_AL_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_float_padding_precision(k,acc,fmt,pad,prec,fconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var str=convert_float(fconv,p,x);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var
                     str=
                      convert_float(fconv,default_float_precision(fconv),x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var str=convert_float(fconv,p,x);
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _AG_=pad[2],_AH_=pad[1];
          if(typeof prec === "number")
           return prec
                   ?function(p,x)
                     {var str=fix_padding(_AH_,_AG_,convert_float(fconv,p,x));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var
                       str=convert_float(fconv,default_float_precision(fconv),x),
                       str$0=fix_padding(_AH_,_AG_,str);
                      return make_printf(k,[4,acc,str$0],fmt)};
          var p$0=prec[1];
          return function(x)
           {var str=fix_padding(_AH_,_AG_,convert_float(fconv,p$0,x));
            return make_printf(k,[4,acc,str],fmt)}}
        var _AI_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(w,p,x)
                   {var str=fix_padding(_AI_,w,convert_float(fconv,p,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var
                     str=convert_float(fconv,default_float_precision(fconv),x),
                     str$0=fix_padding(_AI_,w,str);
                    return make_printf(k,[4,acc,str$0],fmt)};
        var p$1=prec[1];
        return function(w,x)
         {var str=fix_padding(_AI_,w,convert_float(fconv,p$1,x));
          return make_printf(k,[4,acc,str],fmt)}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _AE_=acc$0[2],_AF_=acc$0[1];
           if(0 === _AE_[0])
            {var acc$1=_AE_[1];
             output_acc(o,_AF_);
             output_string(o,_bj_);
             var acc$0=acc$1;
             continue}
           var acc$2=_AE_[1];
           output_acc(o,_AF_);
           output_string(o,_bk_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return _f_(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];output_acc(o,p$1);return _e_(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _AC_=acc$0[2],_AD_=acc$0[1];
           if(0 === _AC_[0])
            {var acc$1=_AC_[1];
             strput_acc(b,_AD_);
             add_string(b,_bl_);
             var acc$0=acc$1;
             continue}
           var acc$2=_AC_[1];
           strput_acc(b,_AD_);
           add_string(b,_bm_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function kfprintf(k,o,param)
     {var fmt=param[1],_AB_=0;
      return make_printf
              (function(acc){output_acc(o,acc);return caml_call1(k,o)},
               _AB_,
               fmt)}
    function fprintf(oc,fmt){return kfprintf(function(_AA_){return 0},oc,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var buf=create(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var printers=make(0);
    function field(x,i)
     {var f=x[1 + i];
      return is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(sprintf(_bn_),f)
                :caml_obj_tag(f) === 253?string_of_float(f):_bo_
              :caml_call1(sprintf(_bp_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bq_;
      var _Ay_=other_fields(x,i + 1 | 0),_Az_=field(x,i);
      return caml_call2(sprintf(_br_),_Az_,_Ay_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _Av_=other_fields(x,2),_Aw_=field(x,1);
        return caml_call2(sprintf(_bs_),_Aw_,_Av_)}
      switch(match)
       {case 0:return _bt_;
        case 1:return _bu_;
        default:var _Ax_=field(x,1);return caml_call1(sprintf(_bv_),_Ax_)}}
    function use_printers(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,x);switch$0 = 1}
            catch(_Au_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      return conv(get(printers))}
    function to_string_default(x)
     {if(x === Out_of_memory)return _bw_;
      if(x === Stack_overflow)return _bx_;
      if(x[1] === Match_failure)
       {var match=x[2],char$0=match[3],line=match[2],file=match[1];
        return caml_call5
                (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_by_)}
      if(x[1] === Assert_failure)
       {var
         match$0=x[2],
         char$1=match$0[3],
         line$0=match$0[2],
         file$0=match$0[1];
        return caml_call5
                (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bz_)}
      if(x[1] === Undefined_recursive_module)
       {var
         match$1=x[2],
         char$2=match$1[3],
         line$1=match$1[2],
         file$1=match$1[1];
        return caml_call5
                (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bA_)}
      if(0 === caml_obj_tag(x))
       {var constructor=x[1][1];return cat(constructor,fields(x))}
      return x[1]}
    function to_string$0(e)
     {var match=use_printers(e);
      if(match){var s=match[1];return s}
      return to_string_default(e)}
    function convert_raw_backtrace(bt)
     {var _At_=[0,caml_convert_raw_backtrace(bt)];return _At_}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise?0 === pos?_bB_:_bC_:0 === pos?_bD_:_bE_}
      if(0 === slot[0])
       {var
         _Al_=slot[5],
         _Am_=slot[4],
         _An_=slot[3],
         _Ao_=slot[6]?_bF_:_bH_,
         _Ap_=slot[2],
         _Aq_=slot[7],
         _Ar_=info(slot[1]);
        return [0,
                caml_call7(sprintf(_bG_),_Ar_,_Aq_,_Ap_,_Ao_,_An_,_Am_,_Al_)]}
      if(slot[1])return 0;
      var _As_=info(0);
      return [0,caml_call1(sprintf(_bI_),_As_)]}
    function print_exception_backtrace(outchan,backtrace)
     {if(backtrace)
       {var a=backtrace[1],_Aj_=a.length - 1 - 1 | 0,_Ai_=0;
        if(! (_Aj_ < 0))
         {var i=_Ai_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bJ_),str)}
            var _Ak_=i + 1 | 0;
            if(_Aj_ !== i){var i=_Ak_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bK_)}
    function print_raw_backtrace(outchan,raw_backtrace)
     {return print_exception_backtrace
              (outchan,convert_raw_backtrace(raw_backtrace))}
    function register_printer(fn)
     {for(;;)
       {var
         old_printers=get(printers),
         new_printers=[0,fn,old_printers],
         success=compare_and_set(printers,old_printers,new_printers),
         _Ah_=1 - success;
        if(_Ah_)continue;
        return _Ah_}}
    var errors=_bL_.slice();
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _Af_=to_string$0(exn);
      caml_call1(eprintf(_bM_),_Af_);
      print_raw_backtrace(stderr,raw_backtrace);
      var status=caml_ml_debug_info_status(0);
      if(status < 0)
       {var _Ag_=abs(status);
        prerr_endline(caml_check_bound(errors,_Ag_)[1 + _Ag_])}
      return _f_(stderr)}
    var empty_backtrace=[0];
    function try_get_raw_backtrace(param)
     {var _Ae_=caml_get_exception_raw_backtrace(0);return _Ae_}
    function handle_uncaught_exception(exn,debugger_in_use)
     {try
       {var
         raw_backtrace=
          debugger_in_use?empty_backtrace:try_get_raw_backtrace(0);
        try {do_at_exit(0)}catch(_Ad_){}
        try
         {var _Ab_=default_uncaught_exception_han(exn,raw_backtrace),_Aa_=_Ab_}
        catch(exn$0)
         {exn$0 = caml_wrap_exception(exn$0);
          var raw_backtrace$0=try_get_raw_backtrace(0),_z__=to_string$0(exn);
          caml_call1(eprintf(_bO_),_z__);
          print_raw_backtrace(stderr,raw_backtrace);
          var _z$_=to_string$0(exn$0);
          caml_call1(eprintf(_bP_),_z$_);
          print_raw_backtrace(stderr,raw_backtrace$0);
          var _Aa_=_f_(stderr)}
        return _Aa_}
      catch(_Ac_)
       {_Ac_ = caml_wrap_exception(_Ac_);
        if(_Ac_ === Out_of_memory)return prerr_endline(_bN_);
        throw _Ac_}}
    function handle_uncaught_exception$0(exn,debugger_in_use)
     {try
       {var _z8_=handle_uncaught_exception(exn,debugger_in_use);return _z8_}
      catch(_z9_){return 0}}
    caml_register_named_value
     (caml_string_of_jsbytes("Printexc.handle_uncaught_exception"),
      handle_uncaught_exception$0);
    var Finally_raised=[248,_bQ_,caml_fresh_oo_id(0)];
    register_printer
     (function(param)
       {if(param[1] === Finally_raised)
         {var exn=param[2];return [0,cat(_bR_,to_string$0(exn))]}
        return 0});
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var char$0=12,c_layout=0;
    function create$0(kind,layout,dim)
     {return caml_ba_create(kind,layout,[0,dim])}
    function length(s){return s.length}
    function slice(opt,stop,s)
     {if(opt)var sth=opt[1],start=sth;else var start=0;
      if(stop)
       var stop$0=stop[1],args=[0,start,stop$0];
      else
       var args=[0,start];
      return caml_js_meth_call(s,_bS_,args)}
    function is_empty(s){return 0 === length(s)?1:0}
    var null$0=null,fn=undefined;
    function is_null(v){return v === null$0?1:0}
    function is_undefined(v){return v === fn?1:0}
    function is_none(v){var _z7_=is_null(v);return _z7_?_z7_:is_undefined(v)}
    function to_option(conv,v){return is_none(v)?0:[0,caml_call1(conv,v)]}
    var target=globalThis;
    function create$1(n){return new (target.Array)(n)}
    function message(e){return e.message}
    var Error=[248,_bT_,caml_fresh_oo_id(0)];
    function register_error_exception(param)
     {return register_exception(_bU_,[0,Error,{}])}
    register_error_exception(0);
    var promise=target.Promise;
    function resolve(v){return promise.resolve(v)}
    function await$0(p,k){p.then(k);return 0}
    function bind(p,res){return p.then(res)}
    function then(p,res,rej){return p.then(res,rej)}
    function fut(p){return {"fut":p}}
    function promise$0(f){return f.fut}
    function await$1(f,k){return await$0(promise$0(f),k)}
    function return$0(v){return fut(resolve(v))}
    function bind$0(f,fn)
     {function _z6_(v){return promise$0(caml_call1(fn,v))}
      return fut(bind(promise$0(f),_z6_))}
    function map$1(fn,f)
     {return bind$0(f,function(v){return return$0(caml_call1(fn,v))})}
    function of_promise(ok,error,p)
     {function ok$0(v){return resolve([0,caml_call1(ok,v)])}
      function error$0(e){return resolve([1,caml_call1(error,e)])}
      return fut(then(p,ok$0,error$0))}
    function of_promise$0(ok,v)
     {return of_promise(ok,function(_z5_){return _z5_},v)}
    function let$0(f,fn){return map$1(fn,f)}
    function cons_of_type(param)
     {switch(param)
       {case 0:return target.Int8Array;
        case 1:return target.Int16Array;
        case 2:return target.Int32Array;
        case 3:return target.Uint8Array;
        case 4:return target.Uint8ClampedArray;
        case 5:return target.Uint16Array;
        case 6:return target.Uint32Array;
        case 7:return target.Float32Array;
        default:return target.Float64Array}}
    function of_buffer(t,opt,length,b)
     {if(opt)var sth=opt[1],byte_offset=sth;else var byte_offset=0;
      if(length)
       var l=length[1],args=[0,b,byte_offset,l];
      else
       var args=[0,b,byte_offset];
      return caml_js_new(cons_of_type(t),args)}
    function array_buffer(b)
     {var _z3_=b.arrayBuffer();
      return of_promise$0(function(_z4_){return _z4_},_z3_)}
    var decode=target.decodeURI,url=target.URL;
    function pct_dec(v){return decode(v)}
    function query(u)
     {var q=pct_dec(u.search);return is_empty(q)?q:slice(_bV_,0,q)}
    var usp=target.URLSearchParams;
    function find(k,p)
     {var _z1_=p.get(k);return to_option(function(_z2_){return _z2_},_z1_)}
    function of_jstr(s){return new usp(s)}
    var document=target.document;
    function _bW_(e,n){e.appendChild(n);return 0}
    function txt(opt,s)
     {if(opt)var sth=opt[1],d=sth;else var d=document;
      return d.createTextNode(s)}
    function delete_children(e)
     {for(;;)
       {if(is_null(e.firstChild))return 0;
        e.removeChild(e.firstChild);
        continue}}
    function set_children(e,l)
     {delete_children(e);return iter(function(_z0_){return _bW_(e,_z0_)},l)}
    function find_el_by_id(d,id)
     {var _zY_=d.getElementById(id);
      return to_option(function(_zZ_){return _zZ_},_zY_)}
    function call(c,meth,args){caml_js_meth_call(c,meth,args);return 0}
    var _bX_=target.console;
    function msg_to_jv_array(msg)
     {function loop(a,i,param)
       {var i$0=i,param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[2],v=param$0[1];
            a[i$0] = v;
            var i$1=i$0 + 1 | 0,i$0=i$1,param$0=param$1;
            continue}
          return a}}
      return caml_js_to_array(loop(create$1(0),0,msg))}
    function log(msg){return call(_bX_,_bY_,msg_to_jv_array(msg))}
    function location(w){return new url(w.location)}
    function now_ms(p){return p.now()}
    var performance=target.performance,window=target.window;
    function blob(r)
     {var _zW_=r.blob();return of_promise$0(function(_zX_){return _zX_},_zW_)}
    var fetch=target.fetch;
    function url$0(opt,url)
     {if(opt)var sth=opt[1],init=sth;else var init={};
      var _zS_=fetch(url,init);
      function _zT_(_zV_){return _zV_}
      return function(_zU_){return of_promise$0(_zT_,_zU_)}(_zS_)}
    function create$2(size){return create$0(char$0,c_layout,size)}
    create$2(0);
    function MakeInfix(B)
     {var
       symbol=B[8],
       symbol$0=B[9],
       symbol$1=B[10],
       symbol$2=B[11],
       symbol$3=B[6];
      function symbol$4(a,b){return 1 - caml_call2(B[6],a,b)}
      var
       symbol$5=B[7],
       mod=B[12],
       land=B[15],
       lor=B[16],
       lxor=B[17],
       lsl=B[18],
       lsr=B[19];
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              symbol$5,
              mod,
              land,
              lor,
              lxor,
              lsl,
              lsr]}
    var max_int=255,zero=0,one=1;
    function equal(x,y){return 0 === compare(x,y)?1:0}
    function le(x,y){return caml_lessequal(x,y)}
    function add(x,y){return (x + y | 0) & 255}
    function sub$0(x,y){return (x - y | 0) & 255}
    function mul(x,y){return caml_mul(x,y) & 255}
    function div(x,y){return caml_div(x,y) & 255}
    function rem(x,y){return caml_mod(x,y) & 255}
    function succ(x){return add(x,one)}
    function pred(x){return sub$0(x,one)}
    function logand(x,y){return x & y}
    function logor(x,y){return x | y}
    function logxor(_zR_,_zQ_){return _zR_ ^ _zQ_}
    function shift_left(x,y){return x << y & 255}
    function shift_right(_zP_,_zO_){return _zP_ >>> _zO_ | 0}
    function of_int(x){return x & 255}
    function of_char(c){return c}
    function to_char(t){return t}
    var
     show=sprintf(_bZ_),
     Infix=
      MakeInfix
       ([0,
         show,
         max_int,
         zero,
         one,
         compare,
         equal,
         le,
         add,
         sub$0,
         mul,
         div,
         rem,
         succ,
         pred,
         logand,
         logor,
         logxor,
         shift_left,
         shift_right,
         of_int,
         function(_zN_){return _zN_}]),
     symbol=Infix[1],
     symbol$0=Infix[2],
     symbol$1=Infix[5],
     symbol$2=Infix[6],
     land=Infix[9],
     lor=Infix[10],
     lxor=Infix[11],
     lsl=Infix[12],
     lsr=Infix[13],
     max_int$0=65535,
     zero$0=0,
     one$0=1;
    function equal$0(x,y){return 0 === compare(x,y)?1:0}
    function le$0(x,y){return caml_lessequal(x,y)}
    function add$0(x,y){return (x + y | 0) & 65535}
    function sub$1(x,y){return (x - y | 0) & 65535}
    function mul$0(x,y){return caml_mul(x,y) & 65535}
    function div$0(x,y){return caml_div(x,y) & 65535}
    function rem$0(x,y){return caml_mod(x,y) & 65535}
    function succ$0(x){return add$0(x,one$0)}
    function pred$0(x){return sub$1(x,one$0)}
    function logand$0(x,y){return x & y}
    function logor$0(x,y){return x | y}
    function logxor$0(_zM_,_zL_){return _zM_ ^ _zL_}
    function shift_left$0(x,y){return x << y & 65535}
    function shift_right$0(_zK_,_zJ_){return _zK_ >>> _zJ_ | 0}
    function of_int$0(x){return x & 65535}
    var
     show$0=sprintf(_b0_),
     Infix$0=
      MakeInfix
       ([0,
         show$0,
         max_int$0,
         zero$0,
         one$0,
         compare,
         equal$0,
         le$0,
         add$0,
         sub$1,
         mul$0,
         div$0,
         rem$0,
         succ$0,
         pred$0,
         logand$0,
         logor$0,
         logxor$0,
         shift_left$0,
         shift_right$0,
         of_int$0,
         function(_zI_){return _zI_}]),
     symbol$3=Infix$0[1],
     symbol$4=Infix$0[2],
     symbol$5=Infix$0[5],
     symbol$6=Infix$0[7],
     land$0=Infix$0[9],
     lor$0=Infix$0[10],
     lsl$0=Infix$0[12];
    function of_uint8(x){return of_int$0(x)}
    function of_byte(b){return b}
    function is_neg(t){return 0 !== (t & 128)?1:0}
    function abs$1(t){return is_neg(t)?(t - 1 | 0) ^ 255:t}
    function to_int(t){return is_neg(t)?- abs$1(t) | 0:t}
    function _b1_(_zH_){return _zH_}
    function _b2_(_zG_){return _zG_}
    function create$3(ie_addr,if_addr)
     {return [0,[0,ie_addr,0,0,0,0,0],[0,if_addr,0,0,0,0,0]]}
    function update(state,type,b)
     {switch(type)
       {case 0:return [0,state[1],b,state[3],state[4],state[5],state[6]];
        case 1:return [0,state[1],state[2],b,state[4],state[5],state[6]];
        case 2:return [0,state[1],state[2],state[3],b,state[5],state[6]];
        case 3:return [0,state[1],state[2],state[3],state[4],b,state[6]];
        default:return [0,state[1],state[2],state[3],state[4],state[5],b]}}
    function request(t,type){t[2] = update(t[2],type,1);return 0}
    function clear(t,type){t[2] = update(t[2],type,0);return 0}
    function next(t)
     {if(t[1][2] && t[2][2])return _b3_;
      if(t[1][3] && t[2][3])return _b4_;
      if(t[1][4] && t[2][4])return _b5_;
      if(t[1][5] && t[2][5])return _b6_;
      if(t[1][6] && t[2][6])return _b7_;
      return 0}
    function accepts(t,addr)
     {var _zF_=caml_call2(symbol$5,t[1][1],addr);
      return _zF_?_zF_:caml_call2(symbol$5,t[2][1],addr)}
    function byte_of_state(s)
     {var
       _zA_=s[6]?16:0,
       _zB_=s[5]?8:0,
       _zC_=s[4]?4:0,
       _zD_=s[3]?2:0,
       _zE_=s[2]?1:0;
      return of_int(_zE_ | _zD_ | _zC_ | _zB_ | _zA_)}
    function read_byte(t,addr)
     {if(caml_call2(symbol$5,addr,t[1][1]))return byte_of_state(t[1]);
      if(caml_call2(symbol$5,addr,t[2][1]))
       {var _zz_=byte_of_state(t[2]);return caml_call2(lor,of_int(224),_zz_)}
      throw [0,Assert_failure,_b8_]}
    function state_of_byte(b,addr)
     {function bools_of_byte(n)
       {var
         _zq_=of_int(0),
         _zr_=caml_call2(symbol$2,caml_call2(land,n,of_int(1)),_zq_),
         _zs_=of_int(0),
         _zt_=caml_call2(symbol$2,caml_call2(land,n,of_int(2)),_zs_),
         _zu_=of_int(0),
         _zv_=caml_call2(symbol$2,caml_call2(land,n,of_int(4)),_zu_),
         _zw_=of_int(0),
         _zx_=caml_call2(symbol$2,caml_call2(land,n,of_int(8)),_zw_),
         _zy_=of_int(0);
        return [0,
                caml_call2(symbol$2,caml_call2(land,n,of_int(16)),_zy_),
                _zx_,
                _zv_,
                _zt_,
                _zr_]}
      var
       match=bools_of_byte(b),
       b0=match[5],
       b1=match[4],
       b2=match[3],
       b3=match[2],
       b4=match[1];
      return [0,addr,b0,b1,b2,b3,b4]}
    function write_byte(t,addr,data)
     {if(caml_equal(addr,t[1][1]))
       {t[1] = state_of_byte(data,t[1][1]);return 0}
      if(caml_equal(addr,t[2][1]))
       {t[2] = state_of_byte(data,t[2][1]);return 0}
      throw [0,Assert_failure,_b9_]}
    function create$4(div_addr,tima_addr,tma_addr,tac_addr,ic)
     {return [0,div_addr,tima_addr,tma_addr,tac_addr,ic,0,0,0,0,0,0]}
    function run(t,mcycles)
     {var
       before_mcycle_count=t[6],
       after_mcycle_count=before_mcycle_count + mcycles | 0;
      t[6] = after_mcycle_count % 65536 | 0;
      var
       quotient_diff=
        (after_mcycle_count / 64 | 0) - (before_mcycle_count / 64 | 0) | 0;
      t[7] = (t[7] + quotient_diff | 0) % 256 | 0;
      var _zl_=t[8];
      if(_zl_)
       {switch(t[9])
         {case 0:var divider=256;break;
          case 1:var divider=4;break;
          case 2:var divider=16;break;
          default:var divider=64}
        var
         _zm_=caml_div(before_mcycle_count,divider),
         quotient_diff$0=caml_div(after_mcycle_count,divider) - _zm_ | 0,
         before_tima_counter=t[11];
        t[11] = (t[11] + quotient_diff$0 | 0) % 256 | 0;
        var
         after_tima_counter=t[11],
         _zn_=after_tima_counter < before_tima_counter?1:0,
         _zo_=_zn_?(request(t[5],2),t[11] = t[10],0):_zn_,
         _zp_=_zo_}
      else
       var _zp_=_zl_;
      return _zp_}
    function accepts$0(t,addr)
     {var _zh_=caml_equal(addr,t[1]);
      if(_zh_)
       var _zi_=_zh_;
      else
       {var _zj_=caml_equal(addr,t[2]);
        if(_zj_)
         var _zi_=_zj_;
        else
         var _zk_=caml_equal(addr,t[3]),_zi_=_zk_ || caml_equal(addr,t[4])}
      return _zi_}
    function read_byte$0(t,addr)
     {function byte_of_frequency(param)
       {switch(param)
         {case 0:return of_int(0);
          case 1:return of_int(1);
          case 2:return of_int(2);
          default:return of_int(3)}}
      if(caml_equal(addr,t[1]))return of_int(t[7]);
      if(caml_equal(addr,t[2]))return of_int(t[11]);
      if(caml_equal(addr,t[3]))return of_int(t[10]);
      if(caml_equal(addr,t[4]))
       {var _zg_=t[8]?4:0,enable_bit=of_int(_zg_);
        return caml_call2(land,enable_bit,byte_of_frequency(t[9]))}
      throw [0,Assert_failure,_b__]}
    function write_byte$0(t,addr,data)
     {function frequency_of_byte(byte$0)
       {var byte$1=_b2_(byte$0),match=byte$1 & 3;
        if(3 < match >>> 0)throw [0,Assert_failure,_b$_];
        switch(match)
         {case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}}
      if(caml_equal(addr,t[1])){t[7] = 0;t[6] = 0;return 0}
      if(caml_equal(addr,t[2])){t[11] = _b2_(data);return 0}
      if(caml_equal(addr,t[3])){t[10] = _b2_(data);return 0}
      if(caml_equal(addr,t[4]))
       {if(caml_call2(symbol$2,caml_call2(land,data,of_int(4)),zero))t[8] = 1;
        t[9] = frequency_of_byte(data);
        return 0}
      throw [0,Assert_failure,_ca_]}
    function get_tima_count(t){return of_int(t[11])}
    function create$5
     (area0_start_addr,area0_end_addr,area1_start_addr,area1_end_addr)
     {var _zf_=create_matrix(32,32,zero);
      return [0,
              create_matrix(32,32,zero),
              _zf_,
              area0_start_addr,
              area0_end_addr,
              area1_start_addr,
              area1_end_addr]}
    function get_tile_index(t,area,y,x)
     {if(area)
       {var _zb_=x / 8 | 0,_zc_=y / 8 | 0;
        return caml_check_bound(caml_check_bound(t[2],_zc_)[1 + _zc_],_zb_)
                [1 + _zb_]}
      var _zd_=x / 8 | 0,_ze_=y / 8 | 0;
      return caml_check_bound(caml_check_bound(t[1],_ze_)[1 + _ze_],_zd_)
              [1 + _zd_]}
    function accepts$1(t,addr)
     {var
       _y9_=caml_call2(symbol$6,t[3],addr),
       _y__=_y9_?caml_call2(symbol$6,addr,t[4]):_y9_;
      if(_y__)
       var _y$_=_y__;
      else
       {var _za_=caml_call2(symbol$6,t[5],addr);
        if(_za_)return caml_call2(symbol$6,addr,t[6]);
        var _y$_=_za_}
      return _y$_}
    function read_byte$1(t,addr)
     {if(caml_call2(symbol$6,t[3],addr) && caml_call2(symbol$6,addr,t[4]))
       {var
         offset=_b1_(caml_call2(symbol$4,addr,t[3])),
         _y4_=offset % 32 | 0,
         _y5_=offset / 32 | 0;
        return caml_check_bound(caml_check_bound(t[1],_y5_)[1 + _y5_],_y4_)
                [1 + _y4_]}
      if(caml_call2(symbol$6,t[5],addr) && caml_call2(symbol$6,addr,t[6]))
       {var
         offset$0=_b1_(caml_call2(symbol$4,addr,t[5])),
         _y6_=offset$0 % 32 | 0,
         _y7_=offset$0 / 32 | 0;
        return caml_check_bound(caml_check_bound(t[2],_y7_)[1 + _y7_],_y6_)
                [1 + _y6_]}
      var _y8_=caml_call1(show$0,addr);
      throw [0,Invalid_argument,caml_call1(sprintf(_cb_),_y8_)]}
    function write_byte$1(t,addr,data)
     {if(caml_call2(symbol$6,t[3],addr) && caml_call2(symbol$6,addr,t[4]))
       {var
         offset=_b1_(caml_call2(symbol$4,addr,t[3])),
         _yZ_=offset % 32 | 0,
         _y0_=offset / 32 | 0;
        caml_check_bound(caml_check_bound(t[1],_y0_)[1 + _y0_],_yZ_)[1 + _yZ_]
        =
        data;
        return 0}
      if(caml_call2(symbol$6,t[5],addr) && caml_call2(symbol$6,addr,t[6]))
       {var
         offset$0=_b1_(caml_call2(symbol$4,addr,t[5])),
         _y1_=offset$0 % 32 | 0,
         _y2_=offset$0 / 32 | 0;
        caml_check_bound(caml_check_bound(t[2],_y2_)[1 + _y2_],_y1_)[1 + _y1_]
        =
        data;
        return 0}
      var _y3_=caml_call1(show$0,addr);
      throw [0,Invalid_argument,caml_call1(sprintf(_cc_),_y3_)]}
    function bitflags_of_byte(x)
     {var
       _yS_=caml_call2(symbol$2,caml_call2(land,x,of_int(1)),zero),
       _yT_=caml_call2(symbol$2,caml_call2(land,x,of_int(2)),zero),
       _yU_=caml_call2(symbol$2,caml_call2(land,x,of_int(4)),zero),
       _yV_=caml_call2(symbol$2,caml_call2(land,x,of_int(8)),zero),
       _yW_=caml_call2(symbol$2,caml_call2(land,x,of_int(16)),zero),
       _yX_=caml_call2(symbol$2,caml_call2(land,x,of_int(32)),zero),
       _yY_=caml_call2(symbol$2,caml_call2(land,x,of_int(64)),zero);
      return [0,
              caml_call2(symbol$2,caml_call2(land,x,of_int(128)),zero),
              _yY_,
              _yX_,
              _yW_,
              _yV_,
              _yU_,
              _yT_,
              _yS_]}
    function byte_of_bitflags(b7,b6,b5,b4,b3,b2,b1,b0)
     {var
       _yL_=_h_(b7) << 7,
       _yM_=_h_(b6) << 6,
       _yN_=_h_(b5) << 5,
       _yO_=_h_(b4) << 4,
       _yP_=_h_(b3) << 3,
       _yQ_=_h_(b2) << 2,
       _yR_=_h_(b1) << 1;
      return of_int(_h_(b0) | _yR_ | _yQ_ | _yP_ | _yO_ | _yN_ | _yM_ | _yL_)}
    function bitarray_of_byte(x)
     {var
       _yE_=caml_call2(symbol$2,caml_call2(land,x,of_int(1)),zero),
       _yF_=caml_call2(symbol$2,caml_call2(land,x,of_int(2)),zero),
       _yG_=caml_call2(symbol$2,caml_call2(land,x,of_int(4)),zero),
       _yH_=caml_call2(symbol$2,caml_call2(land,x,of_int(8)),zero),
       _yI_=caml_call2(symbol$2,caml_call2(land,x,of_int(16)),zero),
       _yJ_=caml_call2(symbol$2,caml_call2(land,x,of_int(32)),zero),
       _yK_=caml_call2(symbol$2,caml_call2(land,x,of_int(64)),zero);
      return [0,
              caml_call2(symbol$2,caml_call2(land,x,of_int(128)),zero),
              _yK_,
              _yJ_,
              _yI_,
              _yH_,
              _yG_,
              _yF_,
              _yE_]}
    function byte_of_bitarray(a)
     {var _yA_=_cd_.slice(),_yB_=0;
      function _yC_(acc,i)
       {return acc | _h_(caml_check_bound(a,i)[1 + i]) << (7 - i | 0)}
      return of_int(function(_yD_){return fold_left(_yC_,_yB_,_yD_)}(_yA_))}
    function set_bit(t,param)
     {if(17059 <= param)
       switch(t)
        {case 0:return 1;case 1:return 1;case 2:return 3;default:return 3}
      switch(t)
       {case 0:return 2;case 1:return 3;case 2:return 2;default:return 3}}
    function clear_bit(t,param)
     {if(17059 <= param)
       switch(t)
        {case 0:return 0;case 1:return 0;case 2:return 2;default:return 2}
      switch(t)
       {case 0:return 0;case 1:return 1;case 2:return 0;default:return 1}}
    function get_bit(t,param)
     {if(17059 <= param){if(1 !== t && ! (3 <= t))return 0;return 1}
      return 2 <= t?1:0}
    function create$6(start_addr,end_addr)
     {var tiles=init(384,function(param){return create_matrix(8,8,0)});
      return [0,tiles,start_addr,end_addr]}
    function get_row_pixels(t,area,index,row)
     {if(area)
       var signed_index=to_int(of_byte(index)),index$0=signed_index + 256 | 0;
      else
       var index$0=_b2_(index);
      if(8 <= row)
       {var _yy_=row - 8 | 0,_yz_=index$0 + 1 | 0;
        return caml_check_bound(caml_check_bound(t[1],_yz_)[1 + _yz_],_yy_)
                [1 + _yy_]}
      return caml_check_bound(caml_check_bound(t[1],index$0)[1 + index$0],row)
              [1 + row]}
    function get_pixel(t,area,index,row,col)
     {var row$0=get_row_pixels(t,area,index,row);
      return caml_check_bound(row$0,col)[1 + col]}
    function accepts$2(t,addr)
     {var _yx_=caml_call2(symbol$6,t[2],addr);
      return _yx_?caml_call2(symbol$6,addr,t[3]):_yx_}
    function read_byte$2(t,addr)
     {var
       offset=_b1_(caml_call2(symbol$4,addr,t[2])),
       index=offset / 16 | 0,
       row=(offset % 16 | 0) / 2 | 0,
       hi_or_lo=0 === (offset % 2 | 0)?17059:16161,
       _yu_=
        caml_check_bound(caml_check_bound(t[1],index)[1 + index],row)[1 + row];
      function _yv_(id){return get_bit(id,hi_or_lo)}
      return byte_of_bitarray(function(_yw_){return map$0(_yv_,_yw_)}(_yu_))}
    function write_byte$2(t,addr,data)
     {var
       data_bits=bitarray_of_byte(data),
       offset=_b1_(caml_call2(symbol$4,addr,t[2])),
       index=offset / 16 | 0,
       row=(offset % 16 | 0) / 2 | 0,
       colors_in_row=
        caml_check_bound(caml_check_bound(t[1],index)[1 + index],row)[1 + row],
       hi_or_lo=0 === (offset % 2 | 0)?17059:16161;
      function _yr_(i,b)
       {var id=caml_check_bound(colors_in_row,i)[1 + i];
        return b?set_bit(id,hi_or_lo):clear_bit(id,hi_or_lo)}
      var _ys_=function(_yt_){return mapi(_yr_,_yt_)}(data_bits);
      caml_check_bound(caml_check_bound(t[1],index)[1 + index],row)[1 + row]
      =
      _ys_;
      return 0}
    function create$7(start_addr,end_addr)
     {var
       bytes=
        create$2
         (_b1_
           (caml_call2
             (symbol$3,caml_call2(symbol$4,end_addr,start_addr),one$0)));
      return [0,bytes,start_addr,end_addr]}
    function accepts$3(t,addr)
     {var _yq_=caml_call2(symbol$6,t[2],addr);
      return _yq_?caml_call2(symbol$6,addr,t[3]):_yq_}
    function read_byte$3(t,addr)
     {var offset=_b1_(caml_call2(symbol$4,addr,t[2]));
      return of_char(caml_ba_get_1(t[1],offset))}
    function write_byte$3(t,addr,data)
     {var offset=_b1_(caml_call2(symbol$4,addr,t[2])),_yp_=to_char(data);
      return caml_ba_set_1(t[1],offset,_yp_)}
    function create$8(target,target_start,shadow_start,shadow_end)
     {return [0,target,target_start,shadow_start,shadow_end]}
    function accepts$4(t,addr)
     {var _yo_=caml_call2(symbol$6,t[3],addr);
      return _yo_?caml_call2(symbol$6,addr,t[4]):_yo_}
    function read_byte$4(t,addr)
     {if(accepts$4(t,addr))
       {var
         offset=caml_call2(symbol$4,addr,t[3]),
         _ym_=caml_call2(symbol$3,t[2],offset);
        return read_byte$3(t[1],_ym_)}
      var _yn_=caml_call1(show$0,addr);
      throw [0,Invalid_argument,caml_call1(sprintf(_ce_),_yn_)]}
    function write_byte$4(t,addr,data)
     {if(accepts$4(t,addr))
       {var
         offset=caml_call2(symbol$4,addr,t[3]),
         _yk_=caml_call2(symbol$3,t[2],offset);
        return write_byte$3(t[1],_yk_,data)}
      var _yl_=caml_call1(show$0,addr);
      throw [0,Invalid_argument,caml_call1(sprintf(_cf_),_yl_)]}
    function create$9(addr,type,opt,param)
     {if(opt)var sth=opt[1],default$0=sth;else var default$0=zero;
      return 87 === type
              ?[0,addr,default$0,0,1]
              :18373 <= type?[0,addr,default$0,1,1]:[0,addr,default$0,1,0]}
    function accepts$5(t,addr){return caml_call2(symbol$5,addr,t[1])}
    function read_byte$5(t,addr)
     {return t[3]?accepts$5(t,addr)?t[2]:failwith(_cg_):failwith(_ch_)}
    function write_byte$5(t,addr,data)
     {return t[3]
              ?accepts$5(t,addr)?(t[2] = data,0):failwith(_ci_)
              :failwith(_cj_)}
    function peek(t){return t[2]}
    function create$10(sb,sc,opt,param)
     {if(opt)
       var sth=opt[1],print_serial_port=sth;
      else
       var print_serial_port=0;
      return [0,sb,sc,print_serial_port]}
    function read_byte$6(t,addr)
     {return accepts$5(t[1],addr)
              ?read_byte$5(t[1],addr)
              :accepts$5(t[2],addr)?read_byte$5(t[2],addr):failwith(_ck_)}
    function write_byte$6(t,addr,data)
     {if(accepts$5(t[1],addr))return write_byte$5(t[1],addr,data);
      if(accepts$5(t[2],addr))
       {write_byte$5(t[2],addr,data);
        var _yh_=t[3],_yi_=_yh_?caml_call2(symbol$1,data,of_int(129)):_yh_;
        if(_yi_)
         {var _yj_=_b2_(peek(t[1]));
          caml_call1(printf(_cl_),_yj_);
          return flush_all(0)}
        return _yi_}
      return failwith(_cm_)}
    function accepts$6(t,addr)
     {var _yg_=accepts$5(t[1],addr);return _yg_?_yg_:accepts$5(t[2],addr)}
    function create$11(rom_bytes){return [0,rom_bytes]}
    function read_byte$7(t,addr)
     {var addr$0=_b1_(addr);
      if(0 <= addr$0 && ! (32767 < addr$0))
       return of_char(caml_ba_get_1(t[1],addr$0));
      throw [0,Invalid_argument,_cn_]}
    function write_byte$7(param,_yf_,_ye_){return 0}
    function accepts$7(param,addr)
     {var
       addr$0=_b1_(addr),
       _yc_=0 <= addr$0?1:0,
       _yd_=_yc_?addr$0 <= 32767?1:0:_yc_;
      return _yd_}
    var _co_=[0,create$11,read_byte$7,write_byte$7,accepts$7];
    function create$12(param)
     {return [0,zero,zero,zero,zero,zero,zero,zero,zero]}
    function read_r(t,param)
     {switch(param)
       {case 0:return t[1];
        case 1:return t[2];
        case 2:return t[3];
        case 3:return t[4];
        case 4:return t[5];
        case 5:return t[6];
        case 6:return t[7];
        default:return t[8]}}
    function read_rr(t,rr)
     {switch(rr)
       {case 0:
         var _x__=of_uint8(t[6]);
         return caml_call2(lor$0,caml_call2(lsl$0,of_uint8(t[1]),8),_x__);
        case 1:
         var _x$_=of_uint8(t[3]);
         return caml_call2(lor$0,caml_call2(lsl$0,of_uint8(t[2]),8),_x$_);
        case 2:
         var _ya_=of_uint8(t[5]);
         return caml_call2(lor$0,caml_call2(lsl$0,of_uint8(t[4]),8),_ya_);
        default:
         var _yb_=of_uint8(t[8]);
         return caml_call2(lor$0,caml_call2(lsl$0,of_uint8(t[7]),8),_yb_)}}
    function write_r(t,r,x)
     {switch(r)
       {case 0:t[1] = x;return 0;
        case 1:t[2] = x;return 0;
        case 2:t[3] = x;return 0;
        case 3:t[4] = x;return 0;
        case 4:t[5] = x;return 0;
        case 5:t[6] = caml_call2(land,x,of_int(240));return 0;
        case 6:t[7] = x;return 0;
        default:t[8] = x;return 0}}
    function write_rr(t,rr,x)
     {var
       x$0=_b1_(x),
       high=of_int((x$0 & 65280) >>> 8 | 0),
       low=of_int(x$0 & 255);
      switch(rr)
       {case 0:t[1] = high;t[6] = caml_call2(land,low,of_int(240));return 0;
        case 1:t[2] = high;t[3] = low;return 0;
        case 2:t[4] = high;t[5] = low;return 0;
        default:t[7] = high;t[8] = low;return 0}}
    function read_flag(t,flag)
     {var f=_b2_(t[6]);
      switch(flag)
       {case 0:return 0 !== (f & 16)?1:0;
        case 1:return 0 !== (f & 32)?1:0;
        case 2:return 0 !== (f & 64)?1:0;
        default:return 0 !== (f & 128)?1:0}}
    var
     mask_0b00010000=of_int(16),
     mask_0b11100000=of_int(224),
     mask_0b00100000=of_int(32),
     mask_0b11010000=of_int(208),
     mask_0b01000000=of_int(64),
     mask_0b10110000=of_int(176),
     mask_0b10000000=of_int(128),
     mask_0b01110000=of_int(112);
    function set_flags(t,opt,_x9_,_x8_,_x7_,param)
     {if(opt)var sth=opt[1],c=sth;else var c=read_flag(t,0);
      if(_x9_)var sth$0=_x9_[1],h=sth$0;else var h=read_flag(t,1);
      if(_x8_)var sth$1=_x8_[1],n=sth$1;else var n=read_flag(t,2);
      if(_x7_)var sth$2=_x7_[1],z=sth$2;else var z=read_flag(t,3);
      t[6]
      =
      c
       ?caml_call2(lor,t[6],mask_0b00010000)
       :caml_call2(land,t[6],mask_0b11100000);
      t[6]
      =
      h
       ?caml_call2(lor,t[6],mask_0b00100000)
       :caml_call2(land,t[6],mask_0b11010000);
      t[6]
      =
      n
       ?caml_call2(lor,t[6],mask_0b01000000)
       :caml_call2(land,t[6],mask_0b10110000);
      return z
              ?(t[6] = caml_call2(lor,t[6],mask_0b10000000),0)
              :(t[6] = caml_call2(land,t[6],mask_0b01110000),0)}
    function show_f(f)
     {var
       f$0=_b2_(f),
       z=0 === (f$0 & 128)?45:90,
       n=0 === (f$0 & 64)?45:78,
       h=0 === (f$0 & 32)?45:72,
       c=0 === (f$0 & 16)?45:67;
      return caml_call4(sprintf(_cp_),z,n,h,c)}
    function show$1(t)
     {var
       _x2_=caml_call1(show$0,read_rr(t,3)),
       _x3_=caml_call1(show$0,read_rr(t,2)),
       _x4_=caml_call1(show$0,read_rr(t,1)),
       _x5_=show_f(t[6]),
       _x6_=caml_call1(show,read_r(t,0));
      return caml_call5(sprintf(_cq_),_x6_,_x5_,_x4_,_x3_,_x2_)}
    function create$13(addr)
     {return [0,addr,-588596599,-603547828,-126317716,-937474657]}
    function lookup(t,color_id)
     {switch(color_id)
       {case 0:return t[2];
        case 1:return t[3];
        case 2:return t[4];
        default:return t[5]}}
    function accepts$8(t,addr){return caml_call2(symbol$5,addr,t[1])}
    function read_byte$8(t,addr)
     {function bits_of_color(param)
       {return -588596599 <= param
                ?-126317716 <= param?2:0
                :-603547828 <= param?1:3}
      if(accepts$8(t,addr))
       {var
         _xZ_=bits_of_color(t[5]) << 6,
         _x0_=bits_of_color(t[4]) << 4,
         _x1_=bits_of_color(t[3]) << 2;
        return of_int(bits_of_color(t[2]) | _x1_ | _x0_ | _xZ_)}
      throw [0,Invalid_argument,_cr_]}
    function write_byte$8(t,addr,data)
     {function color_of_bits(param)
       {if(3 < param >>> 0)throw [0,Assert_failure,_cs_];
        switch(param)
         {case 0:return -588596599;
          case 1:return -603547828;
          case 2:return -126317716;
          default:return -937474657}}
      var data$0=_b2_(data);
      if(accepts$8(t,addr))
       {t[2] = color_of_bits(data$0 & 3);
        t[3] = color_of_bits((data$0 & 12) >>> 2 | 0);
        t[4] = color_of_bits((data$0 & 48) >>> 4 | 0);
        t[5] = color_of_bits((data$0 & 192) >>> 6 | 0);
        return 0}
      throw [0,Invalid_argument,_ct_]}
    function create$14(start_addr,end_addr)
     {var
       default_sprite=[0,0,0,zero,-259427781,0,0,879375795,-1058811692,0],
       sprites=caml_make_vect(40,default_sprite);
      return [0,sprites,start_addr,end_addr]}
    function read_byte$9(t,addr)
     {var
       _xX_=_b1_(t[2]),
       offset=_b1_(addr) - _xX_ | 0,
       _xY_=offset / 4 | 0,
       sprite=caml_check_bound(t[1],_xY_)[1 + _xY_],
       match=offset % 4 | 0;
      if(3 < match >>> 0)throw [0,Assert_failure,_cu_];
      switch(match)
       {case 0:return of_int(sprite[1] + 16 | 0);
        case 1:return of_int(sprite[2] + 8 | 0);
        case 2:return sprite[3];
        default:
         return byte_of_bitflags
                 (486156037 === sprite[4]?1:0,
                  sprite[5],
                  sprite[6],
                  879375796 === sprite[7]?1:0,
                  -1058811691 === sprite[8]?1:0,
                  0 !== (sprite[9] & 4)?1:0,
                  0 !== (sprite[9] & 2)?1:0,
                  0 !== (sprite[9] & 1)?1:0)}}
    function write_byte$9(t,addr,data)
     {var
       _xM_=_b1_(t[2]),
       offset=_b1_(addr) - _xM_ | 0,
       data$0=_b2_(data),
       sprite_index=offset / 4 | 0,
       match=offset % 4 | 0;
      if(3 < match >>> 0)throw [0,Assert_failure,_cv_];
      switch(match)
       {case 0:
         var
          _xN_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
          _xO_=
           [0,
            data$0 - 16 | 0,
            _xN_[2],
            _xN_[3],
            _xN_[4],
            _xN_[5],
            _xN_[6],
            _xN_[7],
            _xN_[8],
            _xN_[9]];
         caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _xO_;
         return 0;
        case 1:
         var
          _xP_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
          _xQ_=
           [0,
            _xP_[1],
            data$0 - 8 | 0,
            _xP_[3],
            _xP_[4],
            _xP_[5],
            _xP_[6],
            _xP_[7],
            _xP_[8],
            _xP_[9]];
         caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _xQ_;
         return 0;
        case 2:
         var
          _xR_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
          _xS_=
           [0,
            _xR_[1],
            _xR_[2],
            data,
            _xR_[4],
            _xR_[5],
            _xR_[6],
            _xR_[7],
            _xR_[8],
            _xR_[9]];
         caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _xS_;
         return 0;
        default:
         var
          match$0=bitflags_of_byte(data),
          b0=match$0[8],
          b1=match$0[7],
          b2=match$0[6],
          b3=match$0[5],
          b4=match$0[4],
          x_flip=match$0[3],
          y_flip=match$0[2],
          b7=match$0[1],
          priority=b7?486156037:-259427781,
          pallete=b4?879375796:879375795,
          tile_vram_bank=b3?-1058811691:-1058811692,
          _xT_=_h_(b0),
          _xU_=_h_(b1) << 1,
          pallete_num=_h_(b2) << 2 | _xU_ | _xT_,
          _xV_=caml_check_bound(t[1],sprite_index)[1 + sprite_index],
          _xW_=
           [0,
            _xV_[1],
            _xV_[2],
            _xV_[3],
            priority,
            y_flip,
            x_flip,
            pallete,
            tile_vram_bank,
            pallete_num];
         caml_check_bound(t[1],sprite_index)[1 + sprite_index] = _xW_;
         return 0}}
    function accepts$9(t,addr)
     {var _xL_=caml_call2(symbol$6,t[2],addr);
      return _xL_?caml_call2(symbol$6,addr,t[3]):_xL_}
    function get_all_sprites(t){return t[1]}
    function write_with_offset(t,offset,data)
     {var _xK_=of_int$0(offset);
      return write_byte$9(t,caml_call2(symbol$3,t[2],_xK_),data)}
    function create$15(rom_bytes)
     {var x=caml_ba_get_1(rom_bytes,327);
      if(! (17 < x >>> 0))
       {var switch$0=0;
        switch(x)
         {case 0:var cartridge_type=0;break;
          case 1:var cartridge_type=1;break;
          case 2:var cartridge_type=2;break;
          case 3:var cartridge_type=3;break;
          case 5:var cartridge_type=4;break;
          case 6:var cartridge_type=5;break;
          case 15:var cartridge_type=6;break;
          case 16:var cartridge_type=7;break;
          case 17:var cartridge_type=8;break;
          default:switch$0 = 1}
        if(! switch$0)
         {var match=caml_ba_get_1(rom_bytes,328);
          if(8 < match >>> 0)throw [0,Assert_failure,_cx_];
          switch(match)
           {case 0:var rom_bank_count=2;break;
            case 1:var rom_bank_count=4;break;
            case 2:var rom_bank_count=8;break;
            case 3:var rom_bank_count=16;break;
            case 4:var rom_bank_count=32;break;
            case 5:var rom_bank_count=64;break;
            case 6:var rom_bank_count=128;break;
            case 7:var rom_bank_count=256;break;
            default:var rom_bank_count=512}
          var match$0=caml_ba_get_1(rom_bytes,329);
          if(5 < match$0 >>> 0)throw [0,Assert_failure,_cy_];
          switch(match$0)
           {case 0:var ram_bank_count=0;break;
            case 1:var ram_bank_count=1;break;
            case 2:var ram_bank_count=1;break;
            case 3:var ram_bank_count=4;break;
            case 4:var ram_bank_count=16;break;
            default:var ram_bank_count=8}
          return [0,cartridge_type,rom_bank_count,ram_bank_count]}}
      throw [0,Invalid_argument,caml_call1(sprintf(_cw_),x)]}
    function get_cartridge_type(t){return t[1]}
    function get_rom_bank_count(t){return t[2]}
    function get_ram_bank_count(t){return t[3]}
    function create$16(rom_bytes)
     {var
       h=create$15(rom_bytes),
       rom_bank_size=get_rom_bank_count(h),
       ram_bank_size=get_ram_bank_count(h),
       ram_bytes=create$2(ram_bank_size * 8192 | 0);
      return [0,rom_bytes,ram_bytes,rom_bank_size,ram_bank_size,0,1,0,0]}
    function zero_bank_num(t)
     {var _xJ_=t[3];
      if(t[8])
       {if(32 < _xJ_)
         {if(64 === _xJ_)return (t[7] & 1) << 5;
          if(128 === _xJ_)return (t[7] & 3) << 5;
          throw [0,Assert_failure,_cz_]}
        return 0}
      return 0}
    function high_bank_num(t)
     {var n=t[3];
      if(32 < n)
       {if(64 === n){var bit5=(t[7] & 1) << 5;return bit5 | t[6]}
        if(128 === n){var bit56=(t[7] & 3) << 5;return bit56 | t[6]}
        throw [0,Assert_failure,_cA_]}
      return t[6]}
    function ram_addr_of_addr(t,addr)
     {var _xI_=t[4];
      if(t[8] && 1 !== _xI_)
       {if(4 === _xI_)return (8192 * t[7] | 0) + (addr - 40960 | 0) | 0;
        throw [0,Invalid_argument,caml_call1(sprintf(_cB_),_xI_)]}
      return (addr - 40960 | 0) % 8192 | 0}
    function read_byte$10(t,addr)
     {var addr$0=_b1_(addr);
      if(0 <= addr$0 && ! (16383 < addr$0))
       {var
         zero_bank_num$0=zero_bank_num(t),
         _xv_=(16384 * zero_bank_num$0 | 0) + addr$0 | 0,
         _xw_=t[1],
         _xx_=function(_xH_,_xG_){return caml_ba_get_1(_xH_,_xG_)};
        return of_char(function(_xF_){return _xx_(_xw_,_xF_)}(_xv_))}
      if(16384 <= addr$0 && ! (32767 < addr$0))
       {var
         high_bank_num$0=high_bank_num(t),
         _xs_=(16384 * high_bank_num$0 | 0) + (addr$0 - 16384 | 0) | 0,
         _xt_=t[1],
         _xu_=function(_xE_,_xD_){return caml_ba_get_1(_xE_,_xD_)};
        return of_char(function(_xC_){return _xu_(_xt_,_xC_)}(_xs_))}
      if(40960 <= addr$0 && ! (49151 < addr$0))
       {if(t[5] && 0 < t[4])
         {var
           _xp_=function(_xB_){return ram_addr_of_addr(t,_xB_)}(addr$0),
           _xq_=t[2],
           _xr_=function(_xA_,_xz_){return caml_ba_get_1(_xA_,_xz_)};
          return of_char(function(_xy_){return _xr_(_xq_,_xy_)}(_xp_))}
        return of_int(255)}
      throw [0,Assert_failure,_cC_]}
    function bitmask_of_rom_size(n)
     {if(33 <= n)
       {if(64 === n)return 31;if(128 === n)return 31}
      else
       if(17 <= n)
        {if(32 <= n)return 31}
       else
        if(2 <= n)
         {var switcher=n - 2 | 0;
          switch(switcher)
           {case 0:return 1;case 2:return 3;case 6:return 7;case 14:return 15}}
      throw [0,Invalid_argument,caml_call1(sprintf(_cD_),n)]}
    function write_byte$10(t,addr,data)
     {var addr$0=_b1_(addr),data$0=_b2_(data);
      if(0 <= addr$0 && ! (8191 < addr$0)){t[5] = 10 === data$0?1:0;return 0}
      if(8192 <= addr$0 && ! (16383 < addr$0))
       {var
         rom_bank_num=data$0 & bitmask_of_rom_size(t[3]),
         _xn_=0 === rom_bank_num?1:rom_bank_num;
        t[6] = _xn_;
        return 0}
      if(16384 <= addr$0 && ! (24575 < addr$0)){t[7] = data$0 & 3;return 0}
      if(24576 <= addr$0 && ! (32767 < addr$0))
       {var _xm_=0 === (data$0 & 1)?0:1;t[8] = _xm_;return 0}
      if(40960 <= addr$0 && ! (49151 < addr$0))
       {var _xj_=t[5],_xk_=_xj_?0 < t[4]?1:0:_xj_;
        if(_xk_)
         var
          ram_addr=function(_xo_){return ram_addr_of_addr(t,_xo_)}(addr$0),
          _xl_=caml_ba_set_1(t[2],ram_addr,data$0);
        else
         var _xl_=_xk_;
        return _xl_}
      throw [0,Assert_failure,_cE_]}
    function accepts$10(param,addr)
     {var
       addr$0=_b1_(addr),
       _xf_=0 <= addr$0?1:0,
       _xg_=_xf_?addr$0 <= 32767?1:0:_xf_;
      if(_xg_)
       var _xh_=_xg_;
      else
       var _xi_=40960 <= addr$0?1:0,_xh_=_xi_?addr$0 <= 49151?1:0:_xi_;
      return _xh_}
    var _cF_=[0,create$16,read_byte$10,write_byte$10,accepts$10];
    function create$17(addr){return [0,addr,0,0,0,0,0,0]}
    function is_enabled(t,param)
     {switch(param)
       {case 0:return t[2];
        case 1:return t[3];
        case 2:return t[4];
        default:return t[5]}}
    function set_lyc_eq_ly_flag(t,b){t[6] = b;return 0}
    function get_gpu_mode(t){return t[7]}
    function set_gpu_mode(t,mode){t[7] = mode;return 0}
    function accepts$11(t,addr){return caml_call2(symbol$5,addr,t[1])}
    function read_byte$11(t,addr)
     {if(accepts$11(t,addr))
       {switch(t[7])
         {case 0:var _w7_=0,_w8_=1,b0=_w7_,b1=_w8_;break;
          case 1:var _xb_=1,_xc_=1,b0=_xb_,b1=_xc_;break;
          case 2:var _xd_=0,_xe_=0,b0=_xd_,b1=_xe_;break;
          default:var b0$0=1,b1$0=0,b0=b0$0,b1=b1$0}
        var
         _w9_=t[6],
         _w__=is_enabled(t,3),
         _w$_=is_enabled(t,2),
         _xa_=is_enabled(t,1);
        return byte_of_bitflags(1,is_enabled(t,0),_xa_,_w$_,_w__,_w9_,b1,b0)}
      throw [0,Invalid_argument,_cG_]}
    function write_byte$11(t,addr,data)
     {if(accepts$11(t,addr))
       {var
         match=bitflags_of_byte(data),
         b3=match[5],
         b4=match[4],
         b5=match[3],
         b6=match[2];
        t[2] = b6;
        t[3] = b5;
        t[4] = b4;
        t[5] = b3;
        return 0}
      throw [0,Invalid_argument,_cH_]}
    function create$18(scy_addr,scx_addr,ly_addr,lyc_addr,wy_addr,wx_addr)
     {return [0,
              [0,scy_addr,0],
              [0,scx_addr,0],
              [0,ly_addr,0],
              [0,lyc_addr,0],
              [0,wy_addr,0],
              [0,wx_addr,0]]}
    function get_scy(t){return t[1][2]}
    function get_scx(t){return t[2][2]}
    function get_ly(t){return t[3][2]}
    function incr_ly(t){t[3][2] = t[3][2] + 1 | 0;return 0}
    function reset_ly(t){t[3][2] = 0;return 0}
    function get_lyc(t){return t[4][2]}
    function get_wy(t){return t[5][2]}
    function get_wx(t){return t[6][2]}
    function accepts$12(t,addr)
     {var
       _w4_=
        [0,
         t[1][1],
         [0,t[2][1],[0,t[3][1],[0,t[4][1],[0,t[5][1],[0,t[6][1],0]]]]]];
      function _w5_(x){return caml_call2(symbol$5,addr,x)}
      return function(_w6_){return exists(_w5_,_w6_)}(_w4_)}
    function register_of_addr(t,addr)
     {if(caml_call2(symbol$5,addr,t[1][1]))return t[1];
      if(caml_call2(symbol$5,addr,t[2][1]))return t[2];
      if(caml_call2(symbol$5,addr,t[3][1]))return t[3];
      if(caml_call2(symbol$5,addr,t[4][1]))return t[4];
      if(caml_call2(symbol$5,addr,t[6][1]))return t[6];
      if(caml_call2(symbol$5,addr,t[5][1]))return t[5];
      var _w3_=caml_call1(show$0,addr);
      throw [0,Invalid_argument,caml_call1(sprintf(_cI_),_w3_)]}
    function read_byte$12(t,addr)
     {var r=register_of_addr(t,addr);return of_int(r[2])}
    function write_byte$12(t,addr,data)
     {if(caml_call2(symbol$5,addr,t[3][1])){t[3][2] = 0;return 0}
      var r=register_of_addr(t,addr);
      r[2] = _b2_(data);
      return 0}
    function create$19(addr){return [0,addr,1,0,0,0,0,1056320505,0,1]}
    function get_lcd_enable(t){return t[2]}
    function get_window_tile_map_area(t){return t[3]}
    function get_window_enable(t){return t[4]}
    function get_tile_data_area(t){return t[5]}
    function get_bg_tile_map_area(t){return t[6]}
    function get_obj_size(t){return t[7]}
    function get_obj_enable(t){return t[8]}
    function get_bg_window_display(t){return t[9]}
    function accepts$13(t,addr){return caml_call2(symbol$5,addr,t[1])}
    function read_byte$13(t,addr)
     {if(accepts$13(t,addr))
       return byte_of_bitflags
               (t[2],
                1 === t[3]?1:0,
                t[4],
                0 === t[5]?1:0,
                1 === t[6]?1:0,
                -663730172 === t[7]?1:0,
                t[8],
                t[9]);
      throw [0,Invalid_argument,_cJ_]}
    function write_byte$13(t,addr,data)
     {if(accepts$13(t,addr))
       {var
         match=bitflags_of_byte(data),
         b0=match[8],
         b1=match[7],
         b2=match[6],
         b3=match[5],
         b4=match[4],
         b5=match[3],
         b6=match[2],
         b7=match[1];
        t[2] = b7;
        var _wZ_=b6?1:0;
        t[3] = _wZ_;
        t[4] = b5;
        var _w0_=b4?0:1;
        t[5] = _w0_;
        var _w1_=b3?1:0;
        t[6] = _w1_;
        var _w2_=b2?-663730172:1056320505;
        t[7] = _w2_;
        t[8] = b1;
        t[9] = b0;
        return 0}
      throw [0,Invalid_argument,_cK_]}
    function to_bool(t){return 1 === t?1:0}
    function create$20(addr,ic){return [0,addr,ic,1,1,1,1,1,1,1,1,1]}
    function press(t,key)
     {request(t[2],4);
      switch(key)
       {case 0:t[4] = 0;return 0;
        case 1:t[5] = 0;return 0;
        case 2:t[6] = 0;return 0;
        case 3:t[7] = 0;return 0;
        case 4:t[8] = 0;return 0;
        case 5:t[9] = 0;return 0;
        case 6:t[10] = 0;return 0;
        default:t[11] = 0;return 0}}
    function release(t,param)
     {switch(param)
       {case 0:t[4] = 1;return 0;
        case 1:t[5] = 1;return 0;
        case 2:t[6] = 1;return 0;
        case 3:t[7] = 1;return 0;
        case 4:t[8] = 1;return 0;
        case 5:t[9] = 1;return 0;
        case 6:t[10] = 1;return 0;
        default:t[11] = 1;return 0}}
    function read_byte$14(t,param)
     {switch(t[3])
       {case 0:return of_int(15);
        case 1:
         var _wT_=to_bool(t[7]),_wU_=to_bool(t[6]),_wV_=to_bool(t[5]);
         return byte_of_bitflags(1,1,0,1,to_bool(t[4]),_wV_,_wU_,_wT_);
        default:
         var _wW_=to_bool(t[11]),_wX_=to_bool(t[10]),_wY_=to_bool(t[9]);
         return byte_of_bitflags(1,1,1,0,to_bool(t[8]),_wY_,_wX_,_wW_)}}
    function write_byte$14(t,param,data)
     {var match=bitflags_of_byte(data),b4=match[4],b5=match[3];
      return b4?b5?(t[3] = 0,0):(t[3] = 2,0):(t[3] = 1,0)}
    function accepts$14(t,addr){return caml_equal(addr,t[1])}
    function handle_ly_eq_lyc(t)
     {var ly=get_ly(t[9]),lyc=get_lyc(t[9]),ly_eq_lyc=ly === lyc?1:0;
      set_lyc_eq_ly_flag(t[7],ly_eq_lyc);
      var _wS_=ly_eq_lyc?is_enabled(t[7],0):ly_eq_lyc;
      return _wS_?request(t[10],1):_wS_}
    var screen_w=160,screen_h=144;
    function create$21
     (tile_data,
      tile_map,
      oam,
      bgp,
      obp0,
      obp1,
      lcd_stat,
      lcd_control,
      lcd_position,
      ic)
     {var
       t=
        [0,
         tile_data,
         tile_map,
         oam,
         bgp,
         obp0,
         obp1,
         lcd_stat,
         lcd_control,
         lcd_position,
         ic,
         0,
         0,
         create_matrix(screen_h,screen_w,-588596599)];
      handle_ly_eq_lyc(t);
      return t}
    function render_bg_window_line(t,ly)
     {function render_bg_line(t,ly,tile_data_area)
       {var
         scy=get_scy(t[9]),
         scx=get_scx(t[9]),
         y=(scy + ly | 0) % 256 | 0,
         bg_tile_map_area=get_bg_tile_map_area(t[8]),
         row_in_tile=y % 8 | 0,
         lx=[0,0];
        for(;;)
         {if(lx[1] < 160)
           {var
             x=(scx + lx[1] | 0) % 256 | 0,
             col_in_tile=x % 8 | 0,
             tile_index=get_tile_index(t[2],bg_tile_map_area,y,x),
             tile_pixel_row=
              get_row_pixels(t[1],tile_data_area,tile_index,row_in_tile),
             len=
              0 < col_in_tile
               ?8 - col_in_tile | 0
               :8 <= (160 - lx[1] | 0)?8:160 - lx[1] | 0,
             _wN_=len - 1 | 0,
             _wM_=0;
            if(! (_wN_ < 0))
             {var i=_wM_;
              for(;;)
               {var
                 _wO_=col_in_tile + i | 0,
                 _wP_=caml_check_bound(tile_pixel_row,_wO_)[1 + _wO_],
                 color=lookup(t[4],_wP_),
                 _wQ_=lx[1] + i | 0;
                caml_check_bound(caml_check_bound(t[13],ly)[1 + ly],_wQ_)
                 [1 + _wQ_]
                =
                color;
                var _wR_=i + 1 | 0;
                if(_wN_ !== i){var i=_wR_;continue}
                break}}
            lx[1] = lx[1] + len | 0;
            continue}
          return 0}}
      function render_window_line(t,ly,tile_data_area)
       {var wy=get_wy(t[9]),wx=get_wx(t[9]) - 7 | 0,_wD_=wy <= ly?1:0;
        if(_wD_)
         var _wE_=ly <= (wy + 256 | 0)?1:0,_wF_=_wE_?wx <= 160?1:0:_wE_;
        else
         var _wF_=_wD_;
        if(_wF_)
         {var
           window_tile_map_area=get_window_tile_map_area(t[8]),
           y_in_w=abs$0(ly - wy | 0),
           row_in_tile=y_in_w % 8 | 0,
           wx$0=0 <= wx?wx:0,
           lx=[0,wx$0];
          for(;;)
           {if(lx[1] < 160)
             {var
               x_in_w=abs$0(lx[1] - wx | 0),
               tile_index=
                get_tile_index(t[2],window_tile_map_area,y_in_w,x_in_w),
               tile_pixel_row=
                get_row_pixels(t[1],tile_data_area,tile_index,row_in_tile),
               len=8 <= (160 - lx[1] | 0)?8:160 - lx[1] | 0,
               _wH_=len - 1 | 0,
               _wG_=0;
              if(! (_wH_ < 0))
               {var i=_wG_;
                for(;;)
                 {var
                   _wI_=caml_check_bound(tile_pixel_row,i)[1 + i],
                   color=lookup(t[4],_wI_),
                   _wJ_=lx[1] + i | 0;
                  caml_check_bound(caml_check_bound(t[13],ly)[1 + ly],_wJ_)
                   [1 + _wJ_]
                  =
                  color;
                  var _wK_=i + 1 | 0;
                  if(_wH_ !== i){var i=_wK_;continue}
                  break}}
              lx[1] = lx[1] + len | 0;
              continue}
            var _wL_=0;
            break}}
        else
         var _wL_=_wF_;
        return _wL_}
      var tile_data_area=get_tile_data_area(t[8]);
      render_bg_line(t,ly,tile_data_area);
      var _wC_=get_window_enable(t[8]);
      return _wC_?render_window_line(t,ly,tile_data_area):_wC_}
    function render_sprite_line(t,ly)
     {var
       match=get_obj_size(t[8]),
       y_sprite_size=1056320505 <= match?8:16,
       _wt_=get_all_sprites(t[3]);
      function _wu_(sprite)
       {var
         _ww_=sprite[1] <= ly?1:0,
         _wx_=_ww_?ly <= ((sprite[1] + y_sprite_size | 0) - 1 | 0)?1:0:_ww_;
        if(_wx_)
         {var
           row=ly - sprite[1] | 0,
           pallete=879375796 <= sprite[7]?t[6]:t[5],
           col=0;
          for(;;)
           {var lx=sprite[2] + col | 0,switch$0=0;
            if(0 <= lx && ! (160 <= lx))
             {var
               _wA_=sprite[6]?7 - col | 0:col,
               _wB_=sprite[5]?(y_sprite_size - row | 0) - 1 | 0:row,
               color_id=get_pixel(t[1],0,sprite[3],_wB_,_wA_);
              if(color_id)
               {var
                 match=sprite[4],
                 match$0=
                  caml_check_bound(caml_check_bound(t[13],ly)[1 + ly],lx)
                   [1 + lx],
                 switch$1=0;
                if(486156037 <= match)
                 {var switch$2=0;
                  if
                   (-937474657
                    !==
                    match$0
                    &&
                    -603547828
                    !==
                    match$0
                    &&
                    -126317716
                    !==
                    match$0)
                   switch$2 = 1;
                  if(! switch$2)switch$1 = 1}
                if(! switch$1)
                 {var color=lookup(pallete,color_id);
                  caml_check_bound(caml_check_bound(t[13],ly)[1 + ly],lx)
                   [1 + lx]
                  =
                  color}}
              switch$0 = 1}
            var _wz_=col + 1 | 0;
            if(7 !== col){var col=_wz_;continue}
            var _wy_=0;
            break}}
        else
         var _wy_=_wx_;
        return _wy_}
      return function(_wv_){return iter$0(_wu_,_wv_)}(_wt_)}
    function render_line(t)
     {var ly=get_ly(t[9]);
      if(get_bg_window_display(t[8]))render_bg_window_line(t,ly);
      var _ws_=get_obj_enable(t[8]);
      return _ws_?render_sprite_line(t,ly):_ws_}
    function run$0(t,mcycles)
     {function incr_ly$0(t){incr_ly(t[9]);return get_ly(t[9])}
      switch(t[12])
       {case 0:
         t[11] = t[11] + mcycles | 0;
         var match=get_gpu_mode(t[7]);
         switch(match)
          {case 0:
            if(20 <= t[11]){t[11] = t[11] % 20 | 0;set_gpu_mode(t[7],1)}
            return 0;
           case 1:
            if(43 <= t[11])
             {t[11] = t[11] % 43 | 0;
              set_gpu_mode(t[7],2);
              if(is_enabled(t[7],3))request(t[10],1);
              render_line(t)}
            return 0;
           case 2:
            if(51 <= t[11])
             {t[11] = t[11] % 51 | 0;
              var ly=incr_ly$0(t);
              handle_ly_eq_lyc(t);
              if(ly === 144)
               {set_gpu_mode(t[7],3);
                if(is_enabled(t[7],2))request(t[10],1);
                request(t[10],0)}
              else
               {set_gpu_mode(t[7],0);if(is_enabled(t[7],1))request(t[10],1)}}
            return 0;
           default:
            if(t[11] < 114)return 0;
            t[11] = t[11] % 114 | 0;
            var ly$0=incr_ly$0(t);
            handle_ly_eq_lyc(t);
            if(154 <= ly$0)
             {reset_ly(t[9]);
              handle_ly_eq_lyc(t);
              set_gpu_mode(t[7],0);
              if(is_enabled(t[7],1))request(t[10],1);
              return [0,t[13]]}
            return 0}
        case 1:return 0;
        default:
         t[11] = t[11] + mcycles | 0;
         if(51 <= t[11])
          {t[11] = t[11] % 51 | 0;
           t[12] = 0;
           handle_ly_eq_lyc(t);
           set_gpu_mode(t[7],0);
           if(is_enabled(t[7],1))request(t[10],1)}
         return 0}}
    function accepts$15(t,addr)
     {var _wj_=accepts$1(t[2],addr);
      if(_wj_)
       var _wk_=_wj_;
      else
       {var _wl_=accepts$2(t[1],addr);
        if(_wl_)
         var _wk_=_wl_;
        else
         {var _wm_=accepts$9(t[3],addr);
          if(_wm_)
           var _wk_=_wm_;
          else
           {var _wn_=accepts$8(t[4],addr);
            if(_wn_)
             var _wk_=_wn_;
            else
             {var _wo_=accepts$8(t[5],addr);
              if(_wo_)
               var _wk_=_wo_;
              else
               {var _wp_=accepts$8(t[6],addr);
                if(_wp_)
                 var _wk_=_wp_;
                else
                 {var _wq_=accepts$11(t[7],addr);
                  if(_wq_)
                   var _wk_=_wq_;
                  else
                   {var _wr_=accepts$13(t[8],addr);
                    if(! _wr_)return accepts$12(t[9],addr);
                    var _wk_=_wr_}}}}}}}
      return _wk_}
    function read_byte$15(t,addr)
     {if(accepts$2(t[1],addr))
       {var match=get_gpu_mode(t[7]);
        return 1 === match?of_int(255):read_byte$2(t[1],addr)}
      if(accepts$1(t[2],addr))
       {var match$0=get_gpu_mode(t[7]);
        return 1 === match$0?of_int(255):read_byte$1(t[2],addr)}
      if(accepts$9(t[3],addr))
       {var match$1=get_gpu_mode(t[7]);
        return 2 <= match$1?read_byte$9(t[3],addr):of_int(255)}
      if(accepts$8(t[4],addr))return read_byte$8(t[4],addr);
      if(accepts$8(t[5],addr))return read_byte$8(t[5],addr);
      if(accepts$8(t[6],addr))return read_byte$8(t[6],addr);
      if(accepts$11(t[7],addr))return read_byte$11(t[7],addr);
      if(accepts$13(t[8],addr))return read_byte$13(t[8],addr);
      if(accepts$12(t[9],addr))return read_byte$12(t[9],addr);
      var _wi_=caml_call1(show$0,addr);
      throw [0,Invalid_argument,caml_call1(sprintf(_cL_),_wi_)]}
    function write_byte$15(t,addr,data)
     {if(accepts$2(t[1],addr))
       {var match=get_gpu_mode(t[7]);
        return 1 === match?0:write_byte$2(t[1],addr,data)}
      if(accepts$1(t[2],addr))
       {var match$0=get_gpu_mode(t[7]);
        return 1 === match$0?0:write_byte$1(t[2],addr,data)}
      if(accepts$9(t[3],addr))
       {var match$1=get_gpu_mode(t[7]);
        return 2 <= match$1?write_byte$9(t[3],addr,data):0}
      if(accepts$8(t[4],addr))return write_byte$8(t[4],addr,data);
      if(accepts$8(t[5],addr))return write_byte$8(t[5],addr,data);
      if(accepts$8(t[6],addr))return write_byte$8(t[6],addr,data);
      if(accepts$11(t[7],addr))return write_byte$11(t[7],addr,data);
      if(accepts$13(t[8],addr))
       {var lcd_enable_before=get_lcd_enable(t[8]);
        write_byte$13(t[8],addr,data);
        var lcd_enable_after=get_lcd_enable(t[8]);
        if(lcd_enable_before)
         {if(! lcd_enable_after)
           {reset_ly(t[9]);t[11] = 0;t[12] = 1;return set_gpu_mode(t[7],2)}}
        else
         if(lcd_enable_after){t[12] = 2;t[11] = 18;return handle_ly_eq_lyc(t)}
        return 0}
      if(accepts$12(t[9],addr))return write_byte$12(t[9],addr,data);
      var _wh_=caml_call1(show$0,addr);
      throw [0,Invalid_argument,caml_call1(sprintf(_cM_),_wh_)]}
    function write_oam_with_offset(t,offset,data)
     {return write_with_offset(t[3],offset,data)}
    function get_mcycles_in_mode(t){return t[11]}
    function Make(Bus)
     {var
       x00=of_int$0(0),
       x08=of_int$0(8),
       x10=of_int$0(16),
       x18=of_int$0(24),
       x20=of_int$0(32),
       x28=of_int$0(40),
       x30=of_int$0(48),
       x38=of_int$0(56),
       RST_offset=[0,x00,x08,x10,x18,x20,x28,x30,x38],
       l1=of_int$0(1),
       l2=of_int$0(2),
       l3=of_int$0(3),
       Instruction_length=[0,l1,l2,l3];
      function f(bus,pc)
       {var addr_after_pc=succ$0(pc);
        function next_byte(param){return caml_call2(Bus[1],bus,addr_after_pc)}
        function next_word(param){return caml_call2(Bus[4],bus,addr_after_pc)}
        var op=_b2_(caml_call2(Bus[1],bus,pc));
        if(255 < op >>> 0)return failwith(caml_call1(sprintf(_cN_),op));
        var _wf_=op;
        if(128 <= _wf_)
         {if(192 <= _wf_)
           {if(224 <= _wf_)
             switch(_wf_)
              {case 224:
                var _v7_=[0,[7,next_byte(0)],_rd_];
                return [0,Instruction_length[2],_re_,_v7_];
               case 225:return [0,Instruction_length[1],_rg_,_rf_];
               case 226:return [0,Instruction_length[1],_ri_,_rh_];
               case 227:return [0,Instruction_length[1],_rj_,4];
               case 228:return [0,Instruction_length[1],_rk_,4];
               case 229:return [0,Instruction_length[1],_rm_,_rl_];
               case 230:
                var _v8_=[8,_rn_,[0,next_byte(0)]];
                return [0,Instruction_length[2],_ro_,_v8_];
               case 231:
                return [0,Instruction_length[1],_rp_,[32,RST_offset[5]]];
               case 232:
                var _v9_=[4,of_byte(next_byte(0))];
                return [0,Instruction_length[2],_rq_,_v9_];
               case 233:return [0,Instruction_length[1],_rs_,_rr_];
               case 234:
                var _v__=[0,[2,next_word(0)],_rt_];
                return [0,Instruction_length[3],_ru_,_v__];
               case 235:return [0,Instruction_length[1],_rv_,4];
               case 236:return [0,Instruction_length[1],_rw_,4];
               case 237:return [0,Instruction_length[1],_rx_,4];
               case 238:
                var _v$_=[10,_ry_,[0,next_byte(0)]];
                return [0,Instruction_length[2],_rz_,_v$_];
               case 239:
                return [0,Instruction_length[1],_rA_,[32,RST_offset[6]]];
               case 240:
                var _wa_=[0,_rB_,[7,next_byte(0)]];
                return [0,Instruction_length[2],_rC_,_wa_];
               case 241:return [0,Instruction_length[1],_rE_,_rD_];
               case 242:return [0,Instruction_length[1],_rG_,_rF_];
               case 243:return [0,Instruction_length[1],_rH_,7];
               case 244:return [0,Instruction_length[1],_rI_,4];
               case 245:return [0,Instruction_length[1],_rK_,_rJ_];
               case 246:
                var _wb_=[9,_rL_,[0,next_byte(0)]];
                return [0,Instruction_length[2],_rM_,_wb_];
               case 247:
                return [0,Instruction_length[1],_rN_,[32,RST_offset[7]]];
               case 248:
                var _wc_=[1,_rO_,[8,of_byte(next_byte(0))]];
                return [0,Instruction_length[2],_rP_,_wc_];
               case 249:return [0,Instruction_length[1],_rR_,_rQ_];
               case 250:
                var _wd_=[0,_rS_,[2,next_word(0)]];
                return [0,Instruction_length[3],_rT_,_wd_];
               case 251:return [0,Instruction_length[1],_rU_,8];
               case 252:return [0,Instruction_length[1],_rV_,4];
               case 253:return [0,Instruction_length[1],_rW_,4];
               case 254:
                var _we_=[11,_rX_,[0,next_byte(0)]];
                return [0,Instruction_length[2],_rY_,_we_];
               default:
                return [0,Instruction_length[1],_rZ_,[32,RST_offset[8]]]}
            switch(_wf_)
             {case 192:return [0,Instruction_length[1],_ix_,_iw_];
              case 193:return [0,Instruction_length[1],_iz_,_iy_];
              case 194:
               var _vT_=[29,1,[1,next_word(0)]];
               return [0,Instruction_length[3],_iA_,_vT_];
              case 195:
               var _vU_=[29,0,[1,next_word(0)]];
               return [0,Instruction_length[3],_iB_,_vU_];
              case 196:
               var _vV_=[31,1,next_word(0)];
               return [0,Instruction_length[3],_iC_,_vV_];
              case 197:return [0,Instruction_length[1],_iE_,_iD_];
              case 198:
               var _vW_=[2,_iF_,[0,next_byte(0)]];
               return [0,Instruction_length[2],_iG_,_vW_];
              case 199:
               return [0,Instruction_length[1],_iH_,[32,RST_offset[1]]];
              case 200:return [0,Instruction_length[1],_iJ_,_iI_];
              case 201:return [0,Instruction_length[1],_iL_,_iK_];
              case 202:
               var _vX_=[29,2,[1,next_word(0)]];
               return [0,Instruction_length[3],_iM_,_vX_];
              case 203:
               var op$0=_b2_(next_byte(0));
               if(255 < op$0 >>> 0)
                return failwith(caml_call1(sprintf(_iN_),op$0));
               var _wg_=op$0;
               if(128 <= _wg_)
                {if(192 <= _wg_)
                  {if(224 <= _wg_)
                    switch(_wg_)
                     {case 224:return [0,Instruction_length[2],_pP_,_pO_];
                      case 225:return [0,Instruction_length[2],_pR_,_pQ_];
                      case 226:return [0,Instruction_length[2],_pT_,_pS_];
                      case 227:return [0,Instruction_length[2],_pV_,_pU_];
                      case 228:return [0,Instruction_length[2],_pX_,_pW_];
                      case 229:return [0,Instruction_length[2],_pZ_,_pY_];
                      case 230:return [0,Instruction_length[2],_p1_,_p0_];
                      case 231:return [0,Instruction_length[2],_p3_,_p2_];
                      case 232:return [0,Instruction_length[2],_p5_,_p4_];
                      case 233:return [0,Instruction_length[2],_p7_,_p6_];
                      case 234:return [0,Instruction_length[2],_p9_,_p8_];
                      case 235:return [0,Instruction_length[2],_p$_,_p__];
                      case 236:return [0,Instruction_length[2],_qb_,_qa_];
                      case 237:return [0,Instruction_length[2],_qd_,_qc_];
                      case 238:return [0,Instruction_length[2],_qf_,_qe_];
                      case 239:return [0,Instruction_length[2],_qh_,_qg_];
                      case 240:return [0,Instruction_length[2],_qj_,_qi_];
                      case 241:return [0,Instruction_length[2],_ql_,_qk_];
                      case 242:return [0,Instruction_length[2],_qn_,_qm_];
                      case 243:return [0,Instruction_length[2],_qp_,_qo_];
                      case 244:return [0,Instruction_length[2],_qr_,_qq_];
                      case 245:return [0,Instruction_length[2],_qt_,_qs_];
                      case 246:return [0,Instruction_length[2],_qv_,_qu_];
                      case 247:return [0,Instruction_length[2],_qx_,_qw_];
                      case 248:return [0,Instruction_length[2],_qz_,_qy_];
                      case 249:return [0,Instruction_length[2],_qB_,_qA_];
                      case 250:return [0,Instruction_length[2],_qD_,_qC_];
                      case 251:return [0,Instruction_length[2],_qF_,_qE_];
                      case 252:return [0,Instruction_length[2],_qH_,_qG_];
                      case 253:return [0,Instruction_length[2],_qJ_,_qI_];
                      case 254:return [0,Instruction_length[2],_qL_,_qK_];
                      default:return [0,Instruction_length[2],_qN_,_qM_]}
                   switch(_wg_)
                    {case 192:return [0,Instruction_length[2],_oP_,_oO_];
                     case 193:return [0,Instruction_length[2],_oR_,_oQ_];
                     case 194:return [0,Instruction_length[2],_oT_,_oS_];
                     case 195:return [0,Instruction_length[2],_oV_,_oU_];
                     case 196:return [0,Instruction_length[2],_oX_,_oW_];
                     case 197:return [0,Instruction_length[2],_oZ_,_oY_];
                     case 198:return [0,Instruction_length[2],_o1_,_o0_];
                     case 199:return [0,Instruction_length[2],_o3_,_o2_];
                     case 200:return [0,Instruction_length[2],_o5_,_o4_];
                     case 201:return [0,Instruction_length[2],_o7_,_o6_];
                     case 202:return [0,Instruction_length[2],_o9_,_o8_];
                     case 203:return [0,Instruction_length[2],_o$_,_o__];
                     case 204:return [0,Instruction_length[2],_pb_,_pa_];
                     case 205:return [0,Instruction_length[2],_pd_,_pc_];
                     case 206:return [0,Instruction_length[2],_pf_,_pe_];
                     case 207:return [0,Instruction_length[2],_ph_,_pg_];
                     case 208:return [0,Instruction_length[2],_pj_,_pi_];
                     case 209:return [0,Instruction_length[2],_pl_,_pk_];
                     case 210:return [0,Instruction_length[2],_pn_,_pm_];
                     case 211:return [0,Instruction_length[2],_pp_,_po_];
                     case 212:return [0,Instruction_length[2],_pr_,_pq_];
                     case 213:return [0,Instruction_length[2],_pt_,_ps_];
                     case 214:return [0,Instruction_length[2],_pv_,_pu_];
                     case 215:return [0,Instruction_length[2],_px_,_pw_];
                     case 216:return [0,Instruction_length[2],_pz_,_py_];
                     case 217:return [0,Instruction_length[2],_pB_,_pA_];
                     case 218:return [0,Instruction_length[2],_pD_,_pC_];
                     case 219:return [0,Instruction_length[2],_pF_,_pE_];
                     case 220:return [0,Instruction_length[2],_pH_,_pG_];
                     case 221:return [0,Instruction_length[2],_pJ_,_pI_];
                     case 222:return [0,Instruction_length[2],_pL_,_pK_];
                     default:return [0,Instruction_length[2],_pN_,_pM_]}}
                 if(160 <= _wg_)
                  switch(_wg_)
                   {case 160:return [0,Instruction_length[2],_nP_,_nO_];
                    case 161:return [0,Instruction_length[2],_nR_,_nQ_];
                    case 162:return [0,Instruction_length[2],_nT_,_nS_];
                    case 163:return [0,Instruction_length[2],_nV_,_nU_];
                    case 164:return [0,Instruction_length[2],_nX_,_nW_];
                    case 165:return [0,Instruction_length[2],_nZ_,_nY_];
                    case 166:return [0,Instruction_length[2],_n1_,_n0_];
                    case 167:return [0,Instruction_length[2],_n3_,_n2_];
                    case 168:return [0,Instruction_length[2],_n5_,_n4_];
                    case 169:return [0,Instruction_length[2],_n7_,_n6_];
                    case 170:return [0,Instruction_length[2],_n9_,_n8_];
                    case 171:return [0,Instruction_length[2],_n$_,_n__];
                    case 172:return [0,Instruction_length[2],_ob_,_oa_];
                    case 173:return [0,Instruction_length[2],_od_,_oc_];
                    case 174:return [0,Instruction_length[2],_of_,_oe_];
                    case 175:return [0,Instruction_length[2],_oh_,_og_];
                    case 176:return [0,Instruction_length[2],_oj_,_oi_];
                    case 177:return [0,Instruction_length[2],_ol_,_ok_];
                    case 178:return [0,Instruction_length[2],_on_,_om_];
                    case 179:return [0,Instruction_length[2],_op_,_oo_];
                    case 180:return [0,Instruction_length[2],_or_,_oq_];
                    case 181:return [0,Instruction_length[2],_ot_,_os_];
                    case 182:return [0,Instruction_length[2],_ov_,_ou_];
                    case 183:return [0,Instruction_length[2],_ox_,_ow_];
                    case 184:return [0,Instruction_length[2],_oz_,_oy_];
                    case 185:return [0,Instruction_length[2],_oB_,_oA_];
                    case 186:return [0,Instruction_length[2],_oD_,_oC_];
                    case 187:return [0,Instruction_length[2],_oF_,_oE_];
                    case 188:return [0,Instruction_length[2],_oH_,_oG_];
                    case 189:return [0,Instruction_length[2],_oJ_,_oI_];
                    case 190:return [0,Instruction_length[2],_oL_,_oK_];
                    default:return [0,Instruction_length[2],_oN_,_oM_]}
                 switch(_wg_)
                  {case 128:return [0,Instruction_length[2],_mP_,_mO_];
                   case 129:return [0,Instruction_length[2],_mR_,_mQ_];
                   case 130:return [0,Instruction_length[2],_mT_,_mS_];
                   case 131:return [0,Instruction_length[2],_mV_,_mU_];
                   case 132:return [0,Instruction_length[2],_mX_,_mW_];
                   case 133:return [0,Instruction_length[2],_mZ_,_mY_];
                   case 134:return [0,Instruction_length[2],_m1_,_m0_];
                   case 135:return [0,Instruction_length[2],_m3_,_m2_];
                   case 136:return [0,Instruction_length[2],_m5_,_m4_];
                   case 137:return [0,Instruction_length[2],_m7_,_m6_];
                   case 138:return [0,Instruction_length[2],_m9_,_m8_];
                   case 139:return [0,Instruction_length[2],_m$_,_m__];
                   case 140:return [0,Instruction_length[2],_nb_,_na_];
                   case 141:return [0,Instruction_length[2],_nd_,_nc_];
                   case 142:return [0,Instruction_length[2],_nf_,_ne_];
                   case 143:return [0,Instruction_length[2],_nh_,_ng_];
                   case 144:return [0,Instruction_length[2],_nj_,_ni_];
                   case 145:return [0,Instruction_length[2],_nl_,_nk_];
                   case 146:return [0,Instruction_length[2],_nn_,_nm_];
                   case 147:return [0,Instruction_length[2],_np_,_no_];
                   case 148:return [0,Instruction_length[2],_nr_,_nq_];
                   case 149:return [0,Instruction_length[2],_nt_,_ns_];
                   case 150:return [0,Instruction_length[2],_nv_,_nu_];
                   case 151:return [0,Instruction_length[2],_nx_,_nw_];
                   case 152:return [0,Instruction_length[2],_nz_,_ny_];
                   case 153:return [0,Instruction_length[2],_nB_,_nA_];
                   case 154:return [0,Instruction_length[2],_nD_,_nC_];
                   case 155:return [0,Instruction_length[2],_nF_,_nE_];
                   case 156:return [0,Instruction_length[2],_nH_,_nG_];
                   case 157:return [0,Instruction_length[2],_nJ_,_nI_];
                   case 158:return [0,Instruction_length[2],_nL_,_nK_];
                   default:return [0,Instruction_length[2],_nN_,_nM_]}}
               if(64 <= _wg_)
                {if(96 <= _wg_)
                  switch(_wg_)
                   {case 96:return [0,Instruction_length[2],_lP_,_lO_];
                    case 97:return [0,Instruction_length[2],_lR_,_lQ_];
                    case 98:return [0,Instruction_length[2],_lT_,_lS_];
                    case 99:return [0,Instruction_length[2],_lV_,_lU_];
                    case 100:return [0,Instruction_length[2],_lX_,_lW_];
                    case 101:return [0,Instruction_length[2],_lZ_,_lY_];
                    case 102:return [0,Instruction_length[2],_l1_,_l0_];
                    case 103:return [0,Instruction_length[2],_l3_,_l2_];
                    case 104:return [0,Instruction_length[2],_l5_,_l4_];
                    case 105:return [0,Instruction_length[2],_l7_,_l6_];
                    case 106:return [0,Instruction_length[2],_l9_,_l8_];
                    case 107:return [0,Instruction_length[2],_l$_,_l__];
                    case 108:return [0,Instruction_length[2],_mb_,_ma_];
                    case 109:return [0,Instruction_length[2],_md_,_mc_];
                    case 110:return [0,Instruction_length[2],_mf_,_me_];
                    case 111:return [0,Instruction_length[2],_mh_,_mg_];
                    case 112:return [0,Instruction_length[2],_mj_,_mi_];
                    case 113:return [0,Instruction_length[2],_ml_,_mk_];
                    case 114:return [0,Instruction_length[2],_mn_,_mm_];
                    case 115:return [0,Instruction_length[2],_mp_,_mo_];
                    case 116:return [0,Instruction_length[2],_mr_,_mq_];
                    case 117:return [0,Instruction_length[2],_mt_,_ms_];
                    case 118:return [0,Instruction_length[2],_mv_,_mu_];
                    case 119:return [0,Instruction_length[2],_mx_,_mw_];
                    case 120:return [0,Instruction_length[2],_mz_,_my_];
                    case 121:return [0,Instruction_length[2],_mB_,_mA_];
                    case 122:return [0,Instruction_length[2],_mD_,_mC_];
                    case 123:return [0,Instruction_length[2],_mF_,_mE_];
                    case 124:return [0,Instruction_length[2],_mH_,_mG_];
                    case 125:return [0,Instruction_length[2],_mJ_,_mI_];
                    case 126:return [0,Instruction_length[2],_mL_,_mK_];
                    default:return [0,Instruction_length[2],_mN_,_mM_]}
                 switch(_wg_)
                  {case 64:return [0,Instruction_length[2],_kP_,_kO_];
                   case 65:return [0,Instruction_length[2],_kR_,_kQ_];
                   case 66:return [0,Instruction_length[2],_kT_,_kS_];
                   case 67:return [0,Instruction_length[2],_kV_,_kU_];
                   case 68:return [0,Instruction_length[2],_kX_,_kW_];
                   case 69:return [0,Instruction_length[2],_kZ_,_kY_];
                   case 70:return [0,Instruction_length[2],_k1_,_k0_];
                   case 71:return [0,Instruction_length[2],_k3_,_k2_];
                   case 72:return [0,Instruction_length[2],_k5_,_k4_];
                   case 73:return [0,Instruction_length[2],_k7_,_k6_];
                   case 74:return [0,Instruction_length[2],_k9_,_k8_];
                   case 75:return [0,Instruction_length[2],_k$_,_k__];
                   case 76:return [0,Instruction_length[2],_lb_,_la_];
                   case 77:return [0,Instruction_length[2],_ld_,_lc_];
                   case 78:return [0,Instruction_length[2],_lf_,_le_];
                   case 79:return [0,Instruction_length[2],_lh_,_lg_];
                   case 80:return [0,Instruction_length[2],_lj_,_li_];
                   case 81:return [0,Instruction_length[2],_ll_,_lk_];
                   case 82:return [0,Instruction_length[2],_ln_,_lm_];
                   case 83:return [0,Instruction_length[2],_lp_,_lo_];
                   case 84:return [0,Instruction_length[2],_lr_,_lq_];
                   case 85:return [0,Instruction_length[2],_lt_,_ls_];
                   case 86:return [0,Instruction_length[2],_lv_,_lu_];
                   case 87:return [0,Instruction_length[2],_lx_,_lw_];
                   case 88:return [0,Instruction_length[2],_lz_,_ly_];
                   case 89:return [0,Instruction_length[2],_lB_,_lA_];
                   case 90:return [0,Instruction_length[2],_lD_,_lC_];
                   case 91:return [0,Instruction_length[2],_lF_,_lE_];
                   case 92:return [0,Instruction_length[2],_lH_,_lG_];
                   case 93:return [0,Instruction_length[2],_lJ_,_lI_];
                   case 94:return [0,Instruction_length[2],_lL_,_lK_];
                   default:return [0,Instruction_length[2],_lN_,_lM_]}}
               if(32 <= _wg_)
                switch(_wg_)
                 {case 32:return [0,Instruction_length[2],_jP_,_jO_];
                  case 33:return [0,Instruction_length[2],_jR_,_jQ_];
                  case 34:return [0,Instruction_length[2],_jT_,_jS_];
                  case 35:return [0,Instruction_length[2],_jV_,_jU_];
                  case 36:return [0,Instruction_length[2],_jX_,_jW_];
                  case 37:return [0,Instruction_length[2],_jZ_,_jY_];
                  case 38:return [0,Instruction_length[2],_j1_,_j0_];
                  case 39:return [0,Instruction_length[2],_j3_,_j2_];
                  case 40:return [0,Instruction_length[2],_j5_,_j4_];
                  case 41:return [0,Instruction_length[2],_j7_,_j6_];
                  case 42:return [0,Instruction_length[2],_j9_,_j8_];
                  case 43:return [0,Instruction_length[2],_j$_,_j__];
                  case 44:return [0,Instruction_length[2],_kb_,_ka_];
                  case 45:return [0,Instruction_length[2],_kd_,_kc_];
                  case 46:return [0,Instruction_length[2],_kf_,_ke_];
                  case 47:return [0,Instruction_length[2],_kh_,_kg_];
                  case 48:return [0,Instruction_length[2],_kj_,_ki_];
                  case 49:return [0,Instruction_length[2],_kl_,_kk_];
                  case 50:return [0,Instruction_length[2],_kn_,_km_];
                  case 51:return [0,Instruction_length[2],_kp_,_ko_];
                  case 52:return [0,Instruction_length[2],_kr_,_kq_];
                  case 53:return [0,Instruction_length[2],_kt_,_ks_];
                  case 54:return [0,Instruction_length[2],_kv_,_ku_];
                  case 55:return [0,Instruction_length[2],_kx_,_kw_];
                  case 56:return [0,Instruction_length[2],_kz_,_ky_];
                  case 57:return [0,Instruction_length[2],_kB_,_kA_];
                  case 58:return [0,Instruction_length[2],_kD_,_kC_];
                  case 59:return [0,Instruction_length[2],_kF_,_kE_];
                  case 60:return [0,Instruction_length[2],_kH_,_kG_];
                  case 61:return [0,Instruction_length[2],_kJ_,_kI_];
                  case 62:return [0,Instruction_length[2],_kL_,_kK_];
                  default:return [0,Instruction_length[2],_kN_,_kM_]}
               switch(_wg_)
                {case 0:return [0,Instruction_length[2],_iP_,_iO_];
                 case 1:return [0,Instruction_length[2],_iR_,_iQ_];
                 case 2:return [0,Instruction_length[2],_iT_,_iS_];
                 case 3:return [0,Instruction_length[2],_iV_,_iU_];
                 case 4:return [0,Instruction_length[2],_iX_,_iW_];
                 case 5:return [0,Instruction_length[2],_iZ_,_iY_];
                 case 6:return [0,Instruction_length[2],_i1_,_i0_];
                 case 7:return [0,Instruction_length[2],_i3_,_i2_];
                 case 8:return [0,Instruction_length[2],_i5_,_i4_];
                 case 9:return [0,Instruction_length[2],_i7_,_i6_];
                 case 10:return [0,Instruction_length[2],_i9_,_i8_];
                 case 11:return [0,Instruction_length[2],_i$_,_i__];
                 case 12:return [0,Instruction_length[2],_jb_,_ja_];
                 case 13:return [0,Instruction_length[2],_jd_,_jc_];
                 case 14:return [0,Instruction_length[2],_jf_,_je_];
                 case 15:return [0,Instruction_length[2],_jh_,_jg_];
                 case 16:return [0,Instruction_length[2],_jj_,_ji_];
                 case 17:return [0,Instruction_length[2],_jl_,_jk_];
                 case 18:return [0,Instruction_length[2],_jn_,_jm_];
                 case 19:return [0,Instruction_length[2],_jp_,_jo_];
                 case 20:return [0,Instruction_length[2],_jr_,_jq_];
                 case 21:return [0,Instruction_length[2],_jt_,_js_];
                 case 22:return [0,Instruction_length[2],_jv_,_ju_];
                 case 23:return [0,Instruction_length[2],_jx_,_jw_];
                 case 24:return [0,Instruction_length[2],_jz_,_jy_];
                 case 25:return [0,Instruction_length[2],_jB_,_jA_];
                 case 26:return [0,Instruction_length[2],_jD_,_jC_];
                 case 27:return [0,Instruction_length[2],_jF_,_jE_];
                 case 28:return [0,Instruction_length[2],_jH_,_jG_];
                 case 29:return [0,Instruction_length[2],_jJ_,_jI_];
                 case 30:return [0,Instruction_length[2],_jL_,_jK_];
                 default:return [0,Instruction_length[2],_jN_,_jM_]}
              case 204:
               var _vY_=[31,2,next_word(0)];
               return [0,Instruction_length[3],_qO_,_vY_];
              case 205:
               var _vZ_=[31,0,next_word(0)];
               return [0,Instruction_length[3],_qP_,_vZ_];
              case 206:
               var _v0_=[5,_qQ_,[0,next_byte(0)]];
               return [0,Instruction_length[2],_qR_,_v0_];
              case 207:
               return [0,Instruction_length[1],_qS_,[32,RST_offset[2]]];
              case 208:return [0,Instruction_length[1],_qU_,_qT_];
              case 209:return [0,Instruction_length[1],_qW_,_qV_];
              case 210:
               var _v1_=[29,3,[1,next_word(0)]];
               return [0,Instruction_length[3],_qX_,_v1_];
              case 211:return [0,Instruction_length[1],_qY_,4];
              case 212:
               var _v2_=[31,3,next_word(0)];
               return [0,Instruction_length[3],_qZ_,_v2_];
              case 213:return [0,Instruction_length[1],_q1_,_q0_];
              case 214:
               var _v3_=[6,_q2_,[0,next_byte(0)]];
               return [0,Instruction_length[2],_q3_,_v3_];
              case 215:
               return [0,Instruction_length[1],_q4_,[32,RST_offset[3]]];
              case 216:return [0,Instruction_length[1],_q6_,_q5_];
              case 217:return [0,Instruction_length[1],_q7_,13];
              case 218:
               var _v4_=[29,4,[1,next_word(0)]];
               return [0,Instruction_length[3],_q8_,_v4_];
              case 219:return [0,Instruction_length[1],_q9_,4];
              case 220:
               var _v5_=[31,4,next_word(0)];
               return [0,Instruction_length[3],_q__,_v5_];
              case 221:return [0,Instruction_length[1],_q$_,4];
              case 222:
               var _v6_=[7,_ra_,[0,next_byte(0)]];
               return [0,Instruction_length[2],_rb_,_v6_];
              default:return [0,Instruction_length[1],_rc_,[32,RST_offset[4]]]}}
          if(160 <= _wf_)
           switch(_wf_)
            {case 160:return [0,Instruction_length[1],_hx_,_hw_];
             case 161:return [0,Instruction_length[1],_hz_,_hy_];
             case 162:return [0,Instruction_length[1],_hB_,_hA_];
             case 163:return [0,Instruction_length[1],_hD_,_hC_];
             case 164:return [0,Instruction_length[1],_hF_,_hE_];
             case 165:return [0,Instruction_length[1],_hH_,_hG_];
             case 166:return [0,Instruction_length[1],_hJ_,_hI_];
             case 167:return [0,Instruction_length[1],_hL_,_hK_];
             case 168:return [0,Instruction_length[1],_hN_,_hM_];
             case 169:return [0,Instruction_length[1],_hP_,_hO_];
             case 170:return [0,Instruction_length[1],_hR_,_hQ_];
             case 171:return [0,Instruction_length[1],_hT_,_hS_];
             case 172:return [0,Instruction_length[1],_hV_,_hU_];
             case 173:return [0,Instruction_length[1],_hX_,_hW_];
             case 174:return [0,Instruction_length[1],_hZ_,_hY_];
             case 175:return [0,Instruction_length[1],_h1_,_h0_];
             case 176:return [0,Instruction_length[1],_h3_,_h2_];
             case 177:return [0,Instruction_length[1],_h5_,_h4_];
             case 178:return [0,Instruction_length[1],_h7_,_h6_];
             case 179:return [0,Instruction_length[1],_h9_,_h8_];
             case 180:return [0,Instruction_length[1],_h$_,_h__];
             case 181:return [0,Instruction_length[1],_ib_,_ia_];
             case 182:return [0,Instruction_length[1],_id_,_ic_];
             case 183:return [0,Instruction_length[1],_if_,_ie_];
             case 184:return [0,Instruction_length[1],_ih_,_ig_];
             case 185:return [0,Instruction_length[1],_ij_,_ii_];
             case 186:return [0,Instruction_length[1],_il_,_ik_];
             case 187:return [0,Instruction_length[1],_in_,_im_];
             case 188:return [0,Instruction_length[1],_ip_,_io_];
             case 189:return [0,Instruction_length[1],_ir_,_iq_];
             case 190:return [0,Instruction_length[1],_it_,_is_];
             default:return [0,Instruction_length[1],_iv_,_iu_]}
          switch(_wf_)
           {case 128:return [0,Instruction_length[1],_gx_,_gw_];
            case 129:return [0,Instruction_length[1],_gz_,_gy_];
            case 130:return [0,Instruction_length[1],_gB_,_gA_];
            case 131:return [0,Instruction_length[1],_gD_,_gC_];
            case 132:return [0,Instruction_length[1],_gF_,_gE_];
            case 133:return [0,Instruction_length[1],_gH_,_gG_];
            case 134:return [0,Instruction_length[1],_gJ_,_gI_];
            case 135:return [0,Instruction_length[1],_gL_,_gK_];
            case 136:return [0,Instruction_length[1],_gN_,_gM_];
            case 137:return [0,Instruction_length[1],_gP_,_gO_];
            case 138:return [0,Instruction_length[1],_gR_,_gQ_];
            case 139:return [0,Instruction_length[1],_gT_,_gS_];
            case 140:return [0,Instruction_length[1],_gV_,_gU_];
            case 141:return [0,Instruction_length[1],_gX_,_gW_];
            case 142:return [0,Instruction_length[1],_gZ_,_gY_];
            case 143:return [0,Instruction_length[1],_g1_,_g0_];
            case 144:return [0,Instruction_length[1],_g3_,_g2_];
            case 145:return [0,Instruction_length[1],_g5_,_g4_];
            case 146:return [0,Instruction_length[1],_g7_,_g6_];
            case 147:return [0,Instruction_length[1],_g9_,_g8_];
            case 148:return [0,Instruction_length[1],_g$_,_g__];
            case 149:return [0,Instruction_length[1],_hb_,_ha_];
            case 150:return [0,Instruction_length[1],_hd_,_hc_];
            case 151:return [0,Instruction_length[1],_hf_,_he_];
            case 152:return [0,Instruction_length[1],_hh_,_hg_];
            case 153:return [0,Instruction_length[1],_hj_,_hi_];
            case 154:return [0,Instruction_length[1],_hl_,_hk_];
            case 155:return [0,Instruction_length[1],_hn_,_hm_];
            case 156:return [0,Instruction_length[1],_hp_,_ho_];
            case 157:return [0,Instruction_length[1],_hr_,_hq_];
            case 158:return [0,Instruction_length[1],_ht_,_hs_];
            default:return [0,Instruction_length[1],_hv_,_hu_]}}
        if(64 <= _wf_)
         {if(96 <= _wf_)
           switch(_wf_)
            {case 96:return [0,Instruction_length[1],_fy_,_fx_];
             case 97:return [0,Instruction_length[1],_fA_,_fz_];
             case 98:return [0,Instruction_length[1],_fC_,_fB_];
             case 99:return [0,Instruction_length[1],_fE_,_fD_];
             case 100:return [0,Instruction_length[1],_fG_,_fF_];
             case 101:return [0,Instruction_length[1],_fI_,_fH_];
             case 102:return [0,Instruction_length[1],_fK_,_fJ_];
             case 103:return [0,Instruction_length[1],_fM_,_fL_];
             case 104:return [0,Instruction_length[1],_fO_,_fN_];
             case 105:return [0,Instruction_length[1],_fQ_,_fP_];
             case 106:return [0,Instruction_length[1],_fS_,_fR_];
             case 107:return [0,Instruction_length[1],_fU_,_fT_];
             case 108:return [0,Instruction_length[1],_fW_,_fV_];
             case 109:return [0,Instruction_length[1],_fY_,_fX_];
             case 110:return [0,Instruction_length[1],_f0_,_fZ_];
             case 111:return [0,Instruction_length[1],_f2_,_f1_];
             case 112:return [0,Instruction_length[1],_f4_,_f3_];
             case 113:return [0,Instruction_length[1],_f6_,_f5_];
             case 114:return [0,Instruction_length[1],_f8_,_f7_];
             case 115:return [0,Instruction_length[1],_f__,_f9_];
             case 116:return [0,Instruction_length[1],_ga_,_f$_];
             case 117:return [0,Instruction_length[1],_gc_,_gb_];
             case 118:return [0,Instruction_length[1],_gd_,5];
             case 119:return [0,Instruction_length[1],_gf_,_ge_];
             case 120:return [0,Instruction_length[1],_gh_,_gg_];
             case 121:return [0,Instruction_length[1],_gj_,_gi_];
             case 122:return [0,Instruction_length[1],_gl_,_gk_];
             case 123:return [0,Instruction_length[1],_gn_,_gm_];
             case 124:return [0,Instruction_length[1],_gp_,_go_];
             case 125:return [0,Instruction_length[1],_gr_,_gq_];
             case 126:return [0,Instruction_length[1],_gt_,_gs_];
             default:return [0,Instruction_length[1],_gv_,_gu_]}
          switch(_wf_)
           {case 64:return [0,Instruction_length[1],_ey_,_ex_];
            case 65:return [0,Instruction_length[1],_eA_,_ez_];
            case 66:return [0,Instruction_length[1],_eC_,_eB_];
            case 67:return [0,Instruction_length[1],_eE_,_eD_];
            case 68:return [0,Instruction_length[1],_eG_,_eF_];
            case 69:return [0,Instruction_length[1],_eI_,_eH_];
            case 70:return [0,Instruction_length[1],_eK_,_eJ_];
            case 71:return [0,Instruction_length[1],_eM_,_eL_];
            case 72:return [0,Instruction_length[1],_eO_,_eN_];
            case 73:return [0,Instruction_length[1],_eQ_,_eP_];
            case 74:return [0,Instruction_length[1],_eS_,_eR_];
            case 75:return [0,Instruction_length[1],_eU_,_eT_];
            case 76:return [0,Instruction_length[1],_eW_,_eV_];
            case 77:return [0,Instruction_length[1],_eY_,_eX_];
            case 78:return [0,Instruction_length[1],_e0_,_eZ_];
            case 79:return [0,Instruction_length[1],_e2_,_e1_];
            case 80:return [0,Instruction_length[1],_e4_,_e3_];
            case 81:return [0,Instruction_length[1],_e6_,_e5_];
            case 82:return [0,Instruction_length[1],_e8_,_e7_];
            case 83:return [0,Instruction_length[1],_e__,_e9_];
            case 84:return [0,Instruction_length[1],_fa_,_e$_];
            case 85:return [0,Instruction_length[1],_fc_,_fb_];
            case 86:return [0,Instruction_length[1],_fe_,_fd_];
            case 87:return [0,Instruction_length[1],_fg_,_ff_];
            case 88:return [0,Instruction_length[1],_fi_,_fh_];
            case 89:return [0,Instruction_length[1],_fk_,_fj_];
            case 90:return [0,Instruction_length[1],_fm_,_fl_];
            case 91:return [0,Instruction_length[1],_fo_,_fn_];
            case 92:return [0,Instruction_length[1],_fq_,_fp_];
            case 93:return [0,Instruction_length[1],_fs_,_fr_];
            case 94:return [0,Instruction_length[1],_fu_,_ft_];
            default:return [0,Instruction_length[1],_fw_,_fv_]}}
        if(32 <= _wf_)
         switch(_wf_)
          {case 32:
            var _vJ_=[30,1,of_byte(next_byte(0))];
            return [0,Instruction_length[2],_dG_,_vJ_];
           case 33:
            var _vK_=[1,_dH_,[1,next_word(0)]];
            return [0,Instruction_length[3],_dI_,_vK_];
           case 34:return [0,Instruction_length[1],_dK_,_dJ_];
           case 35:return [0,Instruction_length[1],_dM_,_dL_];
           case 36:return [0,Instruction_length[1],_dO_,_dN_];
           case 37:return [0,Instruction_length[1],_dQ_,_dP_];
           case 38:
            var _vL_=[0,_dR_,[0,next_byte(0)]];
            return [0,Instruction_length[2],_dS_,_vL_];
           case 39:return [0,Instruction_length[1],_dT_,0];
           case 40:
            var _vM_=[30,2,of_byte(next_byte(0))];
            return [0,Instruction_length[2],_dU_,_vM_];
           case 41:return [0,Instruction_length[1],_dW_,_dV_];
           case 42:return [0,Instruction_length[1],_dY_,_dX_];
           case 43:return [0,Instruction_length[1],_d0_,_dZ_];
           case 44:return [0,Instruction_length[1],_d2_,_d1_];
           case 45:return [0,Instruction_length[1],_d4_,_d3_];
           case 46:
            var _vN_=[0,_d5_,[0,next_byte(0)]];
            return [0,Instruction_length[2],_d6_,_vN_];
           case 47:return [0,Instruction_length[1],_d7_,1];
           case 48:
            var _vO_=[30,3,of_byte(next_byte(0))];
            return [0,Instruction_length[2],_d8_,_vO_];
           case 49:
            var _vP_=[1,3,[1,next_word(0)]];
            return [0,Instruction_length[3],_d9_,_vP_];
           case 50:return [0,Instruction_length[1],_d$_,_d__];
           case 51:return [0,Instruction_length[1],_eb_,_ea_];
           case 52:return [0,Instruction_length[1],_ed_,_ec_];
           case 53:return [0,Instruction_length[1],_ef_,_ee_];
           case 54:
            var _vQ_=[0,_eg_,[0,next_byte(0)]];
            return [0,Instruction_length[2],_eh_,_vQ_];
           case 55:return [0,Instruction_length[1],_ei_,3];
           case 56:
            var _vR_=[30,4,of_byte(next_byte(0))];
            return [0,Instruction_length[2],_ej_,_vR_];
           case 57:return [0,Instruction_length[1],_el_,_ek_];
           case 58:return [0,Instruction_length[1],_en_,_em_];
           case 59:return [0,Instruction_length[1],_ep_,_eo_];
           case 60:return [0,Instruction_length[1],_er_,_eq_];
           case 61:return [0,Instruction_length[1],_et_,_es_];
           case 62:
            var _vS_=[0,_eu_,[0,next_byte(0)]];
            return [0,Instruction_length[2],_ev_,_vS_];
           default:return [0,Instruction_length[1],_ew_,2]}
        switch(_wf_)
         {case 0:return [0,Instruction_length[1],_cO_,4];
          case 1:
           var _vB_=[1,_cP_,[1,next_word(0)]];
           return [0,Instruction_length[3],_cQ_,_vB_];
          case 2:return [0,Instruction_length[1],_cS_,_cR_];
          case 3:return [0,Instruction_length[1],_cU_,_cT_];
          case 4:return [0,Instruction_length[1],_cW_,_cV_];
          case 5:return [0,Instruction_length[1],_cY_,_cX_];
          case 6:
           var _vC_=[0,_cZ_,[0,next_byte(0)]];
           return [0,Instruction_length[2],_c0_,_vC_];
          case 7:return [0,Instruction_length[1],_c1_,9];
          case 8:
           var _vD_=[1,[3,next_word(0)],3];
           return [0,Instruction_length[3],_c2_,_vD_];
          case 9:return [0,Instruction_length[1],_c4_,_c3_];
          case 10:return [0,Instruction_length[1],_c6_,_c5_];
          case 11:return [0,Instruction_length[1],_c8_,_c7_];
          case 12:return [0,Instruction_length[1],_c__,_c9_];
          case 13:return [0,Instruction_length[1],_da_,_c$_];
          case 14:
           var _vE_=[0,_db_,[0,next_byte(0)]];
           return [0,Instruction_length[2],_dc_,_vE_];
          case 15:return [0,Instruction_length[1],_dd_,11];
          case 16:next_byte(0);return [0,Instruction_length[2],_de_,6];
          case 17:
           var _vF_=[1,_df_,[1,next_word(0)]];
           return [0,Instruction_length[3],_dg_,_vF_];
          case 18:return [0,Instruction_length[1],_di_,_dh_];
          case 19:return [0,Instruction_length[1],_dk_,_dj_];
          case 20:return [0,Instruction_length[1],_dm_,_dl_];
          case 21:return [0,Instruction_length[1],_do_,_dn_];
          case 22:
           var _vG_=[0,_dp_,[0,next_byte(0)]];
           return [0,Instruction_length[2],_dq_,_vG_];
          case 23:return [0,Instruction_length[1],_dr_,10];
          case 24:
           var _vH_=[30,0,of_byte(next_byte(0))];
           return [0,Instruction_length[2],_ds_,_vH_];
          case 25:return [0,Instruction_length[1],_du_,_dt_];
          case 26:return [0,Instruction_length[1],_dw_,_dv_];
          case 27:return [0,Instruction_length[1],_dy_,_dx_];
          case 28:return [0,Instruction_length[1],_dA_,_dz_];
          case 29:return [0,Instruction_length[1],_dC_,_dB_];
          case 30:
           var _vI_=[0,_dD_,[0,next_byte(0)]];
           return [0,Instruction_length[2],_dE_,_vI_];
          default:return [0,Instruction_length[1],_dF_,12]}}
      return [0,RST_offset,Instruction_length,f]}
    function _r0_(_vA_){return [0,Make(_vA_)[3]]}
    function f(rom_bytes)
     {var type=get_cartridge_type(create$15(rom_bytes));
      if(type){if(4 <= type)throw [0,Assert_failure,_r1_];return _cF_}
      return _co_}
    function Make$0(Bus)
     {var Fetch_and_decode=_r0_(Bus);
      function create(bus,ic,registers,sp,pc,halted,ime)
       {return [0,registers,bus,ic,pc,sp,halted,ime,0,4]}
      function execute(t,branched_mcycles,not_branched_mcycles,inst)
       {var _ub_=t[1];
        function set_flags$0(_vv_,_vw_,_vx_,_vy_,_vz_)
         {return set_flags(_ub_,_vv_,_vw_,_vx_,_vy_,_vz_)}
        function read(arg)
         {if(typeof arg === "number")
           switch(arg)
            {case 0:
              var
               c=read_r(t[1],2),
               _vr_=of_uint8(c),
               addr=caml_call2(symbol$3,of_int$0(65280),_vr_);
              return caml_call2(Bus[1],t[2],addr);
             case 1:
              var addr$0=read_rr(t[1],3),_vs_=succ$0(addr$0);
              write_rr(t[1],3,_vs_);
              return caml_call2(Bus[1],t[2],addr$0);
             case 2:
              var addr$1=read_rr(t[1],3),_vt_=pred$0(addr$1);
              write_rr(t[1],3,_vt_);
              return caml_call2(Bus[1],t[2],addr$1);
             default:return t[5]}
          else
           switch(arg[0])
            {case 0:var n=arg[1];return n;
             case 1:var n$0=arg[1];return n$0;
             case 2:var addr$2=arg[1];return caml_call2(Bus[1],t[2],addr$2);
             case 3:var addr$3=arg[1];return caml_call2(Bus[4],t[2],addr$3);
             case 4:var r=arg[1];return read_r(t[1],r);
             case 5:var rr=arg[1];return read_rr(t[1],rr);
             case 6:
              var rr$0=arg[1],addr$4=read_rr(t[1],rr$0);
              return caml_call2(Bus[1],t[2],addr$4);
             case 7:
              var
               n$1=arg[1],
               _vu_=of_uint8(n$1),
               addr$5=caml_call2(symbol$3,of_int$0(65280),_vu_);
              return caml_call2(Bus[1],t[2],addr$5);
             default:
              var n$2=arg[1],sp=_b1_(t[5]),n$3=to_int(n$2);
              set_flags$0
               ([0,255 < ((sp & 255) + (n$3 & 255) | 0)?1:0],
                [0,15 < ((sp & 15) + (n$3 & 15) | 0)?1:0],
                _r3_,
                _r2_,
                0);
              return of_int$0(sp + n$3 | 0)}}
        function write(x,y)
         {if(typeof x === "number")
           switch(x)
            {case 0:
              var
               c=read_r(t[1],2),
               _vn_=of_uint8(c),
               addr=caml_call2(symbol$3,of_int$0(65280),_vn_);
              return caml_call3(Bus[2],t[2],addr,y);
             case 1:
              var addr$0=read_rr(t[1],3);
              caml_call3(Bus[2],t[2],addr$0,y);
              var _vo_=succ$0(addr$0);
              return write_rr(t[1],3,_vo_);
             case 2:
              var addr$1=read_rr(t[1],3);
              caml_call3(Bus[2],t[2],addr$1,y);
              var _vp_=pred$0(addr$1);
              return write_rr(t[1],3,_vp_);
             default:t[5] = y;return 0}
          else
           switch(x[0])
            {case 2:var addr$2=x[1];return caml_call3(Bus[2],t[2],addr$2,y);
             case 3:var addr$3=x[1];return caml_call3(Bus[5],t[2],addr$3,y);
             case 4:var r=x[1];return write_r(t[1],r,y);
             case 5:var rr=x[1];return write_rr(t[1],rr,y);
             case 6:
              var rr$0=x[1],addr$4=read_rr(t[1],rr$0);
              return caml_call3(Bus[2],t[2],addr$4,y);
             case 7:
              var
               n=x[1],
               _vq_=of_uint8(n),
               addr$5=caml_call2(symbol$3,of_int$0(65280),_vq_);
              return caml_call3(Bus[2],t[2],addr$5,y);
             default:return failwith(sprintf(_r4_))}}
        function symbol$5(x,y){return write(x,y)}
        function check_condition(t,param)
         {switch(param)
           {case 0:return 1;
            case 1:return 1 - read_flag(t[1],3);
            case 2:return read_flag(t[1],3);
            case 3:return 1 - read_flag(t[1],0);
            default:return read_flag(t[1],0)}}
        if(typeof inst === "number")
         switch(inst)
          {case 0:
            var
             n_flag=read_flag(t[1],2),
             c_flag=read_flag(t[1],0),
             h_flag=read_flag(t[1],1),
             a=[0,read_r(t[1],0)];
            if(n_flag)
             {if(c_flag)
               {var _uc_=of_int(96);a[1] = caml_call2(symbol$0,a[1],_uc_)}
              if(h_flag)
               {var _ud_=of_int(6);a[1] = caml_call2(symbol$0,a[1],_ud_)}}
            else
             {if(c_flag)
               var c_flag$0=c_flag;
              else
               var _ui_=of_int(153),c_flag$0=caml_greaterthan(a[1],_ui_);
              if(c_flag$0)
               {var _ue_=of_int(96);
                a[1] = caml_call2(symbol,a[1],_ue_);
                set_flags$0(_r6_,0,0,0,0)}
              if(h_flag)
               var h_flag$0=h_flag;
              else
               var
                _ug_=of_int(9),
                _uh_=of_int(15),
                h_flag$0=caml_greaterthan(caml_call2(land,a[1],_uh_),_ug_);
              if(h_flag$0)
               {var _uf_=of_int(6);a[1] = caml_call2(symbol,a[1],_uf_)}}
            set_flags$0(0,_r5_,0,[0,caml_call2(symbol$1,a[1],zero)],0);
            write_r(t[1],0,a[1]);
            var next_pc=0;
            break;
           case 1:
            set_flags$0(0,_r8_,_r7_,0,0);
            var
             _uj_=read_r(t[1],0),
             _uk_=function(n){return caml_call2(lxor,n,max_int)}(_uj_),
             _ul_=0,
             _um_=t[1];
            (function(_vm_){return write_r(_um_,_ul_,_vm_)}(_uk_));
            var next_pc=0;
            break;
           case 2:
            var c=read_flag(t[1],0);
            set_flags$0([0,1 - c],_r__,_r9_,0,0);
            var next_pc=0;
            break;
           case 3:set_flags$0(_sb_,_sa_,_r$_,0,0);var next_pc=0;break;
           case 4:var next_pc=0;break;
           case 5:t[6] = 1;var next_pc=0;break;
           case 6:throw [0,Assert_failure,_sc_];
           case 7:t[8] = 0;t[7] = 0;var next_pc=0;break;
           case 8:t[8] = 1;var next_pc=0;break;
           case 9:
            var
             a$0=read_r(t[1],0),
             c$0=caml_call2(symbol$2,caml_call2(land,a$0,of_int(128)),zero),
             _un_=c$0?one:zero,
             n=caml_call2(lor,caml_call2(lsl,a$0,1),_un_);
            write_r(t[1],0,n);
            set_flags$0([0,c$0],_sf_,_se_,_sd_,0);
            var next_pc=0;
            break;
           case 10:
            var
             a$1=read_r(t[1],0),
             old_c=read_flag(t[1],0),
             _uo_=old_c?one:zero,
             n$0=caml_call2(lor,caml_call2(lsl,a$1,1),_uo_);
            write_r(t[1],0,n$0);
            var
             new_c=
              caml_call2(symbol$2,caml_call2(land,a$1,of_int(128)),zero);
            set_flags$0([0,new_c],_si_,_sh_,_sg_,0);
            var next_pc=0;
            break;
           case 11:
            var
             a$2=read_r(t[1],0),
             c$1=caml_call2(symbol$2,caml_call2(land,a$2,of_int(1)),zero),
             _up_=c$1?of_int(128):zero,
             n$1=caml_call2(lor,caml_call2(lsr,a$2,1),_up_);
            write_r(t[1],0,n$1);
            set_flags$0([0,c$1],_sl_,_sk_,_sj_,0);
            var next_pc=0;
            break;
           case 12:
            var
             a$3=read_r(t[1],0),
             old_c$0=read_flag(t[1],0),
             _uq_=old_c$0?of_int(128):zero,
             n$2=caml_call2(lor,caml_call2(lsr,a$3,1),_uq_);
            write_r(t[1],0,n$2);
            var
             new_c$0=
              caml_call2(symbol$2,caml_call2(land,a$3,of_int(1)),zero);
            set_flags$0([0,new_c$0],_so_,_sn_,_sm_,0);
            var next_pc=0;
            break;
           default:
            var addr$0=caml_call2(Bus[4],t[2],t[5]),_ur_=of_int$0(2);
            t[5] = caml_call2(symbol$3,t[5],_ur_);
            t[7] = 1;
            var next_pc=[0,addr$0]}
        else
         switch(inst[0])
          {case 0:
            var y=inst[2],x=inst[1];symbol$5(x,read(y));var next_pc=0;break;
           case 1:
            var y$0=inst[2],x$0=inst[1];
            symbol$5(x$0,read(y$0));
            var next_pc=0;
            break;
           case 2:
            var
             y$1=inst[2],
             x$1=inst[1],
             y$2=read(y$1),
             x$2=read(x$1),
             n$3=caml_call2(symbol,x$2,y$2),
             _us_=[0,caml_equal(n$3,zero)],
             _ut_=of_int(15),
             _uu_=caml_call2(land,y$2,of_int(15)),
             _uv_=
              [0,
               caml_greaterthan
                (caml_call2(symbol,caml_call2(land,x$2,of_int(15)),_uu_),_ut_)];
            set_flags$0
             ([0,caml_greaterthan(x$2,caml_call2(symbol$0,of_int(255),y$2))],
              _uv_,
              _sp_,
              _us_,
              0);
            symbol$5(x$1,n$3);
            var next_pc=0;
            break;
           case 3:
            var
             y$3=inst[2],
             x$3=inst[1],
             y$4=read(y$3),
             x$4=read(x$3),
             n$4=caml_call2(symbol$3,x$4,y$4),
             _uw_=of_int$0(4095),
             _ux_=caml_call2(land$0,y$4,of_int$0(4095)),
             _uy_=
              [0,
               caml_greaterthan
                (caml_call2
                  (symbol$3,caml_call2(land$0,x$4,of_int$0(4095)),_ux_),
                 _uw_)];
            set_flags$0
             ([0,
               caml_greaterthan(x$4,caml_call2(symbol$4,of_int$0(65535),y$4))],
              _uy_,
              _sq_,
              0,
              0);
            symbol$5(x$3,n$4);
            var next_pc=0;
            break;
           case 4:
            var y$5=inst[1],x$5=_b1_(read(3)),y$6=to_int(y$5);
            set_flags$0
             ([0,255 < ((x$5 & 255) + (y$6 & 255) | 0)?1:0],
              [0,15 < ((x$5 & 15) + (y$6 & 15) | 0)?1:0],
              _ss_,
              _sr_,
              0);
            symbol$5(3,of_int$0(x$5 + y$6 | 0));
            var next_pc=0;
            break;
           case 5:
            var
             y$7=inst[2],
             x$6=inst[1],
             c$2=read_flag(t[1],0)?one:zero,
             y$8=read(y$7),
             x$7=read(x$6),
             n$5=caml_call2(symbol,caml_call2(symbol,x$7,y$8),c$2),
             _uz_=[0,caml_equal(n$5,zero)],
             _uA_=of_int(15),
             _uB_=caml_call2(land,y$8,of_int(15)),
             _uC_=
              [0,
               caml_greaterthan
                (caml_call2
                  (symbol,
                   caml_call2(symbol,caml_call2(land,x$7,of_int(15)),_uB_),
                   c$2),
                 _uA_)],
             _uD_=_b2_(c$2),
             _uE_=_b2_(y$8);
            set_flags$0
             ([0,255 < ((_b2_(x$7) + _uE_ | 0) + _uD_ | 0)?1:0],
              _uC_,
              _st_,
              _uz_,
              0);
            symbol$5(x$6,n$5);
            var next_pc=0;
            break;
           case 6:
            var
             y$9=inst[2],
             x$8=inst[1],
             y$10=read(y$9),
             x$9=read(x$8),
             n$6=caml_call2(symbol$0,x$9,y$10),
             _uF_=[0,caml_equal(n$6,zero)],
             _uG_=caml_call2(land,y$10,of_int(15)),
             _uH_=[0,caml_lessthan(caml_call2(land,x$9,of_int(15)),_uG_)],
             _uI_=_b2_(y$10);
            set_flags$0([0,_b2_(x$9) < _uI_?1:0],_uH_,_su_,_uF_,0);
            symbol$5(x$8,n$6);
            var next_pc=0;
            break;
           case 7:
            var
             y$11=inst[2],
             x$10=inst[1],
             c$3=read_flag(t[1],0)?one:zero,
             y$12=read(y$11),
             x$11=read(x$10),
             n$7=caml_call2(symbol$0,x$11,caml_call2(symbol,y$12,c$3)),
             _uJ_=[0,caml_equal(n$7,zero)],
             _uK_=caml_call2(symbol,caml_call2(land,y$12,of_int(15)),c$3),
             _uL_=[0,caml_lessthan(caml_call2(land,x$11,of_int(15)),_uK_)],
             _uM_=_b2_(c$3),
             _uN_=_b2_(y$12) + _uM_ | 0;
            set_flags$0([0,_b2_(x$11) < _uN_?1:0],_uL_,_sv_,_uJ_,0);
            symbol$5(x$10,n$7);
            var next_pc=0;
            break;
           case 8:
            var
             y$13=inst[2],
             x$12=inst[1],
             _uO_=read(y$13),
             n$8=caml_call2(land,read(x$12),_uO_);
            set_flags$0(_sy_,_sx_,_sw_,[0,caml_equal(n$8,zero)],0);
            symbol$5(x$12,n$8);
            var next_pc=0;
            break;
           case 9:
            var
             y$14=inst[2],
             x$13=inst[1],
             _uP_=read(y$14),
             n$9=caml_call2(lor,read(x$13),_uP_);
            set_flags$0(_sB_,_sA_,_sz_,[0,caml_equal(n$9,zero)],0);
            symbol$5(x$13,n$9);
            var next_pc=0;
            break;
           case 10:
            var
             y$15=inst[2],
             x$14=inst[1],
             _uQ_=read(y$15),
             n$10=caml_call2(lxor,read(x$14),_uQ_);
            set_flags$0(_sE_,_sD_,_sC_,[0,caml_equal(n$10,zero)],0);
            symbol$5(x$14,n$10);
            var next_pc=0;
            break;
           case 11:
            var
             y$16=inst[2],
             x$15=inst[1],
             y$17=read(y$16),
             x$16=read(x$15),
             n$11=caml_call2(symbol$0,x$16,y$17),
             _uR_=[0,caml_equal(n$11,zero)],
             _uS_=caml_call2(land,y$17,of_int(15)),
             _uT_=[0,caml_lessthan(caml_call2(land,x$16,of_int(15)),_uS_)],
             _uU_=_b2_(y$17);
            set_flags$0([0,_b2_(x$16) < _uU_?1:0],_uT_,_sF_,_uR_,0);
            var next_pc=0;
            break;
           case 12:
            var
             x$17=inst[1],
             x$18=read(x$17),
             n$12=succ(x$18),
             _uV_=[0,caml_equal(n$12,zero)],
             _uW_=of_int(15);
            set_flags$0
             (0,
              [0,caml_call2(symbol$1,caml_call2(land,x$18,of_int(15)),_uW_)],
              _sG_,
              _uV_,
              0);
            symbol$5(x$17,n$12);
            var next_pc=0;
            break;
           case 13:
            var x$19=inst[1];
            symbol$5(x$19,succ$0(read(x$19)));
            var next_pc=0;
            break;
           case 14:
            var
             x$20=inst[1],
             x$21=read(x$20),
             n$13=pred(x$21),
             _uX_=[0,caml_equal(n$13,zero)],
             _uY_=of_int(0);
            set_flags$0
             (0,
              [0,caml_call2(symbol$1,caml_call2(land,x$21,of_int(15)),_uY_)],
              _sH_,
              _uX_,
              0);
            symbol$5(x$20,n$13);
            var next_pc=0;
            break;
           case 15:
            var x$22=inst[1];
            symbol$5(x$22,pred$0(read(x$22)));
            var next_pc=0;
            break;
           case 16:
            var
             x$23=inst[1],
             x$24=read(x$23),
             _uZ_=caml_call2(lsr,x$24,4),
             n$14=caml_call2(lor,caml_call2(lsl,x$24,4),_uZ_);
            set_flags$0(_sK_,_sJ_,_sI_,[0,caml_equal(n$14,zero)],0);
            symbol$5(x$23,n$14);
            var next_pc=0;
            break;
           case 17:
            var
             x$25=inst[1],
             x$26=read(x$25),
             c$4=caml_call2(symbol$2,caml_call2(land,x$26,of_int(128)),zero),
             _u0_=c$4?one:zero,
             n$15=caml_call2(lor,caml_call2(lsl,x$26,1),_u0_);
            symbol$5(x$25,n$15);
            set_flags$0
             ([0,c$4],_sM_,_sL_,[0,caml_call2(symbol$1,n$15,zero)],0);
            var next_pc=0;
            break;
           case 18:
            var
             x$27=inst[1],
             x$28=read(x$27),
             old_c$1=read_flag(t[1],0),
             _u1_=old_c$1?one:zero,
             n$16=caml_call2(lor,caml_call2(lsl,x$28,1),_u1_);
            symbol$5(x$27,n$16);
            var
             new_c$1=
              caml_call2(symbol$2,caml_call2(land,x$28,of_int(128)),zero);
            set_flags$0
             ([0,new_c$1],_sO_,_sN_,[0,caml_call2(symbol$1,n$16,zero)],0);
            var next_pc=0;
            break;
           case 19:
            var
             x$29=inst[1],
             x$30=read(x$29),
             c$5=caml_call2(symbol$2,caml_call2(land,x$30,of_int(1)),zero),
             _u2_=c$5?of_int(128):zero,
             n$17=caml_call2(lor,caml_call2(lsr,x$30,1),_u2_);
            symbol$5(x$29,n$17);
            set_flags$0
             ([0,c$5],_sQ_,_sP_,[0,caml_call2(symbol$1,n$17,zero)],0);
            var next_pc=0;
            break;
           case 20:
            var
             x$31=inst[1],
             x$32=read(x$31),
             old_c$2=read_flag(t[1],0),
             _u3_=old_c$2?of_int(128):zero,
             n$18=caml_call2(lor,caml_call2(lsr,x$32,1),_u3_);
            symbol$5(x$31,n$18);
            var _u4_=[0,caml_call2(symbol$1,n$18,zero)];
            set_flags$0
             ([0,caml_call2(symbol$2,caml_call2(land,x$32,of_int(1)),zero)],
              _sS_,
              _sR_,
              _u4_,
              0);
            var next_pc=0;
            break;
           case 21:
            var x$33=inst[1],x$34=read(x$33),n$19=caml_call2(lsl,x$34,1);
            symbol$5(x$33,n$19);
            var _u5_=[0,caml_call2(symbol$1,n$19,zero)];
            set_flags$0
             ([0,caml_call2(symbol$2,caml_call2(land,x$34,of_int(128)),zero)],
              _sU_,
              _sT_,
              _u5_,
              0);
            var next_pc=0;
            break;
           case 22:
            var
             x$35=inst[1],
             x$36=read(x$35),
             _u6_=caml_call2(land,x$36,of_int(128)),
             n$20=caml_call2(lor,caml_call2(lsr,x$36,1),_u6_);
            symbol$5(x$35,n$20);
            var _u7_=[0,caml_call2(symbol$1,n$20,zero)];
            set_flags$0
             ([0,caml_call2(symbol$2,caml_call2(land,x$36,of_int(1)),zero)],
              _sW_,
              _sV_,
              _u7_,
              0);
            var next_pc=0;
            break;
           case 23:
            var x$37=inst[1],x$38=read(x$37),n$21=caml_call2(lsr,x$38,1);
            symbol$5(x$37,n$21);
            var _u8_=[0,caml_call2(symbol$1,n$21,zero)];
            set_flags$0
             ([0,caml_call2(symbol$2,caml_call2(land,x$38,of_int(1)),zero)],
              _sY_,
              _sX_,
              _u8_,
              0);
            var next_pc=0;
            break;
           case 24:
            var
             x$39=inst[2],
             n$22=inst[1],
             _u9_=caml_call2(lsl,one,n$22),
             b=caml_call2(symbol$1,caml_call2(land,read(x$39),_u9_),zero);
            set_flags$0(0,_s0_,_sZ_,[0,b],0);
            var next_pc=0;
            break;
           case 25:
            var x$40=inst[2],n$23=inst[1],_u__=caml_call2(lsl,one,n$23);
            symbol$5(x$40,caml_call2(lor,read(x$40),_u__));
            var next_pc=0;
            break;
           case 26:
            var
             x$41=inst[2],
             n$24=inst[1],
             _u$_=of_int(255),
             mask=caml_call2(lxor,caml_call2(lsl,one,n$24),_u$_);
            symbol$5(x$41,caml_call2(land,read(x$41),mask));
            var next_pc=0;
            break;
           case 27:
            var rr=inst[1],_va_=of_int$0(2);
            t[5] = caml_call2(symbol$4,t[5],_va_);
            var _vb_=read_rr(t[1],rr);
            caml_call3(Bus[5],t[2],t[5],_vb_);
            var next_pc=0;
            break;
           case 28:
            var rr$0=inst[1],_vc_=caml_call2(Bus[4],t[2],t[5]);
            write_rr(t[1],rr$0,_vc_);
            var _vd_=of_int$0(2);
            t[5] = caml_call2(symbol$3,t[5],_vd_);
            var next_pc=0;
            break;
           case 29:
            var
             x$42=inst[2],
             c$6=inst[1],
             _ve_=check_condition(t,c$6)?[0,read(x$42)]:0,
             next_pc=_ve_;
            break;
           case 30:
            var x$43=inst[2],c$7=inst[1];
            if(check_condition(t,c$7))
             var
              _vf_=to_int(x$43),
              addr$1=of_int$0(_b1_(t[4]) + _vf_ | 0),
              _vg_=[0,addr$1];
            else
             var _vg_=0;
            var next_pc=_vg_;
            break;
           case 31:
            var x$44=inst[2],c$8=inst[1];
            if(check_condition(t,c$8))
             {var _vh_=of_int$0(2);
              t[5] = caml_call2(symbol$4,t[5],_vh_);
              caml_call3(Bus[5],t[2],t[5],t[4]);
              var _vi_=[0,x$44]}
            else
             var _vi_=0;
            var next_pc=_vi_;
            break;
           case 32:
            var x$45=inst[1],_vj_=of_int$0(2);
            t[5] = caml_call2(symbol$4,t[5],_vj_);
            caml_call3(Bus[5],t[2],t[5],t[4]);
            var next_pc=[0,x$45];
            break;
           default:
            var c$9=inst[1];
            if(check_condition(t,c$9))
             {var addr$2=caml_call2(Bus[4],t[2],t[5]),_vk_=of_int$0(2);
              t[5] = caml_call2(symbol$3,t[5],_vk_);
              var _vl_=[0,addr$2]}
            else
             var _vl_=0;
            var next_pc=_vl_}
        t[9] = inst;
        if(next_pc){var addr=next_pc[1];t[4] = addr;return branched_mcycles}
        return not_branched_mcycles}
      function run_instruction(t)
       {function fetch_decode_execute(t)
         {if(t[6])return 4;
          var
           match=caml_call2(Fetch_and_decode[1],t[2],t[4]),
           inst=match[3],
           mcycles=match[2],
           len=match[1];
          t[4] = caml_call2(symbol$3,t[4],len);
          return execute(t,mcycles[2],mcycles[1],inst)}
        function handle_interrupt(t)
         {var match=next(t[3]);
          if(match)
           {var type=match[1];
            t[6] = 0;
            if(t[7])
             {t[7] = 0;
              clear(t[3],type);
              switch(type)
               {case 0:var addr=of_int$0(64);break;
                case 1:var addr=of_int$0(72);break;
                case 2:var addr=of_int$0(80);break;
                case 3:var addr=of_int$0(88);break;
                default:var addr=of_int$0(96)}
              var _ua_=of_int$0(2);
              t[5] = caml_call2(symbol$4,t[5],_ua_);
              caml_call3(Bus[5],t[2],t[5],t[4]);
              t[4] = addr;
              return 5}
            return 0}
          return 0}
        if(t[8]){t[7] = 1;t[8] = 0}
        var
         inst_mcycles=fetch_decode_execute(t),
         interrupt_mcycles=handle_interrupt(t);
        return inst_mcycles + interrupt_mcycles | 0}
      function show(t)
       {var
         _t9_=caml_call1(show$0,t[4]),
         _t__=caml_call1(show$0,t[5]),
         _t$_=show$1(t[1]);
        return caml_call3(sprintf(_s1_),_t$_,_t__,_t9_)}
      function prev_inst(t){return t[9]}
      var For_tests=[0,execute,prev_inst];
      return [0,
              Fetch_and_decode,
              create,
              execute,
              run_instruction,
              show,
              For_tests]}
    function _s2_(_t7_)
     {var _t8_=Make$0(_t7_);return [0,_t8_[2],_t8_[4],_t8_[5],_t8_[6]]}
    function Make$1(Cartridge)
     {function create
       (cartridge,
        wram,
        gpu,
        zero_page,
        shadow_ram,
        joypad,
        serial_port,
        ic,
        timer,
        dma_transfer)
       {return [0,
                cartridge,
                wram,
                shadow_ram,
                gpu,
                zero_page,
                joypad,
                serial_port,
                ic,
                timer,
                dma_transfer]}
      function read_byte$1(t,addr)
       {return caml_call2(Cartridge[3],t[1],addr)
                ?caml_call2(Cartridge[1],t[1],addr)
                :accepts$3(t[2],addr)
                  ?read_byte$3(t[2],addr)
                  :accepts$3(t[5],addr)
                    ?read_byte$3(t[5],addr)
                    :accepts$15(t[4],addr)
                      ?read_byte$15(t[4],addr)
                      :accepts$14(t[6],addr)
                        ?read_byte$14(t[6],addr)
                        :accepts$4(t[3],addr)
                          ?read_byte$4(t[3],addr)
                          :accepts$6(t[7],addr)
                            ?read_byte$6(t[7],addr)
                            :accepts(t[8],addr)
                              ?read_byte(t[8],addr)
                              :accepts$0(t[9],addr)
                                ?read_byte$0(t[9],addr)
                                :accepts$5(t[10],addr)?read_byte$5(t[10],addr):of_int(255)}
      function write_byte$1(t,addr,data)
       {function dma_transfer(source)
         {var source$0=caml_call2(lsl$0,of_uint8(source),8),i=0;
          for(;;)
           {var data=read_byte$1(t,caml_call2(symbol$3,source$0,of_int$0(i)));
            write_oam_with_offset(t[4],i,data);
            var _t6_=i + 1 | 0;
            if(159 !== i){var i=_t6_;continue}
            return 0}}
        return caml_call2(Cartridge[3],t[1],addr)
                ?caml_call3(Cartridge[2],t[1],addr,data)
                :accepts$3(t[2],addr)
                  ?write_byte$3(t[2],addr,data)
                  :accepts$3(t[5],addr)
                    ?write_byte$3(t[5],addr,data)
                    :accepts$15(t[4],addr)
                      ?write_byte$15(t[4],addr,data)
                      :accepts$14(t[6],addr)
                        ?write_byte$14(t[6],addr,data)
                        :accepts$4(t[3],addr)
                          ?write_byte$4(t[3],addr,data)
                          :accepts$6(t[7],addr)
                            ?write_byte$6(t[7],addr,data)
                            :accepts(t[8],addr)
                              ?write_byte(t[8],addr,data)
                              :accepts$0(t[9],addr)
                                ?write_byte$0(t[9],addr,data)
                                :accepts$5(t[10],addr)
                                  ?(write_byte$5(t[10],addr,data),dma_transfer(data))
                                  :0}
      function accepts$1(t,addr)
       {var _tV_=caml_call2(Cartridge[3],t[1],addr);
        if(_tV_)
         var _tW_=_tV_;
        else
         {var _tX_=accepts$3(t[2],addr);
          if(_tX_)
           var _tW_=_tX_;
          else
           {var _tY_=accepts$15(t[4],addr);
            if(_tY_)
             var _tW_=_tY_;
            else
             {var _tZ_=accepts$3(t[5],addr);
              if(_tZ_)
               var _tW_=_tZ_;
              else
               {var _t0_=accepts$4(t[3],addr);
                if(_t0_)
                 var _tW_=_t0_;
                else
                 {var _t1_=accepts$4(t[3],addr);
                  if(_t1_)
                   var _tW_=_t1_;
                  else
                   {var _t2_=accepts$14(t[6],addr);
                    if(_t2_)
                     var _tW_=_t2_;
                    else
                     {var _t3_=accepts$6(t[7],addr);
                      if(_t3_)
                       var _tW_=_t3_;
                      else
                       {var _t4_=accepts(t[8],addr);
                        if(_t4_)
                         var _tW_=_t4_;
                        else
                         {var _t5_=accepts$0(t[9],addr);
                          if(! _t5_)return accepts$5(t[10],addr);
                          var _tW_=_t5_}}}}}}}}}
        return _tW_}
      function read_word(t,addr)
       {var lo=_b2_(read_byte$1(t,addr)),hi=_b2_(read_byte$1(t,succ$0(addr)));
        return of_int$0((hi << 8) + lo | 0)}
      function write_word(t,addr,data)
       {var
         data$0=_b1_(data),
         hi=of_int(data$0 >>> 8 | 0),
         lo=of_int(data$0 & 255);
        write_byte$1(t,addr,lo);
        return write_byte$1(t,succ$0(addr),hi)}
      return [0,
              create,
              read_byte$1,
              write_byte$1,
              accepts$1,
              read_word,
              write_word]}
    function Make$2(Cartridge)
     {var
       Bus=Make$1([0,Cartridge[2],Cartridge[3],Cartridge[4]]),
       Cpu=_s2_([0,Bus[2],Bus[3],Bus[4],Bus[5],Bus[6]]);
      function show(t){return caml_call1(Cpu[3],t[1])}
      function initialize_state(registers,bus,lcd_stat)
       {set_flags(registers,_s6_,_s5_,_s4_,_s3_,0);
        function _tP_(param)
         {var data=param[2],reg=param[1];
          return write_rr(registers,reg,of_int$0(data))}
        (function(_tU_){return iter(_tP_,_tU_)}(_s7_));
        function _tQ_(param)
         {var
           data=param[2],
           addr=param[1],
           _tS_=of_int(data),
           _tT_=of_int$0(addr);
          return caml_call3(Bus[3],bus,_tT_,_tS_)}
        (function(_tR_){return iter(_tQ_,_tR_)}(_s8_));
        return set_gpu_mode(lcd_stat,3)}
      var ly_addr=of_int$0(65348),lcd_stat_addr=of_int$0(65345);
      function create_with_rom(print_serial_port,rom_bytes)
       {var
         cartridge=caml_call1(Cartridge[1],rom_bytes),
         _tr_=of_int$0(57343),
         wram=create$7(of_int$0(49152),_tr_),
         _ts_=of_int$0(65023),
         _tt_=of_int$0(57344),
         shadow_ram=create$8(wram,of_int$0(49152),_tt_,_ts_),
         _tu_=of_int$0(65534),
         zero_page=create$7(of_int$0(65408),_tu_),
         _tv_=create$9(of_int$0(65282),18373,0,0),
         serial_port=
          create$10
           (create$9(of_int$0(65281),18373,0,0),_tv_,[0,print_serial_port],0),
         _tw_=of_int$0(65295),
         ic=create$3(of_int$0(65535),_tw_),
         _tx_=of_int$0(38911),
         tile_data=create$6(of_int$0(32768),_tx_),
         _ty_=of_int$0(40959),
         _tz_=of_int$0(39936),
         _tA_=of_int$0(39935),
         tile_map=create$5(of_int$0(38912),_tA_,_tz_,_ty_),
         _tB_=of_int$0(65183),
         oam_table=create$14(of_int$0(65024),_tB_),
         lcd_stat=create$17(lcd_stat_addr),
         joypad=create$20(of_int$0(65280),ic),
         _tC_=of_int$0(65355),
         _tD_=of_int$0(65354),
         _tE_=of_int$0(65349),
         _tF_=of_int$0(65347),
         _tG_=create$18(of_int$0(65346),_tF_,ly_addr,_tE_,_tD_,_tC_),
         _tH_=create$19(of_int$0(65344)),
         _tI_=create$13(of_int$0(65353)),
         _tJ_=create$13(of_int$0(65352)),
         gpu=
          create$21
           (tile_data,
            tile_map,
            oam_table,
            create$13(of_int$0(65351)),
            _tJ_,
            _tI_,
            lcd_stat,
            _tH_,
            _tG_,
            ic),
         _tK_=of_int$0(65287),
         _tL_=of_int$0(65286),
         _tM_=of_int$0(65285),
         timer=create$4(of_int$0(65284),_tM_,_tL_,_tK_,ic),
         dma_transfer=create$9(of_int$0(65350),18373,0,0),
         bus=
          caml_call10
           (Bus[1],
            cartridge,
            wram,
            gpu,
            zero_page,
            shadow_ram,
            joypad,
            serial_port,
            ic,
            timer,
            dma_transfer),
         registers=create$12(0),
         _tN_=of_int$0(256),
         _tO_=of_int$0(65534),
         cpu=caml_call7(Cpu[1],bus,ic,registers,_tO_,_tN_,0,0);
        initialize_state(registers,bus,lcd_stat);
        return [0,cpu,timer,gpu,joypad]}
      function run_instruction(t)
       {var mcycles=caml_call1(Cpu[2],t[1]);
        run(t[2],mcycles);
        return run$0(t[3],mcycles)}
      function press$0(t,key){return press(t[4],key)}
      function release$0(t,key){return release(t[4],key)}
      function prev_inst(t){return caml_call1(Cpu[4][2],t[1])}
      function get_ly(t){return _b2_(read_byte$15(t[3],ly_addr))}
      function get_lcd_stat(t){return read_byte$15(t[3],lcd_stat_addr)}
      function get_mcycles_in_mode$0(t){return get_mcycles_in_mode(t[3])}
      function get_tima_count$0(t){return get_tima_count(t[2])}
      var
       For_tests=
        [0,
         prev_inst,
         get_ly,
         get_lcd_stat,
         get_mcycles_in_mode$0,
         get_tima_count$0];
      return [0,
              Bus,
              Cpu,
              show,
              initialize_state,
              ly_addr,
              lcd_stat_addr,
              create_with_rom,
              run_instruction,
              press$0,
              release$0,
              For_tests]}
    function _s9_(_tp_)
     {var _tq_=Make$2(_tp_);
      return [0,_tq_[3],_tq_[7],_tq_[8],_tq_[9],_tq_[10],_tq_[11]]}
    function find_el_by_id$0(id)
     {return get$0(find_el_by_id(document,caml_jsstring_of_string(id)))}
    function run_rom_bytes(rom_bytes,frames)
     {var
       cartridge=f(rom_bytes),
       C=_s9_(cartridge),
       t=caml_call2(C[2],0,rom_bytes),
       frame_count=[0,0],
       _to_=now_ms(performance);
      for(;;)
       {if(frame_count[1] < frames)
         {var match=caml_call1(C[3],t);if(match)frame_count[1]++;continue}
        return now_ms(performance) - _to_}}
    function run_rom_blob(rom_blob,frames)
     {function _tn_(result)
       {if(0 === result[0])
         {var
           buf=result[1],
           rom_bytes=caml_ba_from_typed_array(of_buffer(3,0,0,buf));
          return run_rom_bytes(rom_bytes,frames)}
        var e=result[1];
        log([0,message(e),0]);
        return 0.}
      return let$0(array_buffer(rom_blob),_tn_)}
    function run_rom_path(rom_path,frames)
     {function _tl_(result)
       {if(0 === result[0])
         {var
           response=result[1],
           _tm_=
            function(result)
             {if(0 === result[0])
               {var blob=result[1];return run_rom_blob(blob,frames)}
              var e=result[1];
              log([0,message(e),0]);
              return return$0(0.)};
          return bind$0(blob(response),_tm_)}
        var e=result[1];
        log([0,message(e),0]);
        return return$0(0.)}
      return bind$0(url$0(0,caml_jsstring_of_string(rom_path)),_tl_)}
    function read_param(param_key,default$0)
     {var
       uri=location(window),
       param=of_jstr(query(uri)),
       match=find(caml_jsstring_of_string(param_key),param);
      if(match){var jstr=match[1];return caml_string_of_jsstring(jstr)}
      return default$0}
    function main(param)
     {var
       rom_path=read_param(_s$_,_s__),
       frames=caml_int_of_string(read_param(_tb_,_ta_));
      function _tk_(duration_ms)
       {var
         duration=duration_ms / 1000.,
         fps=frames / duration,
         msg=
          caml_call8
           (sprintf(_tg_),_tf_,rom_path,_te_,frames,_td_,duration,_tc_,fps),
         result_el=find_el_by_id$0(_th_);
        return set_children
                (result_el,[0,txt(0,caml_jsstring_of_string(msg)),0])}
      return let$0(run_rom_path(rom_path,frames),_tk_)}
    function _ti_(_tj_){return _tj_}
    await$1(main(0),_ti_);
    do_at_exit(0);
    return}
  (function(){return this}()));
